# WORDS
50 :: \P \y. (P(y) & COUNT(50, y))
Alabama :: \x.(EQUAL(x, alabama))
Alaska :: \x.(EQUAL(x, alaska))
Albany :: \x.(EQUAL(x, albany))
America :: \x.(EQUAL(x, america))
American :: \P \y. (P(y) & american(y))
Antonio :: \x.(EQUAL(x, antonio))
Arizona :: \x.(EQUAL(x, arizona))
Arkansas :: \x.(EQUAL(x, arkansas))
Atlanta :: \x.(EQUAL(x, atlanta))
Austin :: \x.(EQUAL(x, austin))
Baton :: \x.(EQUAL(x, baton))
Boston :: \x.(EQUAL(x, boston))
Boulder :: \x.(EQUAL(x, boulder))
California :: \x.(EQUAL(x, california))
Carolina :: \x.(EQUAL(x, carolina))
Chattahoochee :: \x.(EQUAL(x, chattahoochee))
Chicago :: \x.(EQUAL(x, chicago))
City :: \x.(EQUAL(x, city))
Colorado :: \x.(EQUAL(x, colorado))
Columbus :: \x.(columbus(x))
Count :: \x.(EQUAL(x, count))
DC :: \x.(EQUAL(x, dc))
Dakota :: \x.(EQUAL(x, dakota))
Dallas :: \x.(EQUAL(x, dallas))
Death :: \x.(EQUAL(x, death))
Delaware :: \x.(EQUAL(x, delaware))
Denver :: \x.(EQUAL(x, denver))
Des :: \x.(des(x))
Des :: \x.(EQUAL(x, des))
Detroit :: \x.(EQUAL(x, detroit))
Diego :: \x.(EQUAL(x, diego))
Dover :: \x.(EQUAL(x, dover))
Durham :: \x.(EQUAL(x, durham))
Erie :: \x.(EQUAL(x, erie))
Flint :: \x.(flint(x))
Florida :: \x.(EQUAL(x, florida))
Fort :: \x.(EQUAL(x, fort))
Francisco :: \x.(EQUAL(x, francisco))
GA :: \x.(EQUAL(x, ga))
Georgia :: \x.(EQUAL(x, georgia))
Give :: \Q \P \e. exists y z .(Q(y) & P(z) & give:1(e, z) & give:2(e, y))
Give :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & give:1(e, y) & give:2(e, w) & give:3(e, z))
Grande :: \x.(EQUAL(x, grande))
Guadalupe :: \x.(EQUAL(x, guadalupe))
Hampshire :: \x.(EQUAL(x, hampshire))
Hawaii :: \x.(EQUAL(x, hawaii))
Houston :: \x.(EQUAL(x, houston))
How :: \Q \P \R \e. exists y z w .(Q(y) & P(z)(w) & R & TARGET(y) & TARGET(z) & TARGET(w))
How :: \Q \P \S \R \e. exists z y .(Q(z) & P & S & R(y)(z) & TARGET(z) & TARGET(y))
How :: \Q \P \S \R \e. exists w y z .(Q(w) & P & S(y) & R(z)(y) & TARGET(w) & TARGET(y) & TARGET(z))
How :: \Q \P \R \e. exists z y .(Q(z) & P & R(y) & TARGET(z) & TARGET(y))
Idaho :: \x.(EQUAL(x, idaho))
Illinois :: \x.(EQUAL(x, illinois))
In :: \Q \P \R \e. exists y z .(Q(y)(z) & P & R & in:1(e, z) & in:2(e, y))
In :: \Q \P \R \y. exists z w .(Q(z)(w) & P(y) & R & in:1(y, w) & in:2(y, z))
Indiana :: \x.(EQUAL(x, indiana))
Indianapolis :: \x.(EQUAL(x, indianapolis))
Iowa :: \x.(EQUAL(x, iowa))
Island :: \x.(EQUAL(x, island))
Jersey :: \x.(EQUAL(x, jersey))
Jose :: \x.(EQUAL(x, jose))
Kalamazoo :: \x.(EQUAL(x, kalamazoo))
Kansas :: \x.(EQUAL(x, kansas))
Kentucky :: \x.(EQUAL(x, kentucky))
Lake :: \x.(EQUAL(x, lake))
List :: \Q \P \e. exists y z .(Q(y) & P(z) & list:1(e, z) & list:2(e, y))
Louisiana :: \x.(EQUAL(x, louisiana))
Maine :: \x.(EQUAL(x, maine))
Maryland :: \x.(EQUAL(x, maryland))
Massachusetts :: \x.(EQUAL(x, massachusetts))
McKinley :: \x.(EQUAL(x, mckinley))
Mexico :: \x.(EQUAL(x, mexico))
Miami :: \x.(EQUAL(x, miami))
Michigan :: \x.(EQUAL(x, michigan))
Minneapolis :: \x.(EQUAL(x, minneapolis))
Minnesota :: \x.(EQUAL(x, minnesota))
Mississippi :: \x.(EQUAL(x, mississippi))
Missouri :: \x.(EQUAL(x, missouri))
Moines :: \x.(EQUAL(x, moines))
Montana :: \x.(EQUAL(x, montana))
Montgomery :: \x.(EQUAL(x, montgomery))
Mount :: \x.(EQUAL(x, mount))
Name :: \Q \P \e. exists y z .(Q(y) & P(z) & name:1(e, z) & name:2(e, y))
Name :: \x.(EQUAL(x, name))
Nebraska :: \x.(EQUAL(x, nebraska))
Nevada :: \x.(EQUAL(x, nevada))
New :: \x.(EQUAL(x, new))
North :: \x.(EQUAL(x, north))
Number :: \x.(EQUAL(x, number))
Of :: \P \e. exists y .(P(y) & of:1(e, y))
Ohio :: \x.(EQUAL(x, ohio))
Oklahoma :: \x.(EQUAL(x, oklahoma))
Oregon :: \x.(EQUAL(x, oregon))
Orleans :: \x.(EQUAL(x, orleans))
Peak :: \x.(EQUAL(x, peak))
Pennsylvania :: \x.(EQUAL(x, pennsylvania))
People :: \x.(people(x))
Pittsburgh :: \x.(EQUAL(x, pittsburgh))
Plano :: \x.(EQUAL(x, plano))
Platte :: \x.(EQUAL(x, platte))
Population :: \x.(population(x))
Portland :: \x.(EQUAL(x, portland))
Potomac :: \x.(EQUAL(x, potomac))
Red :: \x.(EQUAL(x, red))
Rhode :: \x.(EQUAL(x, rhode))
Rio :: \x.(EQUAL(x, rio))
Rivers :: \x.(rivers(x))
Riverside :: \x.(EQUAL(x, riverside))
Rochester :: \x.(EQUAL(x, rochester))
Rouge :: \x.(EQUAL(x, rouge))
Sacramento :: \x.(EQUAL(x, sacramento))
Salem :: \x.(salem(x))
Salt :: \x.(EQUAL(x, salt))
San :: \x.(EQUAL(x, san))
Scotts :: \x.(EQUAL(x, scotts))
Seattle :: \x.(EQUAL(x, seattle))
Show :: \x.(EQUAL(x, show))
South :: \x.(EQUAL(x, south))
Spokane :: \x.(EQUAL(x, spokane))
Springfield :: \x.(EQUAL(x, springfield))
State :: \x.(EQUAL(x, state))
States :: \x.(EQUAL(x, states))
Tell :: \Q \P \e. exists y z .(Q(y) & P(z) & tell:1(e, z) & tell:2(e, y))
Tempe :: \x.(EQUAL(x, tempe))
Tennessee :: \x.(EQUAL(x, tennessee))
Texas :: \x.(EQUAL(x, texas))
Through :: \Q \P \R \e. exists y z .(Q(y)(z) & P & R & through:1(e, z) & through:2(e, y))
Tucson :: \x.(EQUAL(x, tucson))
US :: \x.(EQUAL(x, us))
USA :: \x.(EQUAL(x, usa))
United :: \x.(EQUAL(x, united))
Utah :: \x.(EQUAL(x, utah))
Valley :: \x.(EQUAL(x, valley))
Vermont :: \x.(EQUAL(x, vermont))
Virginia :: \x.(EQUAL(x, virginia))
Washington :: \x.(EQUAL(x, washington))
Wayne :: \x.(EQUAL(x, wayne))
West :: \x.(EQUAL(x, west))
What :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
What :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & TARGET(y) & TARGET(z))
Where :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
Which :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & TARGET(y) & TARGET(z))
Which :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
Whitney :: \x.(EQUAL(x, whitney))
Wisconsin :: \x.(EQUAL(x, wisconsin))
Wyoming :: \x.(EQUAL(x, wyoming))
York :: \x.(EQUAL(x, york))
a :: None
about :: \Q \P \y. exists z .(Q(y) & P(z) & about:1(y, z))
adjacent :: \P \y. (P(y) & adjacent(y))
adjoin :: \Q \P \e. exists y z .(Q(y) & P(z) & adjoin(e))
are :: \Q \P \y. exists x.(P(x) & Q(x))
are :: \Q \P \e. exists y z .(Q(y) & P(z) & are:1(e, z) & are:2(e, y))
are :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & are:1(e, z) & are:2(e, y))
are :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & are:1(e, z) & are:2(e, y))
area :: \x.(area(x))
at :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & at:1(y, w) & at:2(y, z))
at :: \Q \P \R \y. exists w v .(Q & P(w)(v) & R(y) & at:1(y, v) & at:2(y, w))
average :: \P \y. (P(y) & average(y))
big :: \P \e. exists y .(P(y) & big(e))
big :: \P \y. (P(y) & big(y))
biggest :: \P \y. (P(y) & biggest(y))
border :: \x.(border(x))
bordering :: \Q \P \e. exists y z .(Q(y) & P(z) & bordering:1(e, z) & bordering:2(e, y))
bordering :: \x.(bordering(x))
bordering :: \P \e. exists y .(P(y) & bordering:1(e, y))
borders :: \x.(borders(x))
by :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & by:1(y, w) & by:2(y, z))
by :: \Q \P \y. exists z .(Q(y) & P(z) & by:1(y, z))
called :: \Q \P \e. exists y z .(Q(y) & P(z) & called:1(e, z) & called:2(e, y))
capital :: \x.(capital(x))
capitals :: \x.(capitals(x))
cities :: \x.(cities(x))
citizens :: \x.(citizens(x))
city :: \x.(city(x))
combined :: \P \e. exists y .(P(y) & combined:1(e, y))
combined :: \P \y. (P(y) & combined(y))
contain :: \Q \P \e. exists y z .(Q(y) & P(z) & contain:1(e, z) & contain:2(e, y))
contains :: \Q \P \e. exists y z .(Q(y) & P(z) & contains:1(e, z) & contains:2(e, y))
continental :: \P \y. (P(y) & continental(y))
country :: \x.(country(x))
cross :: \Q \P \e. exists y z .(Q(y) & P(z) & cross:1(e, z) & cross:2(e, y))
cross :: \x.(cross(x))
dense :: \P \y. (P(y) & dense(y))
densities :: \x.(densities(x))
density :: \x.(density(x))
do :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & do:1(e, z) & do:2(e, y))
do :: \Q \P \e. exists y z .(Q(y) & P(z) & do:1(e, z) & do:2(e, y))
does :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & does:1(e, z) & does:2(e, y))
does :: \Q \P \e. exists y z .(Q(y) & P(z) & does:1(e, z) & does:2(e, y))
does :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & does:1(e, z) & does:2(e, y))
elevation :: \x.(elevation(x))
elevations :: \x.(elevations(x))
exist :: \Q \P \e. exists y z .(Q(y) & P(z) & exist:1(e, z) & exist:2(e, y))
fewest :: \P \y. (P(y) & fewest(y))
flow :: \x.(flow(x))
flow :: \Q \P \e. exists y z .(Q(y) & P(z) & flow:1(e, z) & flow:2(e, y))
flow :: \P \e. exists y .(P(y) & flow:1(e, y))
flowing :: \P \e. exists y .(P(y) & flowing:1(e, y))
flows :: \P \e. exists y .(P(y) & flows:1(e, y))
flows :: \Q \P \e. exists y z .(Q(y) & P(z) & flows:1(e, z) & flows:2(e, y))
for :: \Q \P \y. exists z .(Q(y) & P(z) & for:1(y, z))
found :: \P \e. exists y .(P(y) & found:1(e, y))
go :: \Q \P \e. exists y z .(Q(y) & P(z) & go:1(e, z) & go:2(e, y))
goes :: \Q \P \e. exists y z .(Q(y) & P(z) & goes:1(e, z) & goes:2(e, y))
greatest :: \P \y. (P(y) & greatest(y))
has :: \Q \P \e. exists y z .(Q(y) & P(z) & has:1(e, z) & has:2(e, y))
have :: \Q \P \e. exists y z .(Q(y) & P(z) & have:1(e, z) & have:2(e, y))
have :: \P \e. exists y .(P(y) & have:1(e, y))
height :: \x.(height(x))
high :: \P \y. (P(y) & high(y))
high :: \P \e. exists y .(P(y) & high(e))
higher :: \P \y. (P(y) & higher(y))
higher :: \P \e. exists y .(P(y) & higher(e))
highest :: \P \y. (P(y) & highest(y))
how :: \Q \P \y. exists z .(Q(z) & P(y)(z) & TARGET(z))
in :: \Q \P \y. exists z .(Q(y) & P(z) & in:1(y, z))
in :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & in:1(y, w) & in:2(y, z))
in :: \P \e. exists y .(P(y) & in:1(e, y))
inhabitants :: \x.(inhabitants(x))
is :: \Q \P \y. exists x.(P(x) & Q(x))
is :: \Q \P \e. exists y z .(Q(y) & P(z) & is:1(e, z) & is:2(e, y))
is :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & is:1(e, z) & is:2(e, y))
is :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & is:1(e, z) & is:2(e, y))
it :: \x.(EQUAL(x, it))
kilometers :: \x.(kilometers(x))
km :: \x.(km(x))
lakes :: \x.(lakes(x))
large :: \P \e. exists y .(P(y) & large(e))
largest :: \P \y. (P(y) & largest(y))
least :: \Q \P \y. (Q(y) & P & least(y))
least :: \P \y. (P(y) & least(y))
length :: \x.(length(x))
level :: \x.(level(x))
lie :: \P \e. exists y .(P(y) & lie:1(e, y))
live :: \P \e. exists y .(P(y) & live:1(e, y))
lived :: \P \e. exists y .(P(y) & lived:1(e, y))
located :: \P \e. exists y .(P(y) & located:1(e, y))
located :: \Q \P \e. exists y z .(Q(y) & P(z) & located:1(e, z) & located:2(e, y))
long :: \P \e. exists y .(P(y) & long(e))
longer :: \P \e. exists y .(P(y) & longer(e))
longest :: \P \y. (P(y) & longest(y))
lower :: \Q \P \e. exists y z .(Q(y) & P(z) & lower(e))
lowest :: \P \y. (P(y) & lowest(y))
major :: \P \y. (P(y) & major(y))
maximum :: \P \y. (P(y) & maximum(y))
me :: \x.(EQUAL(x, me))
meters :: \x.(meters(x))
miles :: \x.(miles(x))
most :: \P \y. (P(y) & most(y))
most :: \Q \P \y. (Q(y) & P & most(y))
mountain :: \x.(mountain(x))
mountains :: \x.(mountains(x))
name :: \x.(name(x))
named :: \Q \P \e. exists y z .(Q(y) & P(z) & named:1(e, z) & named:2(e, y))
names :: \x.(names(x))
neighbor :: \x.(neighbor(x))
neighboring :: \P \y. (P(y) & neighboring(y))
next :: \P \e. exists y .(P(y) & next(e))
next :: \Q \P \e. exists y z .(Q(y) & P(z) & next(e))
no :: \P \y. (P(y) & COMPLEMENT(y))
no :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & COMPLEMENT(y))
not :: \Q \P \y. exists z .(Q(z) & P(y)(z) & not(y))
not :: \Q \P \y. exists z .(Q(z) & P(y)(z) & NEGATION(y))
not :: \P \y. (P(y) & not(y))
not :: \P \y. (P(y) & NEGATION(y))
number :: \x.(number(x))
of :: \Q \P \y. exists z .(Q(y) & P(z) & of:1(y, z))
of :: \P \e. exists y .(P(y) & of:1(e, y))
on :: \P \e. exists y .(P(y) & on:1(e, y))
on :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & on:1(y, w) & on:2(y, z))
one :: \P \y. (P(y) & COUNT(one, y))
one :: \x.(one(x))
other :: \P \y. (P(y) & other(y))
over :: \Q \P \y. exists z .(Q(y) & P(z) & over:1(y, z))
pass :: \Q \P \e. exists y z .(Q(y) & P(z) & pass:1(e, z) & pass:2(e, y))
passes :: \P \e. exists y .(P(y) & passes:1(e, y))
passes :: \Q \P \e. exists y z .(Q(y) & P(z) & passes:1(e, z) & passes:2(e, y))
peak :: \x.(peak(x))
people :: \x.(people(x))
per :: \Q \P \y. exists z .(Q(y) & P(z) & per:1(y, z))
point :: \x.(point(x))
points :: \x.(points(x))
populated :: \P \y. (P(y) & populated(y))
population :: \x.(population(x))
populations :: \x.(populations(x))
populous :: \P \y. (P(y) & populous(y))
reside :: \Q \P \e. exists y z .(Q(y) & P(z) & reside:1(e, z) & reside:2(e, y))
residents :: \x.(residents(x))
river :: \x.(river(x))
rivers :: \x.(rivers(x))
run :: \P \e. exists y .(P(y) & run:1(e, y))
run :: \Q \P \e. exists y z .(Q(y) & P(z) & run:1(e, z) & run:2(e, y))
run :: \x.(run(x))
running :: \P \e. exists y .(P(y) & running:1(e, y))
runs :: \x.(runs(x))
runs :: \Q \P \e. exists y z .(Q(y) & P(z) & runs:1(e, z) & runs:2(e, y))
runs :: \P \e. exists y .(P(y) & runs:1(e, y))
s :: \Q \P \S \R \y. exists v z w .(Q(v) & P(y) & S & R(z)(w) & _s:1(y, w) & _s:2(y, z) & _s:3(y, v))
s :: \Q \P \e. exists y z .(Q(y) & P(z) & _s:1(e, z) & _s:2(e, y))
sea :: \x.(sea(x))
shortest :: \P \y. (P(y) & shortest(y))
size :: \x.(size(x))
smallest :: \P \y. (P(y) & smallest(y))
sparsest :: \P \y. (P(y) & sparsest(y))
spot :: \x.(spot(x))
square :: \P \y. (P(y) & square(y))
state :: \x.(state(x))
states :: \x.(states(x))
surround :: \Q \P \e. exists y z .(Q(y) & P(z) & surround:1(e, z) & surround:2(e, y))
surrounding :: \Q \P \e. exists y z .(Q(y) & P(z) & surrounding:1(e, z) & surrounding:2(e, y))
tall :: \P \e. exists y .(P(y) & tall(e))
tallest :: \P \y. (P(y) & tallest(y))
tell :: \Q \P \e. exists y z .(Q(y) & P(z) & tell:1(e, z) & tell:2(e, y))
tell :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & tell:1(e, y) & tell:2(e, w) & tell:3(e, z))
than :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & than:1(y, w) & than:2(y, z))
than :: \Q \P \y. exists z .(Q(y) & P(z) & than:1(y, z))
that :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
the :: \P \y. (P(y) & UNIQUE(y))
them :: \x.(EQUAL(x, them))
through :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & through:1(y, w) & through:2(y, z))
through :: \P \e. exists y .(P(y) & through:1(e, y))
to :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & to:1(y, w) & to:2(y, z))
to :: \P \e. exists y .(P(y) & to:1(e, y))
total :: \P \y. (P(y) & total(y))
towns :: \x.(towns(x))
traverse :: \Q \P \e. exists y z .(Q(y) & P(z) & traverse:1(e, z) & traverse:2(e, y))
traversed :: \P \e. exists y .(P(y) & traversed:1(e, y))
traverses :: \Q \P \e. exists y z .(Q(y) & P(z) & traverses:1(e, z) & traverses:2(e, y))
traverses :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & traverses:1(e, y) & traverses:2(e, w) & traverses:3(e, z))
traverses :: \x.(traverses(x))
urban :: \P \y. (P(y) & urban(y))
washed :: \P \e. exists y .(P(y) & washed:1(e, y))
what :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
what :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & TARGET(y) & TARGET(z))
which :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
which :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & TARGET(y) & TARGET(z))
whose :: \Q \P \R \y. exists z w .(Q(z)(w) & P(w) & R(y) & TARGET(z) & TARGET(w))
you :: \x.(EQUAL(x, you))
# CATEGORIES
N :: \x.(EQUAL(x, {0}))
N :: \x.({0}(x))
NP :: \x.(EQUAL(x, {0}))
S/S :: \x.({0}(x))
S\S :: \x.(EQUAL(x, {0}))
N/N :: \x.(EQUAL(x, {0}))
N/N :: \P \y. (P(y) & {0}(y))
N/N :: \P \y. (P(y) & COUNT({0}, y))
N/N :: \x.({0}(x))
NP/N :: \P \y. (P(y) & COMPLEMENT(y))
NP/N :: None
NP/N :: \P \y. (P(y) & UNIQUE(y))
S\NP :: \P \e. exists y .(P(y) & {0}:1(e, y))
S\NP :: \P \e. exists y .(P(y) & {0}(e))
S\NP :: \x.({0}(x))
NP\NP :: \x.(EQUAL(x, {0}))
NP\NP :: \P \y. (P(y) & {0}(y))
NP\NP :: \P \y. (P(y) & NEGATION(y))
NP\NP :: \x.({0}(x))
PP/NP :: \P \e. exists y .(P(y) & {0}:1(e, y))
S/(S\NP) :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
(S\NP)/S :: \x.({0}(x))
(S\S)/NP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
S/(S/NP) :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
S/(S/PP) :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
(S/NP)/NP :: \Q \P \y. exists x.(P(x) & Q(x))
(S/NP)/NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/PP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/PP :: \Q \P \y. exists x.(P(x) & Q(x))
(S\NP)/PP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}(e))
(S\NP)/PP :: \x.({0}(x))
(S\NP)\NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}(e))
(S/PP)/NP :: \Q \P \y. exists x.(P(x) & Q(x))
(S/PP)/NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
NP/(S/NP) :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
(S\NP)/NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}(e))
(S\NP)/NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/NP :: \Q \P \y. exists x.(P(x) & Q(x))
NP/(S\NP) :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
(NP\NP)/NP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
(NP\NP)/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
(N/N)/(N/N) :: \Q \P \y. (Q(y) & P & {0}(y))
(S/(S/NP))/N :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & TARGET(y) & TARGET(z))
(S/(S\NP))/N :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & TARGET(y) & TARGET(z))
(S\(S/NP))/N :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & TARGET(y) & TARGET(z))
(S\NP)\(S\NP) :: \x.(EQUAL(x, {0}))
(S\NP)\(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}(y))
(S\NP)\(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & NEGATION(y))
(S\NP)\(S\NP) :: \x.({0}(x))
(S\NP)/(S\NP) :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/(S\NP) :: \Q \P \y. exists x.(P(x) & Q(x))
(S\NP)/(S\NP) :: \x.({0}(x))
(S\NP)/(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & TARGET(z))
(S/(S\NP))/NP :: \Q \P \R \e. exists y z .(Q(y)(z) & P(z) & R & {0}:1(e, z) & {0}:2(e, y))
(S/(S\NP))/NP :: \Q \P \y. exists x.(P(x) & Q(x))
((S\NP)/NP)/NP :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & {0}:1(e, y) & {0}:2(e, w) & {0}:3(e, z))
((S\NP)/PP)/NP :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & {0}:1(e, y) & {0}:2(e, w) & {0}:3(e, z))
(NP\NP)/(S\NP) :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
(NP\NP)/(NP\NP) :: \x.(EQUAL(x, {0}))
(NP\NP)/(NP\NP) :: \x.({0}(x))
((S/PP)/N)/(NP/N) :: \Q \P \R \e. exists z y .(Q(z) & P & R(y) & TARGET(z) & TARGET(y))
((S\NP)\(S\NP))/N :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & COMPLEMENT(y))
((NP\NP)/(S\NP))/N :: \Q \P \R \y. exists z w .(Q(z)(w) & P(w) & R(y) & TARGET(z) & TARGET(w))
((S\NP)\(S\NP))/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
((N/N)/(N/N))/(S\NP) :: \Q \P \R \y. exists w v .(Q & P(w)(v) & R(y) & {0}:1(y, v) & {0}:2(y, w))
(S/(S/PP))/(S/(S/NP)) :: \Q \P \R \e. exists y z .(Q(y)(z) & P & R & {0}:1(e, z) & {0}:2(e, y))
((S/(S\NP))/N)/(NP/N) :: \Q \P \S \R \e. exists z y .(Q(z) & P & S & R(y)(z) & TARGET(z) & TARGET(y))
((S/(S/NP))/N)/(NP/N) :: \Q \P \S \R \e. exists z y .(Q(z) & P & S & R(y)(z) & TARGET(z) & TARGET(y))
(S/(S/(S\NP)))/(S\NP) :: \Q \P \R \e. exists y z w .(Q(y) & P(z)(w) & R & TARGET(y) & TARGET(z) & TARGET(w))
(S/(S/NP))/(S/(S/NP)) :: \Q \P \R \y. exists z w .(Q(z)(w) & P(y) & R & {0}:1(y, w) & {0}:2(y, z))
((S/(S\NP))/N)\(S/(S\NP)) :: \Q \P \S \R \y. exists v z w .(Q(v) & P(y) & S & R(z)(w) & {0}:1(y, w) & {0}:2(y, z) & {0}:3(y, v))
(((S/PP)/((S/PP)/NP))/N)/(NP/N) :: \Q \P \S \R \e. exists w y z .(Q(w) & P & S(y) & R(z)(y) & TARGET(w) & TARGET(y) & TARGET(z))
