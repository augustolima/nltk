# WORDS
007 :: \x.(EQUAL(x, 007))
007 :: \P x.(COUNT(x, 007) & P(x))
007 :: \B e. exists y .(007:1(e, y) & B(y))
1 :: \x.(EQUAL(x, _1))
1 :: \P x.(COUNT(x, _1) & P(x))
10 :: \x.(EQUAL(x, 10))
10 :: \P x.(COUNT(x, 10) & P(x))
100 :: \x.(EQUAL(x, 100))
100 :: \P x.(COUNT(x, 100) & P(x))
100 :: \B e. exists y .(100:1(e, y) & B(y))
13 :: \x.(EQUAL(x, 13))
13 :: \P x.(COUNT(x, 13) & P(x))
13 :: \B e. exists y .(13:1(e, y) & B(y))
14 :: \x.(EQUAL(x, 14))
14 :: \P x.(COUNT(x, 14) & P(x))
14 :: \B e. exists y .(14:1(e, y) & B(y))
1911 :: \x.(EQUAL(x, 1911))
1911 :: \P x.(COUNT(x, 1911) & P(x))
1911 :: \B e. exists y .(1911:1(e, y) & B(y))
1922 :: \x.(EQUAL(x, 1922))
1922 :: \P x.(COUNT(x, 1922) & P(x))
1932 :: \x.(EQUAL(x, 1932))
1932 :: \P x.(COUNT(x, 1932) & P(x))
1937 :: \x.(EQUAL(x, 1937))
1937 :: \P x.(COUNT(x, 1937) & P(x))
1937 :: \B e. exists y .(1937:1(e, y) & B(y))
1938 :: \x.(EQUAL(x, 1938))
1938 :: \P x.(COUNT(x, 1938) & P(x))
1940 :: \x.(EQUAL(x, 1940))
1940 :: \P x.(COUNT(x, 1940) & P(x))
1940s :: \x.(1940s(x))
1941 :: \x.(EQUAL(x, 1941))
1941 :: \P x.(COUNT(x, 1941) & P(x))
1942 :: \x.(EQUAL(x, 1942))
1942 :: \P x.(COUNT(x, 1942) & P(x))
1946 :: \x.(EQUAL(x, 1946))
1946 :: \P x.(COUNT(x, 1946) & P(x))
1947 :: \x.(EQUAL(x, 1947))
1947 :: \P x.(COUNT(x, 1947) & P(x))
1949 :: \x.(EQUAL(x, 1949))
1949 :: \P x.(COUNT(x, 1949) & P(x))
1952 :: \x.(EQUAL(x, 1952))
1952 :: \P x.(COUNT(x, 1952) & P(x))
1953 :: \x.(EQUAL(x, 1953))
1953 :: \P x.(COUNT(x, 1953) & P(x))
1959 :: \x.(EQUAL(x, 1959))
1959 :: \P x.(COUNT(x, 1959) & P(x))
1960 :: \x.(EQUAL(x, 1960))
1960 :: \P x.(COUNT(x, 1960) & P(x))
1962 :: \x.(EQUAL(x, 1962))
1962 :: \P x.(COUNT(x, 1962) & P(x))
1964 :: \x.(EQUAL(x, 1964))
1964 :: \P x.(COUNT(x, 1964) & P(x))
1964 :: \B e. exists y .(1964:1(e, y) & B(y))
1965 :: \x.(EQUAL(x, 1965))
1965 :: \P x.(COUNT(x, 1965) & P(x))
1965 :: \B e. exists y .(1965:1(e, y) & B(y))
1967 :: \x.(EQUAL(x, 1967))
1967 :: \P x.(COUNT(x, 1967) & P(x))
1967 :: \B e. exists y .(1967:1(e, y) & B(y))
1968 :: \x.(EQUAL(x, 1968))
1968 :: \P x.(COUNT(x, 1968) & P(x))
1968 :: \B e. exists y .(1968:1(e, y) & B(y))
1969 :: \x.(EQUAL(x, 1969))
1969 :: \P x.(COUNT(x, 1969) & P(x))
1970 :: \x.(EQUAL(x, 1970))
1970 :: \P x.(COUNT(x, 1970) & P(x))
1971 :: \x.(EQUAL(x, 1971))
1971 :: \P x.(COUNT(x, 1971) & P(x))
1973 :: \x.(EQUAL(x, 1973))
1973 :: \P x.(COUNT(x, 1973) & P(x))
1975 :: \x.(EQUAL(x, 1975))
1975 :: \P x.(COUNT(x, 1975) & P(x))
1976 :: \x.(EQUAL(x, 1976))
1976 :: \P x.(COUNT(x, 1976) & P(x))
1976 :: \B e. exists y .(1976:1(e, y) & B(y))
1980 :: \x.(EQUAL(x, 1980))
1980 :: \P x.(COUNT(x, 1980) & P(x))
1980 :: \B e. exists y .(1980:1(e, y) & B(y))
1981 :: \x.(EQUAL(x, 1981))
1981 :: \P x.(COUNT(x, 1981) & P(x))
1982 :: \x.(EQUAL(x, 1982))
1982 :: \P x.(COUNT(x, 1982) & P(x))
1982 :: \B e. exists y .(1982:1(e, y) & B(y))
1983 :: \x.(EQUAL(x, 1983))
1983 :: \P x.(COUNT(x, 1983) & P(x))
1983 :: \B e. exists y .(1983:1(e, y) & B(y))
1984 :: \x.(EQUAL(x, 1984))
1984 :: \P x.(COUNT(x, 1984) & P(x))
1984 :: \B e. exists y .(1984:1(e, y) & B(y))
1985 :: \x.(EQUAL(x, 1985))
1985 :: \P x.(COUNT(x, 1985) & P(x))
1985 :: \B e. exists y .(1985:1(e, y) & B(y))
1986 :: \x.(EQUAL(x, 1986))
1986 :: \P x.(COUNT(x, 1986) & P(x))
1986 :: \B e. exists y .(1986:1(e, y) & B(y))
1987 :: \x.(EQUAL(x, 1987))
1987 :: \P x.(COUNT(x, 1987) & P(x))
1987 :: \B e. exists y .(1987:1(e, y) & B(y))
1989 :: \x.(EQUAL(x, 1989))
1989 :: \P x.(COUNT(x, 1989) & P(x))
1989 :: \B e. exists y .(1989:1(e, y) & B(y))
1990 :: \x.(EQUAL(x, 1990))
1990 :: \P x.(COUNT(x, 1990) & P(x))
1991 :: \x.(EQUAL(x, 1991))
1991 :: \P x.(COUNT(x, 1991) & P(x))
1991 :: \B e. exists y .(1991:1(e, y) & B(y))
1992 :: \x.(EQUAL(x, 1992))
1992 :: \P x.(COUNT(x, 1992) & P(x))
1992 :: \B e. exists y .(1992:1(e, y) & B(y))
1993 :: \x.(EQUAL(x, 1993))
1993 :: \P x.(COUNT(x, 1993) & P(x))
1994 :: \x.(EQUAL(x, 1994))
1994 :: \P x.(COUNT(x, 1994) & P(x))
1994 :: \B e. exists y .(1994:1(e, y) & B(y))
1995 :: \x.(EQUAL(x, 1995))
1995 :: \P x.(COUNT(x, 1995) & P(x))
1996 :: \x.(EQUAL(x, 1996))
1996 :: \P x.(COUNT(x, 1996) & P(x))
1999 :: \x.(EQUAL(x, 1999))
1999 :: \P x.(COUNT(x, 1999) & P(x))
1st :: \x.(EQUAL(x, 1st))
1st :: \P x.(COUNT(x, 1st) & P(x))
1st :: \B e. exists y .(1st:1(e, y) & B(y))
2 :: \x.(EQUAL(x, _2))
2 :: \P x.(COUNT(x, _2) & P(x))
2 :: \B e. exists y .(_2:1(e, y) & B(y))
20 :: \x.(EQUAL(x, 20))
20 :: \P x.(COUNT(x, 20) & P(x))
20 :: \B e. exists y .(20:1(e, y) & B(y))
2000 :: \x.(EQUAL(x, 2000))
2000 :: \P x.(COUNT(x, 2000) & P(x))
2001 :: \x.(EQUAL(x, 2001))
2001 :: \P x.(COUNT(x, 2001) & P(x))
2001 :: \B e. exists y .(2001:1(e, y) & B(y))
2004 :: \x.(EQUAL(x, 2004))
2004 :: \P x.(COUNT(x, 2004) & P(x))
2004 :: \B e. exists z .(2004:1(e, z) & B(z))
2004 :: \B e. exists y .(2004:1(e, y) & B(y))
2007 :: \x.(EQUAL(x, 2007))
2007 :: \P x.(COUNT(x, 2007) & P(x))
2009 :: \x.(EQUAL(x, 2009))
2009 :: \P x.(COUNT(x, 2009) & P(x))
2009 :: \B e. exists y .(2009:1(e, y) & B(y))
2011 :: \x.(EQUAL(x, 2011))
2011 :: \P x.(COUNT(x, 2011) & P(x))
2011 :: \B e. exists y .(2011:1(e, y) & B(y))
2016 :: \x.(EQUAL(x, 2016))
2016 :: \P x.(COUNT(x, 2016) & P(x))
21 :: \x.(EQUAL(x, 21))
21 :: \P x.(COUNT(x, 21) & P(x))
21 :: \B e. exists y .(21:1(e, y) & B(y))
25 :: \x.(EQUAL(x, 25))
25 :: \P x.(COUNT(x, 25) & P(x))
25 :: \B e. exists y .(25:1(e, y) & B(y))
269 :: \x.(EQUAL(x, 269))
269 :: \P x.(COUNT(x, 269) & P(x))
269 :: \B e. exists y .(269:1(e, y) & B(y))
3 :: \x.(EQUAL(x, _3))
3 :: \P x.(COUNT(x, _3) & P(x))
30 :: \x.(EQUAL(x, 30))
30 :: \P x.(COUNT(x, 30) & P(x))
34 :: \x.(EQUAL(x, 34))
34 :: \P x.(COUNT(x, 34) & P(x))
3rd :: \P x.(P(3rd(x)) & P(x))
3rd :: \B e. exists y .(3rd:1(e, y) & B(y))
4 :: \x.(EQUAL(x, _4))
4 :: \P x.(COUNT(x, _4) & P(x))
4 :: \B e. exists y .(_4:1(e, y) & B(y))
44 :: \x.(EQUAL(x, 44))
44 :: \P x.(COUNT(x, 44) & P(x))
49 :: \x.(EQUAL(x, 49))
49 :: \P x.(COUNT(x, 49) & P(x))
5 :: \x.(EQUAL(x, _5))
5 :: \P x.(COUNT(x, _5) & P(x))
5 :: \B e. exists y .(_5:1(e, y) & B(y))
50 :: \x.(EQUAL(x, 50))
50 :: \P x.(COUNT(x, 50) & P(x))
50 :: \B e. exists y .(50:1(e, y) & B(y))
53 :: \x.(EQUAL(x, 53))
53 :: \P x.(COUNT(x, 53) & P(x))
53 :: \B e. exists y .(53:1(e, y) & B(y))
6 :: \x.(EQUAL(x, _6))
6 :: \P x.(COUNT(x, _6) & P(x))
6 :: \B e. exists y .(_6:1(e, y) & B(y))
60 :: \x.(EQUAL(x, 60))
60 :: \P x.(COUNT(x, 60) & P(x))
69 :: \x.(EQUAL(x, 69))
69 :: \P x.(COUNT(x, 69) & P(x))
69 :: \B e. exists y .(69:1(e, y) & B(y))
77 :: \x.(EQUAL(x, 77))
77 :: \P x.(COUNT(x, 77) & P(x))
77 :: \B e. exists y .(77:1(e, y) & B(y))
78 :: \x.(EQUAL(x, 78))
78 :: \P x.(COUNT(x, 78) & P(x))
78 :: \B e. exists y .(78:1(e, y) & B(y))
8 :: \x.(EQUAL(x, _8))
8 :: \P x.(COUNT(x, _8) & P(x))
89 :: \x.(EQUAL(x, 89))
89 :: \P x.(COUNT(x, 89) & P(x))
89 :: \B e. exists y .(89:1(e, y) & B(y))
90 :: \x.(EQUAL(x, 90))
90 :: \P x.(COUNT(x, 90) & P(x))
93 :: \x.(EQUAL(x, 93))
93 :: \P x.(COUNT(x, 93) & P(x))
93 :: \B e. exists y .(93:1(e, y) & B(y))
Act :: \x.(EQUAL(x, act))
Actors :: \x.(EQUAL(x, actors))
Actors :: \B e. exists y .(actors:1(e, y) & B(y))
Adams :: \x.(EQUAL(x, adams))
Address :: \x.(EQUAL(x, address))
Affair :: \x.(EQUAL(x, affair))
Afghanistan :: \x.(EQUAL(x, afghanistan))
After :: \B C e. exists y z .(after:1(e, y) & after:2(e, z) & C(y) & B(z))
Afterwards :: \P e.(P(afterwards(e)) & P(e))
Afterwards :: \B e. exists y .(afterwards:1(e, y) & B(y))
Agent :: \x.(EQUAL(x, agent))
Agent :: \B e. exists y .(agent:1(e, y) & B(y))
Air :: \x.(EQUAL(x, air))
Air :: \B e. exists y .(air:1(e, y) & B(y))
Also :: \P e.(P(also(e)) & P(e))
Also :: \B e. exists y .(also:1(e, y) & B(y))
Although :: \B C e. exists y z .(although:1(e, y) & although:2(e, z) & C(y) & B(z))
Alzheimer :: \x.(EQUAL(x, alzheimer))
Alzheimer :: \B e. exists y .(alzheimer:1(e, y) & B(y))
America :: \x.(EQUAL(x, america))
American :: \P x.(P(american(x)) & P(x))
American :: \B e. exists y .(american:1(e, y) & B(y))
American :: \x.(EQUAL(x, american))
Americans :: \x.(EQUAL(x, americans))
Angeles :: \x.(EQUAL(x, angeles))
Angeles :: \B e. exists y .(angeles:1(e, y) & B(y))
Army :: \x.(EQUAL(x, army))
As :: \B C e. exists y z .(as:1(e, y) & as:2(e, z) & C(y) & B(z))
Association :: \x.(EQUAL(x, association))
At :: \B C e. exists y z .(at:1(e, y) & at:2(e, z) & C(y) & B(z))
Audio :: \x.(EQUAL(x, audio))
August :: \x.(EQUAL(x, august))
Award :: \x.(EQUAL(x, award))
B :: \x.(EQUAL(x, _b))
B :: \B e. exists y .(_b:1(e, y) & B(y))
Barack :: \x.(EQUAL(x, barack))
Barack :: \B e. exists y .(barack:1(e, y) & B(y))
Barbara :: \x.(EQUAL(x, barbara))
Barbara :: \B e. exists y .(barbara:1(e, y) & B(y))
Baroness :: \x.(EQUAL(x, baroness))
Baroness :: \B e. exists y .(baroness:1(e, y) & B(y))
Barry :: \x.(EQUAL(x, barry))
Barry :: \B e. exists y .(barry:1(e, y) & B(y))
Bath :: \x.(bath(x))
Before :: \B C e. exists y z .(before:1(e, y) & before:2(e, z) & C(y) & B(z))
Before :: \B C D e. exists y z w .(before:1(e, y) & before:2(e, z) & before:3(e, w) & D(y) & C(z) & B(w))
Bel :: \x.(EQUAL(x, bel))
Bel :: \B e. exists y .(bel:1(e, y) & B(y))
Berlin :: \x.(EQUAL(x, berlin))
Berlin :: \B e. exists y .(berlin:1(e, y) & B(y))
Berlusconi :: \x.(EQUAL(x, berlusconi))
Berlusconi :: \B e. exists y .(berlusconi:1(e, y) & B(y))
Best :: \x.(EQUAL(x, best))
Best :: \B e. exists y .(best:1(e, y) & B(y))
Bette :: \x.(EQUAL(x, bette))
Bette :: \B e. exists y .(bette:1(e, y) & B(y))
Betty :: \x.(EQUAL(x, betty))
Betty :: \B e. exists y .(betty:1(e, y) & B(y))
Bible :: \x.(EQUAL(x, bible))
Bill :: \x.(EQUAL(x, bill))
Bill :: \B e. exists y .(bill:1(e, y) & B(y))
Billy :: \x.(EQUAL(x, billy))
Billy :: \B e. exists y .(billy:1(e, y) & B(y))
Bird :: \x.(EQUAL(x, bird))
Bird :: \B e. exists y .(bird:1(e, y) & B(y))
Blair :: \x.(EQUAL(x, blair))
Board :: \x.(EQUAL(x, board))
Bogart :: \x.(EQUAL(x, bogart))
Bosley :: \x.(EQUAL(x, bosley))
Bosley :: \B e. exists y .(bosley:1(e, y) & B(y))
Brady :: \x.(EQUAL(x, brady))
Brandenburg :: \x.(EQUAL(x, brandenburg))
Brandenburg :: \B e. exists y .(brandenburg:1(e, y) & B(y))
Brian :: \x.(EQUAL(x, brian))
Brian :: \B e. exists y .(brian:1(e, y) & B(y))
British :: \x.(EQUAL(x, british))
British :: \B e. exists y .(british:1(e, y) & B(y))
British :: \P x.(P(british(x)) & P(x))
Brooklyn :: \x.(EQUAL(x, brooklyn))
Brooklyn :: \B e. exists y .(brooklyn:1(e, y) & B(y))
Brooks :: \x.(EQUAL(x, brooks))
Brown :: \x.(EQUAL(x, brown))
Bush :: \x.(EQUAL(x, bush))
But :: \P Q x.(P(x) & Q(x))
But :: \B e. exists y .(but:1(e, y) & B(y))
CBS :: \x.(EQUAL(x, cbs))
CBS :: \B e. exists y .(cbs:1(e, y) & B(y))
CEO :: \x.(EQUAL(x, ceo))
CEO :: \B e. exists y .(ceo:1(e, y) & B(y))
CNN :: \x.(EQUAL(x, cnn))
CV64 :: \x.(EQUAL(x, cv64))
CVN76 :: \x.(EQUAL(x, cvn76))
California :: \x.(EQUAL(x, california))
California :: \B e. exists y .(california:1(e, y) & B(y))
Canadian :: \x.(EQUAL(x, canadian))
Canadian :: \B e. exists y .(canadian:1(e, y) & B(y))
Capitol :: \x.(EQUAL(x, capitol))
Capitol :: \B e. exists y .(capitol:1(e, y) & B(y))
Captain :: \x.(EQUAL(x, captain))
Captain :: \B e. exists y .(captain:1(e, y) & B(y))
Carter :: \x.(EQUAL(x, carter))
Cathedral :: \x.(EQUAL(x, cathedral))
Catholic :: \x.(EQUAL(x, catholic))
Centennial :: \x.(EQUAL(x, centennial))
Centennial :: \B e. exists y .(centennial:1(e, y) & B(y))
Century :: \x.(EQUAL(x, century))
Century :: \B e. exists y .(century:1(e, y) & B(y))
Challenger :: \x.(EQUAL(x, challenger))
Challenger :: \B e. exists y .(challenger:1(e, y) & B(y))
Chancellor :: \x.(EQUAL(x, chancellor))
Chancellor :: \B e. exists y .(chancellor:1(e, y) & B(y))
Chicago :: \x.(EQUAL(x, chicago))
Chicago :: \B e. exists y .(chicago:1(e, y) & B(y))
Cielo :: \x.(EQUAL(x, cielo))
City :: \x.(EQUAL(x, city))
Civilian :: \x.(EQUAL(x, civilian))
Civilian :: \B e. exists y .(civilian:1(e, y) & B(y))
Clinton :: \x.(EQUAL(x, clinton))
Coin :: \x.(EQUAL(x, coin))
Coin :: \B e. exists y .(coin:1(e, y) & B(y))
Cold :: \x.(EQUAL(x, cold))
Cold :: \B e. exists y .(cold:1(e, y) & B(y))
Collection :: \x.(EQUAL(x, collection))
College :: \x.(EQUAL(x, college))
Commission :: \x.(EQUAL(x, commission))
Commission :: \B e. exists y .(commission:1(e, y) & B(y))
Communicator :: \x.(EQUAL(x, communicator))
Communist :: \P x.(P(communist(x)) & P(x))
Communist :: \B e. exists y .(communist:1(e, y) & B(y))
Condoleezza :: \x.(EQUAL(x, condoleezza))
Condoleezza :: \B e. exists y .(condoleezza:1(e, y) & B(y))
Congress :: \x.(EQUAL(x, congress))
Congressional :: \x.(EQUAL(x, congressional))
Congressional :: \B e. exists y .(congressional:1(e, y) & B(y))
Constellation :: \x.(EQUAL(x, constellation))
Contras :: \x.(EQUAL(x, contras))
Control :: \x.(EQUAL(x, control))
Control :: \B e. exists y .(control:1(e, y) & B(y))
Convention :: \x.(EQUAL(x, convention))
Court :: \x.(EQUAL(x, court))
Court :: \B e. exists y .(court:1(e, y) & B(y))
Cowboy :: \x.(cowboy(x))
Craig :: \x.(EQUAL(x, craig))
Craig :: \B e. exists y .(craig:1(e, y) & B(y))
Crowther :: \x.(EQUAL(x, crowther))
Cubs :: \x.(EQUAL(x, cubs))
D :: \x.(EQUAL(x, _d))
D :: \B e. exists y .(_d:1(e, y) & B(y))
DC :: \x.(EQUAL(x, dc))
Dark :: \x.(EQUAL(x, dark))
Dark :: \B e. exists y .(dark:1(e, y) & B(y))
Davis :: \x.(EQUAL(x, davis))
Day :: \x.(EQUAL(x, day))
Day :: \B e. exists y .(day:1(e, y) & B(y))
Deal :: \x.(EQUAL(x, deal))
Defense :: \x.(EQUAL(x, defense))
Defense :: \B e. exists y .(defense:1(e, y) & B(y))
Delahanty :: \x.(EQUAL(x, delahanty))
Democrat :: \x.(EQUAL(x, democrat))
Democrat :: \B e. exists y .(democrat:1(e, y) & B(y))
Democratic :: \P x.(P(democratic(x)) & P(x))
Democratic :: \B e. exists y .(democratic:1(e, y) & B(y))
Democratic :: \x.(EQUAL(x, democratic))
Democrats :: \x.(EQUAL(x, democrats))
Dennis :: \x.(EQUAL(x, dennis))
Dennis :: \B e. exists y .(dennis:1(e, y) & B(y))
Despite :: \B C e. exists y z .(despite:1(e, y) & despite:2(e, z) & C(y) & B(z))
Diaries :: \x.(EQUAL(x, diaries))
Directors :: \x.(directors(x))
Disease :: \x.(disease(x))
Dixon :: \x.(EQUAL(x, dixon))
Douglas :: \x.(EQUAL(x, douglas))
Drugs :: \x.(EQUAL(x, drugs))
During :: \B C e. exists y z .(during:1(e, y) & during:2(e, z) & C(y) & B(z))
Dwight :: \x.(EQUAL(x, dwight))
Dwight :: \B e. exists y .(dwight:1(e, y) & B(y))
Eagle :: \x.(EQUAL(x, eagle))
Early :: \P e.(P(early(e)) & P(e))
Early :: \B C e. exists y z .(early:1(e, y) & early:2(e, z) & C(y) & B(z))
Eisenhower :: \x.(EQUAL(x, eisenhower))
Electric :: \x.(EQUAL(x, electric))
Electric :: \B e. exists y .(electric:1(e, y) & B(y))
Elizabeth :: \x.(EQUAL(x, elizabeth))
Elizabeth :: \B e. exists y .(elizabeth:1(e, y) & B(y))
Embassy :: \x.(EQUAL(x, embassy))
English :: \x.(EQUAL(x, english))
Era :: \x.(era(x))
Errol :: \x.(EQUAL(x, errol))
Errol :: \B e. exists y .(errol:1(e, y) & B(y))
Eureka :: \x.(EQUAL(x, eureka))
Eureka :: \B e. exists y .(eureka:1(e, y) & B(y))
Europe :: \x.(EQUAL(x, europe))
Evangelicals :: \x.(EQUAL(x, evangelicals))
Even :: \P e.(P(even(e)) & P(e))
Even :: \B e. exists z .(even:1(e, z) & B(z))
Evil :: \x.(EQUAL(x, evil))
Evil :: \B e. exists y .(evil:1(e, y) & B(y))
FBI :: \x.(EQUAL(x, fbi))
Fame :: \x.(EQUAL(x, fame))
Fe :: \x.(EQUAL(x, fe))
Fe :: \B e. exists y .(fe:1(e, y) & B(y))
February :: \x.(EQUAL(x, february))
First :: \x.(EQUAL(x, first))
First :: \B e. exists y .(first:1(e, y) & B(y))
Flight :: \x.(EQUAL(x, flight))
Florida :: \x.(EQUAL(x, florida))
Flynn :: \x.(EQUAL(x, flynn))
Following :: \B C e. exists y z .(following:1(e, y) & following:2(e, z) & C(y) & B(z))
For :: \B C e. exists y z .(for:1(e, y) & for:2(e, z) & C(y) & B(z))
Forces :: \x.(EQUAL(x, forces))
Forces :: \B e. exists y .(forces:1(e, y) & B(y))
Ford :: \x.(EQUAL(x, ford))
Foreign :: \P x.(P(foreign(x)) & P(x))
Foreign :: \B e. exists y .(foreign:1(e, y) & B(y))
Former :: \x.(EQUAL(x, former))
Former :: \B e. exists y .(former:1(e, y) & B(y))
Foundation :: \x.(EQUAL(x, foundation))
Francisco :: \x.(EQUAL(x, francisco))
Franklin :: \x.(EQUAL(x, franklin))
Franklin :: \B e. exists y .(franklin:1(e, y) & B(y))
Freedom :: \x.(EQUAL(x, freedom))
Freedom :: \B e. exists y .(freedom:1(e, y) & B(y))
Frick :: \x.(EQUAL(x, frick))
From :: \B C e. exists y z .(from:1(e, y) & from:2(e, z) & C(y) & B(z))
GPS :: \x.(EQUAL(x, gps))
Gahagan :: \x.(EQUAL(x, gahagan))
Gahagan :: \B e. exists y .(gahagan:1(e, y) & B(y))
Galesburg :: \x.(EQUAL(x, galesburg))
Gate :: \x.(EQUAL(x, gate))
General :: \x.(EQUAL(x, general))
General :: \B e. exists y .(general:1(e, y) & B(y))
George :: \x.(EQUAL(x, george))
George :: \B e. exists y .(george:1(e, y) & B(y))
Gerald :: \x.(EQUAL(x, gerald))
Gerald :: \B e. exists y .(gerald:1(e, y) & B(y))
Gerhard :: \x.(EQUAL(x, gerhard))
Gerhard :: \B e. exists y .(gerhard:1(e, y) & B(y))
German :: \x.(EQUAL(x, german))
German :: \B e. exists y .(german:1(e, y) & B(y))
Ghazi :: \x.(EQUAL(x, ghazi))
Ghazi :: \B e. exists y .(ghazi:1(e, y) & B(y))
Gipp :: \x.(EQUAL(x, gipp))
Gipp :: \B e. exists y .(gipp:1(e, y) & B(y))
Gipper :: \x.(EQUAL(x, gipper))
God :: \x.(EQUAL(x, god))
Gold :: \x.(EQUAL(x, gold))
Gold :: \B e. exists y .(gold:1(e, y) & B(y))
Goldwater :: \x.(EQUAL(x, goldwater))
Goodwin :: \x.(EQUAL(x, goodwin))
Gorbachev :: \x.(EQUAL(x, gorbachev))
Governor :: \x.(EQUAL(x, governor))
Governor :: \B e. exists y .(governor:1(e, y) & B(y))
Governors :: \x.(EQUAL(x, governors))
Governors :: \B e. exists y .(governors:1(e, y) & B(y))
Graham :: \x.(EQUAL(x, graham))
Great :: \x.(EQUAL(x, great))
Great :: \B e. exists y .(great:1(e, y) & B(y))
Grenada :: \x.(EQUAL(x, grenada))
Grosvenor :: \x.(EQUAL(x, grosvenor))
Grosvenor :: \B e. exists y .(grosvenor:1(e, y) & B(y))
Guild :: \x.(EQUAL(x, guild))
H :: \x.(EQUAL(x, _h))
H :: \B e. exists y .(_h:1(e, y) & B(y))
Hall :: \x.(EQUAL(x, hall))
Hall :: \B e. exists y .(hall:1(e, y) & B(y))
Hamid :: \P x.(P(hamid(x)) & P(x))
Hamid :: \B C e. exists y z .(hamid:1(e, y) & hamid:2(e, z) & C(y) & B(z))
He :: \x.(EQUAL(x, he))
Helen :: \x.(EQUAL(x, helen))
Helen :: \B e. exists y .(helen:1(e, y) & B(y))
Herbert :: \x.(EQUAL(x, herbert))
Herbert :: \B e. exists y .(herbert:1(e, y) & B(y))
Hilton :: \x.(EQUAL(x, hilton))
Hilton :: \B e. exists y .(hilton:1(e, y) & B(y))
Hinckley :: \x.(EQUAL(x, hinckley))
Hollywood :: \x.(EQUAL(x, hollywood))
Honorary :: \x.(EQUAL(x, honorary))
Honorary :: \B e. exists y .(honorary:1(e, y) & B(y))
Hoover :: \x.(EQUAL(x, hoover))
Hospital :: \x.(EQUAL(x, hospital))
Hotel :: \x.(EQUAL(x, hotel))
House :: \x.(EQUAL(x, house))
House :: \B e. exists y .(house:1(e, y) & B(y))
Humphrey :: \x.(EQUAL(x, humphrey))
Humphrey :: \B e. exists y .(humphrey:1(e, y) & B(y))
I :: \x.(EQUAL(x, _i))
II :: \x.(EQUAL(x, ii))
INF :: \x.(EQUAL(x, inf))
INF :: \B e. exists y .(inf:1(e, y) & B(y))
Iceland :: \x.(EQUAL(x, iceland))
Illinois :: \x.(EQUAL(x, illinois))
Immigration :: \x.(EQUAL(x, immigration))
Immigration :: \B e. exists y .(immigration:1(e, y) & B(y))
In :: \B C e. exists y z .(in:1(e, y) & in:2(e, z) & C(y) & B(z))
Inaugural :: \x.(EQUAL(x, inaugural))
Inaugural :: \B e. exists y .(inaugural:1(e, y) & B(y))
Independence :: \x.(EQUAL(x, independence))
Independence :: \B e. exists y .(independence:1(e, y) & B(y))
Initiative :: \x.(EQUAL(x, initiative))
Institute :: \x.(EQUAL(x, institute))
IntermediateRange :: \x.(EQUAL(x, intermediaterange))
IntermediateRange :: \B e. exists y .(intermediaterange:1(e, y) & B(y))
Investigative :: \x.(EQUAL(x, investigative))
Investigative :: \B e. exists y .(investigative:1(e, y) & B(y))
Iran :: \x.(EQUAL(x, iran))
IranContra :: \x.(EQUAL(x, irancontra))
IranContra :: \B e. exists y .(irancontra:1(e, y) & B(y))
Iran–Contra :: \x.(EQUAL(x, iran–contra))
Iran–Contra :: \B e. exists y .(iran–contra:1(e, y) & B(y))
Iraq :: \x.(EQUAL(x, iraq))
Irish :: \P x.(P(irish(x)) & P(x))
Irish :: \B e. exists y .(irish:1(e, y) & B(y))
Is :: \B C e. exists y z .(is:1(e, y) & is:2(e, z) & C(y) & B(z))
It :: \x.(EQUAL(x, it))
Italian :: \x.(EQUAL(x, italian))
Italian :: \B e. exists y .(italian:1(e, y) & B(y))
Jack :: \x.(EQUAL(x, jack))
James :: \x.(EQUAL(x, james))
James :: \B e. exists y .(james:1(e, y) & B(y))
Jane :: \x.(EQUAL(x, jane))
Jane :: \B e. exists y .(jane:1(e, y) & B(y))
January :: \x.(EQUAL(x, january))
Jerry :: \x.(EQUAL(x, jerry))
Jerry :: \B e. exists y .(jerry:1(e, y) & B(y))
Jimmy :: \x.(EQUAL(x, jimmy))
Jimmy :: \B e. exists y .(jimmy:1(e, y) & B(y))
John :: \x.(EQUAL(x, john))
John :: \B e. exists y .(john:1(e, y) & B(y))
Johnson :: \x.(EQUAL(x, johnson))
July :: \x.(EQUAL(x, july))
July :: \B e. exists y .(july:1(e, y) & B(y))
June :: \x.(EQUAL(x, june))
June :: \B C e. exists y z .(june:1(e, y) & june:2(e, z) & C(y) & B(z))
June :: \B e. exists y .(june:1(e, y) & B(y))
Kaczyński :: \x.(EQUAL(x, kaczyński))
Karzai :: \x.(EQUAL(x, karzai))
Killers :: \x.(EQUAL(x, killers))
King :: \x.(EQUAL(x, king))
Kingdom :: \x.(EQUAL(x, kingdom))
Kingdom :: \B e. exists y .(kingdom:1(e, y) & B(y))
Kings :: \x.(EQUAL(x, kings))
Kings :: \B e. exists y .(kings:1(e, y) & B(y))
Kings :: \x.(kings(x))
Knighthood :: \x.(EQUAL(x, knighthood))
Knute :: \x.(EQUAL(x, knute))
Knute :: \B e. exists y .(knute:1(e, y) & B(y))
Korean :: \x.(EQUAL(x, korean))
Korean :: \B e. exists y .(korean:1(e, y) & B(y))
Korean :: \P x.(P(korean(x)) & P(x))
Lady :: \x.(EQUAL(x, lady))
Lady :: \B e. exists y .(lady:1(e, y) & B(y))
Larry :: \x.(EQUAL(x, larry))
Larry :: \B e. exists y .(larry:1(e, y) & B(y))
Laura :: \x.(EQUAL(x, laura))
Laura :: \B e. exists y .(laura:1(e, y) & B(y))
Lech :: \x.(EQUAL(x, lech))
Lech :: \B e. exists y .(lech:1(e, y) & B(y))
Lesley :: \x.(EQUAL(x, lesley))
Lesley :: \B e. exists y .(lesley:1(e, y) & B(y))
Liberty :: \x.(EQUAL(x, liberty))
Library :: \x.(EQUAL(x, library))
Libya :: \x.(EQUAL(x, libya))
Libya :: \B e. exists y .(libya:1(e, y) & B(y))
Life :: \x.(EQUAL(x, life))
Lines :: \x.(EQUAL(x, lines))
Lines :: \B e. exists y .(lines:1(e, y) & B(y))
London :: \x.(EQUAL(x, london))
Los :: \x.(EQUAL(x, los))
Los :: \B e. exists y .(los:1(e, y) & B(y))
Love :: \x.(love(x))
Lyndon :: \x.(EQUAL(x, lyndon))
Lyndon :: \B e. exists y .(lyndon:1(e, y) & B(y))
Many :: \P x.(P(many(x)) & P(x))
Many :: \B e. exists y .(many:1(e, y) & B(y))
March :: \x.(EQUAL(x, march))
March :: \B C e. exists y w .(march:1(e, y) & march:2(e, w) & C(y) & B(w))
March :: \B e. exists y .(march:1(e, y) & B(y))
Margaret :: \x.(EQUAL(x, margaret))
Margaret :: \B e. exists y .(margaret:1(e, y) & B(y))
Maureen :: \x.(EQUAL(x, maureen))
Maureen :: \B e. exists y .(maureen:1(e, y) & B(y))
May :: \x.(EQUAL(x, may))
May :: \B e. exists y .(may:1(e, y) & B(y))
May :: \B C e. exists y z .(may:1(e, y) & may:2(e, z) & C(y) & B(z))
McCarthy :: \x.(EQUAL(x, mccarthy))
Medal :: \x.(EQUAL(x, medal))
Meritorious :: \x.(EQUAL(x, meritorious))
Meritorious :: \B e. exists y .(meritorious:1(e, y) & B(y))
Michael :: \x.(EQUAL(x, michael))
Michael :: \B e. exists y .(michael:1(e, y) & B(y))
Mikhail :: \x.(EQUAL(x, mikhail))
Mikhail :: \B e. exists y .(mikhail:1(e, y) & B(y))
Minister :: \x.(EQUAL(x, minister))
Minister :: \B e. exists y .(minister:1(e, y) & B(y))
Minneapolis :: \x.(EQUAL(x, minneapolis))
Minnesota :: \x.(EQUAL(x, minnesota))
Mondale :: \x.(EQUAL(x, mondale))
Monday :: \x.(EQUAL(x, monday))
Monmouth :: \x.(EQUAL(x, monmouth))
Months :: \x.(months(x))
Motion :: \x.(EQUAL(x, motion))
Motion :: \B e. exists y .(motion:1(e, y) & B(y))
Mr :: \x.(EQUAL(x, mr))
Mr :: \B e. exists y .(mr:1(e, y) & B(y))
Mrs :: \x.(EQUAL(x, mrs))
Mrs :: \B e. exists y .(mrs:1(e, y) & B(y))
Mulroney :: \x.(EQUAL(x, mulroney))
NIS :: \x.(EQUAL(x, nis))
Nancy :: \x.(EQUAL(x, nancy))
Nancy :: \B e. exists y .(nancy:1(e, y) & B(y))
National :: \x.(EQUAL(x, national))
National :: \B e. exists y .(national:1(e, y) & B(y))
Naval :: \x.(EQUAL(x, naval))
Naval :: \B e. exists y .(naval:1(e, y) & B(y))
Navy :: \x.(EQUAL(x, navy))
Navy :: \B e. exists y .(navy:1(e, y) & B(y))
Neil :: \x.(EQUAL(x, neil))
Nelle :: \x.(EQUAL(x, nelle))
Nelle :: \B e. exists y .(nelle:1(e, y) & B(y))
New :: \x.(EQUAL(x, new))
New :: \B e. exists y .(new:1(e, y) & B(y))
Nicaraguan :: \P x.(P(nicaraguan(x)) & P(x))
Nicaraguan :: \B e. exists y .(nicaraguan:1(e, y) & B(y))
Nixon :: \x.(EQUAL(x, nixon))
November :: \x.(EQUAL(x, november))
Nuclear :: \x.(EQUAL(x, nuclear))
Nuclear :: \B e. exists y .(nuclear:1(e, y) & B(y))
OConnor :: \x.(EQUAL(x, oconnor))
Obama :: \x.(EQUAL(x, obama))
October :: \x.(EQUAL(x, october))
Office :: \x.(EQUAL(x, office))
On :: \B C e. exists y z .(on:1(e, y) & on:2(e, z) & C(y) & B(z))
Order :: \x.(order(x))
Orlando :: \x.(EQUAL(x, orlando))
Oval :: \x.(EQUAL(x, oval))
Oval :: \B e. exists y .(oval:1(e, y) & B(y))
Over :: \B C e. exists y z .(over:1(e, y) & over:2(e, z) & C(y) & B(z))
Parade :: \x.(EQUAL(x, parade))
Parkinson :: \x.(EQUAL(x, parkinson))
Parliament :: \x.(EQUAL(x, parliament))
Party :: \x.(EQUAL(x, party))
Party :: \B e. exists y .(party:1(e, y) & B(y))
Pat :: \x.(EQUAL(x, pat))
Pat :: \B e. exists y .(pat:1(e, y) & B(y))
Picture :: \x.(EQUAL(x, picture))
Picture :: \B e. exists y .(picture:1(e, y) & B(y))
Poland :: \x.(EQUAL(x, poland))
President :: \x.(EQUAL(x, president))
President :: \B e. exists y .(president:1(e, y) & B(y))
Presidential :: \x.(EQUAL(x, presidential))
Presidential :: \B e. exists y .(presidential:1(e, y) & B(y))
Presidential :: \P x.(P(presidential(x)) & P(x))
Press :: \x.(EQUAL(x, press))
Press :: \B e. exists y .(press:1(e, y) & B(y))
Prime :: \x.(EQUAL(x, prime))
Prime :: \B e. exists y .(prime:1(e, y) & B(y))
Program :: \x.(EQUAL(x, program))
Protestant :: \x.(protestant(x))
Queen :: \x.(EQUAL(x, queen))
Queen :: \B e. exists y .(queen:1(e, y) & B(y))
Radio :: \x.(EQUAL(x, radio))
Radio :: \B e. exists y .(radio:1(e, y) & B(y))
Rancho :: \x.(EQUAL(x, rancho))
Rancho :: \B e. exists y .(rancho:1(e, y) & B(y))
Reagan :: \x.(EQUAL(x, reagan))
Reagan :: \B e. exists y .(reagan:1(e, y) & B(y))
Reaganomics :: \x.(reaganomics(x))
Reaganomics :: \x.(EQUAL(x, reaganomics))
Reagans :: \x.(EQUAL(x, reagans))
Reagans :: \x.(reagans(x))
Reagans :: \B e. exists y .(reagans:1(e, y) & B(y))
Referring :: \B e. exists y .(referring:1(e, y) & B(y))
Reform :: \x.(EQUAL(x, reform))
Report :: \x.(EQUAL(x, report))
Republican :: \P x.(P(republican(x)) & P(x))
Republican :: \B e. exists y .(republican:1(e, y) & B(y))
Republican :: \x.(EQUAL(x, republican))
Republicans :: \x.(republicans(x))
Research :: \x.(EQUAL(x, research))
Research :: \B e. exists y .(research:1(e, y) & B(y))
Reverend :: \x.(EQUAL(x, reverend))
Reverend :: \B e. exists y .(reverend:1(e, y) & B(y))
Reykjavík :: \x.(EQUAL(x, reykjavík))
Reykjavík :: \B e. exists y .(reykjavík:1(e, y) & B(y))
Rice :: \x.(EQUAL(x, rice))
Richard :: \x.(EQUAL(x, richard))
Richard :: \B e. exists y .(richard:1(e, y) & B(y))
Rockne :: \x.(EQUAL(x, rockne))
Roman :: \x.(EQUAL(x, roman))
Roman :: \B e. exists y .(roman:1(e, y) & B(y))
Ronald :: \x.(EQUAL(x, ronald))
Ronald :: \B e. exists y .(ronald:1(e, y) & B(y))
Ronnie :: \x.(EQUAL(x, ronnie))
Roosevelt :: \x.(EQUAL(x, roosevelt))
Rosalynn :: \x.(EQUAL(x, rosalynn))
Rosalynn :: \B e. exists y .(rosalynn:1(e, y) & B(y))
Rotunda :: \x.(EQUAL(x, rotunda))
Row :: \x.(EQUAL(x, row))
Row :: \B C e. exists y z .(row:1(e, y) & row:2(e, z) & C(y) & B(z))
San :: \x.(EQUAL(x, san))
San :: \B e. exists y .(san:1(e, y) & B(y))
Sandra :: \x.(EQUAL(x, sandra))
Sandra :: \B e. exists y .(sandra:1(e, y) & B(y))
Santa :: \x.(EQUAL(x, santa))
Santa :: \B e. exists y .(santa:1(e, y) & B(y))
Schröder :: \x.(EQUAL(x, schröder))
Scottish :: \x.(EQUAL(x, scottish))
Scottish :: \B e. exists y .(scottish:1(e, y) & B(y))
Screen :: \x.(EQUAL(x, screen))
Screen :: \B e. exists y .(screen:1(e, y) & B(y))
Secret :: \x.(EQUAL(x, secret))
Secret :: \B e. exists y .(secret:1(e, y) & B(y))
Secretary :: \x.(EQUAL(x, secretary))
Secretary :: \B e. exists y .(secretary:1(e, y) & B(y))
Seller :: \x.(EQUAL(x, seller))
September :: \x.(EQUAL(x, september))
Service :: \x.(EQUAL(x, service))
Service :: \B e. exists y .(service:1(e, y) & B(y))
She :: \x.(EQUAL(x, she))
Shuttle :: \x.(EQUAL(x, shuttle))
Shuttle :: \B e. exists y .(shuttle:1(e, y) & B(y))
Silvio :: \x.(EQUAL(x, silvio))
Silvio :: \B e. exists y .(silvio:1(e, y) & B(y))
Since :: \B C e. exists y z .(since:1(e, y) & since:2(e, z) & C(y) & B(z))
Soon :: \P e.(P(soon(e)) & P(e))
Soon :: \B e. exists y .(soon:1(e, y) & B(y))
Soviet :: \x.(EQUAL(x, soviet))
Soviet :: \B e. exists y .(soviet:1(e, y) & B(y))
Soviets :: \x.(EQUAL(x, soviets))
Space :: \x.(EQUAL(x, space))
Space :: \B e. exists y .(space:1(e, y) & B(y))
Special :: \B C e. exists y z .(special:1(e, y) & special:2(e, z) & C(y) & B(z))
Special :: \P x.(P(special(x)) & P(x))
Special :: \B e. exists y .(special:1(e, y) & B(y))
Square :: \x.(EQUAL(x, square))
Stahl :: \x.(EQUAL(x, stahl))
Stahl :: \B e. exists y .(stahl:1(e, y) & B(y))
Star :: \x.(EQUAL(x, star))
Star :: \B e. exists y .(star:1(e, y) & B(y))
Starr :: \x.(EQUAL(x, starr))
Starr :: \B e. exists y .(starr:1(e, y) & B(y))
State :: \x.(state(x))
State :: \x.(EQUAL(x, state))
States :: \x.(EQUAL(x, states))
States :: \B e. exists y .(states:1(e, y) & B(y))
Station :: \x.(EQUAL(x, station))
Station :: \B e. exists y .(station:1(e, y) & B(y))
Statuary :: \x.(EQUAL(x, statuary))
Statuary :: \B e. exists y .(statuary:1(e, y) & B(y))
Statue :: \x.(EQUAL(x, statue))
Strategic :: \x.(EQUAL(x, strategic))
Strategic :: \B e. exists y .(strategic:1(e, y) & B(y))
Summit :: \x.(EQUAL(x, summit))
Supreme :: \x.(EQUAL(x, supreme))
Supreme :: \B e. exists y .(supreme:1(e, y) & B(y))
Tampico :: \x.(EQUAL(x, tampico))
Teflon :: \x.(EQUAL(x, teflon))
Teflon :: \B e. exists y .(teflon:1(e, y) & B(y))
Thank :: \B C e. exists y z .(thank:1(e, y) & thank:2(e, z) & C(y) & B(z))
Thatcher :: \x.(EQUAL(x, thatcher))
Theater :: \x.(EQUAL(x, theater))
They :: \x.(EQUAL(x, they))
Thomas :: \x.(EQUAL(x, thomas))
Thomas :: \B e. exists y .(thomas:1(e, y) & B(y))
Throughout :: \B C e. exists y z .(throughout:1(e, y) & throughout:2(e, z) & C(y) & B(z))
Time :: \x.(time(x))
Times :: \x.(EQUAL(x, times))
Times :: \B e. exists y .(times:1(e, y) & B(y))
Timothy :: \x.(EQUAL(x, timothy))
Timothy :: \B e. exists y .(timothy:1(e, y) & B(y))
Tony :: \x.(EQUAL(x, tony))
Tony :: \B e. exists y .(tony:1(e, y) & B(y))
Tower :: \x.(EQUAL(x, tower))
Tower :: \B e. exists y .(tower:1(e, y) & B(y))
Trail :: \x.(EQUAL(x, trail))
Treaty :: \x.(EQUAL(x, treaty))
Two :: \x.(EQUAL(x, two))
Two :: \P x.(COUNT(x, two) & P(x))
Two :: \B e. exists y .(two:1(e, y) & B(y))
US :: \x.(EQUAL(x, us))
US :: \B e. exists y .(us:1(e, y) & B(y))
USS :: \x.(EQUAL(x, uss))
USS :: \B e. exists y .(uss:1(e, y) & B(y))
Union :: \x.(EQUAL(x, union))
Union :: \B e. exists y .(union:1(e, y) & B(y))
Unit :: \x.(EQUAL(x, unit))
United :: \x.(EQUAL(x, united))
United :: \B e. exists y .(united:1(e, y) & B(y))
University :: \x.(EQUAL(x, university))
University :: \B e. exists y .(university:1(e, y) & B(y))
Very :: \x.(EQUAL(x, very))
Vice :: \x.(EQUAL(x, vice))
Vice :: \B e. exists y .(vice:1(e, y) & B(y))
Victory :: \x.(EQUAL(x, victory))
Voodoo :: \x.(EQUAL(x, voodoo))
Voodoo :: \B e. exists y .(voodoo:1(e, y) & B(y))
W :: \x.(EQUAL(x, _w))
W :: \B e. exists y .(_w:1(e, y) & B(y))
WHO :: \P. exists x.(TARGET(x) & P(x))
WHO :: \P Q x. exists e.(P(x,e) & Q(x))
Wall :: \x.(EQUAL(x, wall))
Walter :: \x.(EQUAL(x, walter))
Walter :: \B e. exists y .(walter:1(e, y) & B(y))
War :: \x.(EQUAL(x, war))
War :: \B e. exists y .(war:1(e, y) & B(y))
Wars :: \x.(EQUAL(x, wars))
Warsaw :: \x.(EQUAL(x, warsaw))
Washington :: \x.(EQUAL(x, washington))
Washington :: \B e. exists y .(washington:1(e, y) & B(y))
Wałęsa :: \x.(EQUAL(x, wałęsa))
We :: \x.(EQUAL(x, we))
When :: \P. exists x.(TARGET(x) & P(x))
When :: \P Q x. exists e.(P(x,e) & Q(x))
When :: \B C e. exists y z .(when:1(e, y) & when:2(e, z) & C(y) & B(z))
While :: \B C e. exists y z .(while:1(e, y) & while:2(e, z) & C(y) & B(z))
White :: \x.(EQUAL(x, white))
White :: \B e. exists y .(white:1(e, y) & B(y))
William :: \x.(EQUAL(x, william))
William :: \B e. exists y .(william:1(e, y) & B(y))
Wilson :: \x.(EQUAL(x, wilson))
Wilson :: \B e. exists y .(wilson:1(e, y) & B(y))
World :: \x.(EQUAL(x, world))
World :: \B e. exists y .(world:1(e, y) & B(y))
Wyman :: \x.(EQUAL(x, wyman))
York :: \x.(EQUAL(x, york))
York :: \B e. exists y .(york:1(e, y) & B(y))
You :: \x.(EQUAL(x, you))
a :: None
able :: \P x.(P(able(x)) & P(x))
able :: \B C e. exists y z .(able:1(e, y) & able:2(e, z) & C(y) & B(z))
aboard :: \B C e. exists y w .(aboard:1(e, y) & aboard:2(e, w) & C(y) & B(w))
aboard :: \B C e. exists y z .(aboard:1(e, y) & aboard:2(e, z) & C(y) & B(z))
about :: \B e. exists y .(about:1(e, y) & B(y))
about :: \B C e. exists y z .(about:1(e, y) & about:2(e, z) & C(y) & B(z))
about :: \B C e. exists y w .(about:1(e, y) & about:2(e, w) & C(y) & B(w))
accept :: \B C e. exists y z .(accept:1(e, y) & accept:2(e, z) & C(y) & B(z))
access :: \x.(access(x))
across :: \B C e. exists y w .(across:1(e, y) & across:2(e, w) & C(y) & B(w))
act :: \x.(act(x))
acting :: \B e. exists y .(acting:1(e, y) & B(y))
acting :: \P x.(P(acting(x)) & P(x))
active :: \P x.(P(active(x)) & P(x))
active :: \B e. exists y .(active:1(e, y) & B(y))
active :: \B C e. exists y z .(active:1(e, y) & active:2(e, z) & C(y) & B(z))
activities :: \x.(activities(x))
actor :: \x.(actor(x))
actors :: \x.(actors(x))
actress :: \x.(actress(x))
actress :: \B e. exists y .(actress:1(e, y) & B(y))
added :: \B C e. exists y z .(added:1(e, y) & added:2(e, z) & C(y) & B(z))
address :: \x.(address(x))
address :: \B C e. exists y z .(address:1(e, y) & address:2(e, z) & C(y) & B(z))
addressed :: \B C e. exists y z .(addressed:1(e, y) & addressed:2(e, z) & C(y) & B(z))
addressing :: \B C e. exists y z .(addressing:1(e, y) & addressing:2(e, z) & C(y) & B(z))
administration :: \x.(administration(x))
admire :: \B C e. exists y z .(admire:1(e, y) & admire:2(e, z) & C(y) & B(z))
admired :: \B C e. exists y z .(admired:1(e, y) & admired:2(e, z) & C(y) & B(z))
admired :: \B e. exists y .(admired:1(e, y) & B(y))
advance :: \x.(advance(x))
advance :: \B C e. exists y z .(advance:1(e, y) & advance:2(e, z) & C(y) & B(z))
advocate :: \x.(advocate(x))
affair :: \x.(affair(x))
affected :: \B C e. exists y z .(affected:1(e, y) & affected:2(e, z) & C(y) & B(z))
afflicted :: \B C e. exists y z .(afflicted:1(e, y) & afflicted:2(e, z) & C(y) & B(z))
after :: \B C e. exists y w .(after:1(e, y) & after:2(e, w) & C(y) & B(w))
after :: \B C e. exists y z .(after:1(e, y) & after:2(e, z) & C(y) & B(z))
afterwards :: \x.(afterwards(x))
afterwards :: \B C e. exists y z .(afterwards:1(e, y) & afterwards:2(e, z) & C(y) & B(z))
again :: \P e.(P(again(e)) & P(e))
again :: \B e. exists w .(again:1(e, w) & B(w))
again :: \B e. exists y .(again:1(e, y) & B(y))
against :: \B C e. exists y z .(against:1(e, y) & against:2(e, z) & C(y) & B(z))
against :: \B C e. exists y w .(against:1(e, y) & against:2(e, w) & C(y) & B(w))
against :: \B e. exists y .(against:1(e, y) & B(y))
age :: \x.(age(x))
agent :: \x.(agent(x))
agent :: \B e. exists y .(agent:1(e, y) & B(y))
ago :: \B C e. exists y z .(ago:1(e, y) & ago:2(e, z) & C(y) & B(z))
agreed :: \B C e. exists y z .(agreed:1(e, y) & agreed:2(e, z) & C(y) & B(z))
ahead :: \P e.(P(ahead(e)) & P(e))
ahead :: \B e. exists y .(ahead:1(e, y) & B(y))
aid :: \x.(aid(x))
airline :: \x.(airline(x))
airline :: \B e. exists y .(airline:1(e, y) & B(y))
alYawer :: \x.(EQUAL(x, alyawer))
alertness :: \x.(alertness(x))
allowed :: \B e. exists y .(allowed:1(e, y) & B(y))
allowed :: \B C e. exists y z .(allowed:1(e, y) & allowed:2(e, z) & C(y) & B(z))
also :: \P e.(P(also(e)) & P(e))
also :: \B e. exists y .(also:1(e, y) & B(y))
although :: \B C e. exists y w .(although:1(e, y) & although:2(e, w) & C(y) & B(w))
always :: \P e.(P(always(e)) & P(e))
always :: \B e. exists y .(always:1(e, y) & B(y))
am :: \P R. exists x.(R(x) & P(x))
among :: \B C e. exists y w .(among:1(e, y) & among:2(e, w) & C(y) & B(w))
amount :: \x.(amount(x))
amputee :: \x.(amputee(x))
an :: None
and :: \P Q x.(P(x) & Q(x))
angry :: \P x.(P(angry(x)) & P(x))
angry :: \B e. exists y .(angry:1(e, y) & B(y))
announcer :: \x.(announcer(x))
announcing :: \B C e. exists y z .(announcing:1(e, y) & announcing:2(e, z) & C(y) & B(z))
answered :: \B C e. exists y z .(answered:1(e, y) & answered:2(e, z) & C(y) & B(z))
anticommunist :: \P x.(P(anticommunist(x)) & P(x))
anticommunist :: \B e. exists y .(anticommunist:1(e, y) & B(y))
apartment :: \x.(apartment(x))
apartment :: \B e. exists y .(apartment:1(e, y) & B(y))
apology :: \x.(apology(x))
appearances :: \x.(appearances(x))
appeared :: \B e. exists y .(appeared:1(e, y) & B(y))
approved :: \B C e. exists y z .(approved:1(e, y) & approved:2(e, z) & C(y) & B(z))
are :: \P R. exists x.(R(x) & P(x))
arms :: \x.(arms(x))
around :: \P e.(P(around(e)) & P(e))
around :: \B e. exists y .(around:1(e, y) & B(y))
arrived :: \B e. exists y .(arrived:1(e, y) & B(y))
as :: \B e. exists y .(as:1(e, y) & B(y))
as :: \B C e. exists y z .(as:1(e, y) & as:2(e, z) & C(y) & B(z))
as :: \P e.(P(as(e)) & P(e))
as :: \B e. exists w .(as:1(e, w) & B(w))
as :: \B C e. exists y w .(as:1(e, y) & as:2(e, w) & C(y) & B(w))
assassination :: \x.(assassination(x))
assassination :: \B e. exists y .(assassination:1(e, y) & B(y))
assigned :: \B e. exists y .(assigned:1(e, y) & B(y))
at :: \B C e. exists y z .(at:1(e, y) & at:2(e, z) & C(y) & B(z))
at :: \B C e. exists y w .(at:1(e, y) & at:2(e, w) & C(y) & B(w))
at :: \B e. exists y .(at:1(e, y) & B(y))
ate :: \P x.(P(ate(x)) & P(x))
ate :: \B e. exists y .(ate:1(e, y) & B(y))
athletic :: \P x.(P(athletic(x)) & P(x))
athletic :: \B e. exists y .(athletic:1(e, y) & B(y))
attack :: \x.(attack(x))
attempt :: \x.(attempt(x))
attempts :: \x.(attempts(x))
attend :: \B e. exists y .(attend:1(e, y) & B(y))
attend :: \B C e. exists y z .(attend:1(e, y) & attend:2(e, z) & C(y) & B(z))
attendance :: \x.(attendance(x))
attended :: \B e. exists y .(attended:1(e, y) & B(y))
authority :: \x.(authority(x))
autobiography :: \x.(autobiography(x))
available :: \P x.(P(available(x)) & P(x))
available :: \B e. exists y .(available:1(e, y) & B(y))
award :: \x.(award(x))
awarded :: \B C e. exists y z .(awarded:1(e, y) & awarded:2(e, z) & C(y) & B(z))
away :: \P e.(P(away(e)) & P(e))
away :: \B C e. exists y w .(away:1(e, y) & away:2(e, w) & C(y) & B(w))
back :: \x.(back(x))
back :: \P e.(P(back(e)) & P(e))
back :: \B e. exists y .(back:1(e, y) & B(y))
bad :: \P x.(P(bad(x)) & P(x))
bad :: \B e. exists y .(bad:1(e, y) & B(y))
badly :: \P e.(P(badly(e)) & P(e))
badly :: \B e. exists y .(badly:1(e, y) & B(y))
balance :: \B C e. exists y z .(balance:1(e, y) & balance:2(e, z) & C(y) & B(z))
ballot :: \x.(ballot(x))
banned :: \B C e. exists y z .(banned:1(e, y) & banned:2(e, z) & C(y) & B(z))
baseball :: \x.(baseball(x))
baseball :: \B e. exists y .(baseball:1(e, y) & B(y))
based :: \B C e. exists y z .(based:1(e, y) & based:2(e, z) & C(y) & B(z))
battle :: \x.(battle(x))
be :: \P R. exists x.(R(x) & P(x))
beaches :: \x.(beaches(x))
became :: \B C e. exists y z .(became:1(e, y) & became:2(e, z) & C(y) & B(z))
because :: \B C e. exists y w .(because:1(e, y) & because:2(e, w) & C(y) & B(w))
become :: \B C e. exists y z .(become:1(e, y) & become:2(e, z) & C(y) & B(z))
becoming :: \B C e. exists y z .(becoming:1(e, y) & becoming:2(e, z) & C(y) & B(z))
becoming :: \B e. exists y .(becoming:1(e, y) & B(y))
been :: \B C e. exists y z .(been:1(e, y) & been:2(e, z) & C(y) & B(z))
before :: \B C e. exists y w .(before:1(e, y) & before:2(e, w) & C(y) & B(w))
began :: \B C e. exists y z .(began:1(e, y) & began:2(e, z) & C(y) & B(z))
begin :: \B C e. exists y z .(begin:1(e, y) & begin:2(e, z) & C(y) & B(z))
behalf :: \x.(behalf(x))
being :: \B C e. exists y z .(being:1(e, y) & being:2(e, z) & C(y) & B(z))
believe :: \B C e. exists y z .(believe:1(e, y) & believe:2(e, z) & C(y) & B(z))
believed :: \B C e. exists y z .(believed:1(e, y) & believed:2(e, z) & C(y) & B(z))
believes :: \B C e. exists y z .(believes:1(e, y) & believes:2(e, z) & C(y) & B(z))
benefits :: \x.(benefits(x))
between :: \B C e. exists y z .(between:1(e, y) & between:2(e, z) & C(y) & B(z))
between :: \B C e. exists y w .(between:1(e, y) & between:2(e, w) & C(y) & B(w))
between :: \B e. exists y .(between:1(e, y) & B(y))
big :: \P x.(P(big(x)) & P(x))
big :: \B e. exists y .(big:1(e, y) & B(y))
bills :: \x.(bills(x))
birthday :: \x.(birthday(x))
bless :: \P x.(P(bless(x)) & P(x))
bless :: \B C e. exists y w .(bless:1(e, y) & bless:2(e, w) & C(y) & B(w))
blood :: \x.(blood(x))
bombing :: \x.(bombing(x))
bone :: \x.(bone(x))
born :: \B e. exists y .(born:1(e, y) & B(y))
born :: \B C e. exists y z .(born:1(e, y) & born:2(e, z) & C(y) & B(z))
borrow :: \B C e. exists y z .(borrow:1(e, y) & borrow:2(e, z) & C(y) & B(z))
bright :: \P x.(P(bright(x)) & P(x))
bright :: \B e. exists y .(bright:1(e, y) & B(y))
broadcaster :: \x.(broadcaster(x))
broken :: \P x.(P(broken(x)) & P(x))
broken :: \B e. exists y .(broken:1(e, y) & B(y))
brother :: \x.(brother(x))
brought :: \B C e. exists y z .(brought:1(e, y) & brought:2(e, z) & C(y) & B(z))
budget :: \x.(budget(x))
building :: \x.(building(x))
buildup :: \x.(buildup(x))
built :: \B e. exists y .(built:1(e, y) & B(y))
bullet :: \x.(bullet(x))
bullets :: \x.(bullets(x))
buried :: \B e. exists y .(buried:1(e, y) & B(y))
businesses :: \x.(businesses(x))
businesspeople :: \x.(businesspeople(x))
but :: \P Q x.(P(x) & Q(x))
by :: \B C e. exists y w .(by:1(e, y) & by:2(e, w) & C(y) & B(w))
by :: \B C e. exists y z .(by:1(e, y) & by:2(e, z) & C(y) & B(z))
cadet :: \x.(cadet(x))
called :: \B C e. exists y z .(called:1(e, y) & called:2(e, z) & C(y) & B(z))
called :: \B C D e. exists y z w .(called:1(e, y) & called:2(e, z) & called:3(e, w) & D(y) & C(z) & B(w))
campaign :: \x.(campaign(x))
campaign :: \B e. exists y .(campaign:1(e, y) & B(y))
cancer :: \x.(cancer(x))
candidate :: \x.(candidate(x))
candidate :: \B e. exists y .(candidate:1(e, y) & B(y))
capable :: \P x.(P(capable(x)) & P(x))
capable :: \B C e. exists y z .(capable:1(e, y) & capable:2(e, z) & C(y) & B(z))
capacity :: \x.(capacity(x))
capital :: \x.(capital(x))
care :: \x.(care(x))
career :: \x.(career(x))
carried :: \B C e. exists y z .(carried:1(e, y) & carried:2(e, z) & C(y) & B(z))
casket :: \x.(casket(x))
cause :: \x.(cause(x))
cause :: \B C e. exists y z .(cause:1(e, y) & cause:2(e, z) & C(y) & B(z))
caused :: \B C e. exists y z .(caused:1(e, y) & caused:2(e, z) & C(y) & B(z))
cell :: \x.(cell(x))
cell :: \B e. exists y .(cell:1(e, y) & B(y))
centenary :: \x.(centenary(x))
center :: \x.(center(x))
ceremony :: \x.(ceremony(x))
challenging :: \B e. exists y .(challenging:1(e, y) & B(y))
change :: \x.(change(x))
changed :: \B C e. exists y z .(changed:1(e, y) & changed:2(e, z) & C(y) & B(z))
changes :: \x.(changes(x))
chest :: \x.(chest(x))
child :: \x.(child(x))
children :: \x.(children(x))
choice :: \x.(choice(x))
choose :: \B C e. exists y z .(choose:1(e, y) & choose:2(e, z) & C(y) & B(z))
christened :: \B C e. exists y z .(christened:1(e, y) & christened:2(e, z) & C(y) & B(z))
citizens :: \x.(citizens(x))
civilian :: \P x.(P(civilian(x)) & P(x))
civilian :: \B e. exists y .(civilian:1(e, y) & B(y))
class :: \x.(class(x))
close :: \P x.(P(close(x)) & P(x))
close :: \B e. exists y .(close:1(e, y) & B(y))
close :: \B C e. exists y z .(close:1(e, y) & close:2(e, z) & C(y) & B(z))
coalitionists :: \x.(coalitionists(x))
collapse :: \x.(collapse(x))
college :: \x.(college(x))
college :: \B e. exists y .(college:1(e, y) & B(y))
colon :: \x.(colon(x))
colon :: \B e. exists y .(colon:1(e, y) & B(y))
come :: \B e. exists y .(come:1(e, y) & B(y))
come :: \B C e. exists y z .(come:1(e, y) & come:2(e, z) & C(y) & B(z))
coming :: \B e. exists y .(coming:1(e, y) & B(y))
commanding :: \P x.(P(commanding(x)) & P(x))
commanding :: \B e. exists y .(commanding:1(e, y) & B(y))
commission :: \x.(commission(x))
communism :: \x.(communism(x))
communist :: \P x.(P(communist(x)) & P(x))
communist :: \B e. exists y .(communist:1(e, y) & B(y))
communists :: \x.(communists(x))
complication :: \x.(complication(x))
complication :: \B e. exists y .(complication:1(e, y) & B(y))
conservative :: \P x.(P(conservative(x)) & P(x))
conservative :: \B e. exists y .(conservative:1(e, y) & B(y))
conservatives :: \x.(conservatives(x))
controversial :: \P x.(P(controversial(x)) & P(x))
controversial :: \B e. exists y .(controversial:1(e, y) & B(y))
correspondent :: \x.(correspondent(x))
correspondent :: \B e. exists y .(correspondent:1(e, y) & B(y))
country :: \x.(country(x))
countrymen :: \x.(countrymen(x))
countrymen :: \B e. exists y .(countrymen:1(e, y) & B(y))
coup :: \x.(coup(x))
couple :: \x.(couple(x))
create :: \B C e. exists y z .(create:1(e, y) & create:2(e, z) & C(y) & B(z))
created :: \B C e. exists y z .(created:1(e, y) & created:2(e, z) & C(y) & B(z))
credit :: \x.(credit(x))
crew :: \x.(crew(x))
crime :: \x.(crime(x))
critic :: \x.(critic(x))
critic :: \B e. exists y .(critic:1(e, y) & B(y))
criticism :: \x.(criticism(x))
criticized :: \B C e. exists y z .(criticized:1(e, y) & criticized:2(e, z) & C(y) & B(z))
critics :: \x.(critics(x))
cure :: \x.(cure(x))
cut :: \x.(cut(x))
cut :: \B e. exists y .(cut:1(e, y) & B(y))
darkness :: \x.(darkness(x))
daughter :: \x.(daughter(x))
dawn :: \x.(dawn(x))
day :: \x.(day(x))
days :: \x.(days(x))
death :: \x.(death(x))
decided :: \B C e. exists y z .(decided:1(e, y) & decided:2(e, z) & C(y) & B(z))
declared :: \B C e. exists y z .(declared:1(e, y) & declared:2(e, z) & C(y) & B(z))
decline :: \x.(decline(x))
decreased :: \B C e. exists y z .(decreased:1(e, y) & decreased:2(e, z) & C(y) & B(z))
dedicated :: \B e. exists y .(dedicated:1(e, y) & B(y))
defeated :: \B C e. exists y z .(defeated:1(e, y) & defeated:2(e, z) & C(y) & B(z))
defense :: \x.(defense(x))
defense :: \B e. exists y .(defense:1(e, y) & B(y))
del :: \x.(EQUAL(x, del))
del :: \B e. exists y .(del:1(e, y) & B(y))
delivered :: \B e. exists y .(delivered:1(e, y) & B(y))
delivered :: \B C D e. exists y z w .(delivered:1(e, y) & delivered:2(e, z) & delivered:3(e, w) & D(y) & C(z) & B(w))
departments :: \x.(departments(x))
descent :: \x.(descent(x))
described :: \B C e. exists y z .(described:1(e, y) & described:2(e, z) & C(y) & B(z))
destiny :: \x.(destiny(x))
destroy :: \B C e. exists y z .(destroy:1(e, y) & destroy:2(e, z) & C(y) & B(z))
destroyed :: \B C e. exists y z .(destroyed:1(e, y) & destroyed:2(e, z) & C(y) & B(z))
detente :: \x.(detente(x))
diagnosed :: \B C e. exists y z .(diagnosed:1(e, y) & diagnosed:2(e, z) & C(y) & B(z))
diagnosis :: \x.(diagnosis(x))
diary :: \x.(diary(x))
did :: \B C e. exists y z .(did:1(e, y) & did:2(e, z) & C(y) & B(z))
did :: \B C D e. exists y z w .(did:1(e, y) & did:2(e, z) & did:3(e, w) & D(y) & C(z) & B(w))
died :: \B e. exists y .(died:1(e, y) & B(y))
different :: \P x.(P(different(x)) & P(x))
different :: \B e. exists y .(different:1(e, y) & B(y))
difficult :: \P x.(P(difficult(x)) & P(x))
difficult :: \B e. exists y .(difficult:1(e, y) & B(y))
directed :: \B C D e. exists y z w .(directed:1(e, y) & directed:2(e, z) & directed:3(e, w) & D(y) & C(z) & B(w))
disease :: \x.(disease(x))
display :: \x.(display(x))
divided :: \B C e. exists y z .(divided:1(e, y) & divided:2(e, z) & C(y) & B(z))
divorced :: \B e. exists y .(divorced:1(e, y) & B(y))
do :: \B C e. exists y z .(do:1(e, y) & do:2(e, z) & C(y) & B(z))
doctors :: \x.(doctors(x))
doddering :: \B e. exists y .(doddering:1(e, y) & B(y))
doing :: \B C e. exists y z .(doing:1(e, y) & doing:2(e, z) & C(y) & B(z))
done :: \B C e. exists y z .(done:1(e, y) & done:2(e, z) & C(y) & B(z))
double :: \P x.(P(double(x)) & P(x))
double :: \B e. exists y .(double:1(e, y) & B(y))
down :: \P e.(P(down(e)) & P(e))
down :: \B e. exists y .(down:1(e, y) & B(y))
dramatically :: \P e.(P(dramatically(e)) & P(e))
dramatically :: \B e. exists y .(dramatically:1(e, y) & B(y))
due :: \P x.(P(due(x)) & P(x))
due :: \B C e. exists y z .(due:1(e, y) & due:2(e, z) & C(y) & B(z))
during :: \B C e. exists y w .(during:1(e, y) & during:2(e, w) & C(y) & B(w))
during :: \B C e. exists y z .(during:1(e, y) & during:2(e, z) & C(y) & B(z))
duty :: \x.(duty(x))
ear :: \x.(ear(x))
earth :: \x.(earth(x))
eastern :: \P x.(P(eastern(x)) & P(x))
eastern :: \B e. exists y .(eastern:1(e, y) & B(y))
economic :: \P x.(P(economic(x)) & P(x))
economic :: \B e. exists y .(economic:1(e, y) & B(y))
economics :: \x.(economics(x))
economy :: \x.(economy(x))
edited :: \B e. exists y .(edited:1(e, y) & B(y))
educational :: \P x.(P(educational(x)) & P(x))
educational :: \B e. exists y .(educational:1(e, y) & B(y))
elected :: \B C e. exists y z .(elected:1(e, y) & elected:2(e, z) & C(y) & B(z))
elected :: \B e. exists y .(elected:1(e, y) & B(y))
election :: \x.(election(x))
elections :: \x.(elections(x))
electoral :: \P x.(P(electoral(x)) & P(x))
electoral :: \B e. exists y .(electoral:1(e, y) & B(y))
embryonic :: \P x.(P(embryonic(x)) & P(x))
embryonic :: \B e. exists y .(embryonic:1(e, y) & B(y))
empire :: \x.(empire(x))
end :: \B C e. exists y z .(end:1(e, y) & end:2(e, z) & C(y) & B(z))
end :: \x.(end(x))
ended :: \B C e. exists y z .(ended:1(e, y) & ended:2(e, z) & C(y) & B(z))
ending :: \B C e. exists y z .(ending:1(e, y) & ending:2(e, z) & C(y) & B(z))
endorsed :: \B C e. exists y z .(endorsed:1(e, y) & endorsed:2(e, z) & C(y) & B(z))
engagement :: \x.(engagement(x))
enjoyed :: \B C e. exists y z .(enjoyed:1(e, y) & enjoyed:2(e, z) & C(y) & B(z))
enlarged :: \P x.(P(enlarged(x)) & P(x))
enlarged :: \B e. exists y .(enlarged:1(e, y) & B(y))
entire :: \P x.(P(entire(x)) & P(x))
entire :: \B e. exists y .(entire:1(e, y) & B(y))
entitled :: \B e. exists y .(entitled:1(e, y) & B(y))
eulogies :: \x.(eulogies(x))
even :: \P e.(P(even(e)) & P(e))
even :: \B e. exists y .(even:1(e, y) & B(y))
event :: \x.(event(x))
ever :: \P e.(P(ever(e)) & P(e))
ever :: \B e. exists y .(ever:1(e, y) & B(y))
evidence :: \x.(evidence(x))
evidence :: \B e. exists y .(evidence:1(e, y) & B(y))
executives :: \x.(executives(x))
experts :: \x.(experts(x))
exploded :: \B C e. exists y z .(exploded:1(e, y) & exploded:2(e, z) & C(y) & B(z))
faced :: \B C e. exists y z .(faced:1(e, y) & faced:2(e, z) & C(y) & B(z))
facts :: \x.(facts(x))
failed :: \B C e. exists y z .(failed:1(e, y) & failed:2(e, z) & C(y) & B(z))
faithless :: \P x.(P(faithless(x)) & P(x))
faithless :: \B e. exists y .(faithless:1(e, y) & B(y))
fall :: \x.(fall(x))
family :: \x.(family(x))
famous :: \P x.(P(famous(x)) & P(x))
famous :: \B e. exists y .(famous:1(e, y) & B(y))
famously :: \P e.(P(famously(e)) & P(e))
famously :: \B e. exists y .(famously:1(e, y) & B(y))
fan :: \x.(fan(x))
fan :: \B e. exists y .(fan:1(e, y) & B(y))
far :: \P e.(P(far(e)) & P(e))
far :: \B e. exists y .(far:1(e, y) & B(y))
fast :: \P x.(P(fast(x)) & P(x))
fast :: \B e. exists y .(fast:1(e, y) & B(y))
father :: \x.(father(x))
fault :: \x.(fault(x))
favorite :: \P x.(P(favorite(x)) & P(x))
favorite :: \B e. exists y .(favorite:1(e, y) & B(y))
federal :: \P x.(P(federal(x)) & P(x))
federal :: \B e. exists y .(federal:1(e, y) & B(y))
feel :: \B e. exists y .(feel:1(e, y) & B(y))
felt :: \B C e. exists y z .(felt:1(e, y) & felt:2(e, z) & C(y) & B(z))
few :: \P x.(P(few(x)) & P(x))
few :: \B e. exists y .(few:1(e, y) & B(y))
fifth :: \x.(fifth(x))
final :: \P x.(P(final(x)) & P(x))
final :: \B e. exists y .(final:1(e, y) & B(y))
finally :: \P e.(P(finally(e)) & P(e))
finally :: \B e. exists y .(finally:1(e, y) & B(y))
find :: \B C e. exists y z .(find:1(e, y) & find:2(e, z) & C(y) & B(z))
fine :: \P x.(P(fine(x)) & P(x))
fine :: \B e. exists y .(fine:1(e, y) & B(y))
finished :: \B e. exists y .(finished:1(e, y) & B(y))
fired :: \B C e. exists y z .(fired:1(e, y) & fired:2(e, z) & C(y) & B(z))
fired :: \B e. exists y .(fired:1(e, y) & B(y))
first :: \P x.(P(first(x)) & P(x))
first :: \B e. exists y .(first:1(e, y) & B(y))
first :: \P e.(P(first(e)) & P(e))
following :: \P x.(P(following(x)) & P(x))
following :: \B e. exists y .(following:1(e, y) & B(y))
for :: \B e. exists y .(for:1(e, y) & B(y))
for :: \B C e. exists y z .(for:1(e, y) & for:2(e, z) & C(y) & B(z))
for :: \B C e. exists y w .(for:1(e, y) & for:2(e, w) & C(y) & B(w))
foreign :: \P x.(P(foreign(x)) & P(x))
foreign :: \B e. exists y .(foreign:1(e, y) & B(y))
forgotten :: \B e. exists y .(forgotten:1(e, y) & B(y))
former :: \P x.(P(former(x)) & P(x))
former :: \B e. exists y .(former:1(e, y) & B(y))
four :: \x.(EQUAL(x, four))
four :: \P x.(COUNT(x, four) & P(x))
four :: \B e. exists y .(four:1(e, y) & B(y))
fracture :: \x.(fracture(x))
frail :: \P x.(P(frail(x)) & P(x))
frail :: \B e. exists y .(frail:1(e, y) & B(y))
free :: \P x.(P(free(x)) & P(x))
free :: \B e. exists y .(free:1(e, y) & B(y))
freedom :: \x.(freedom(x))
frequent :: \P x.(P(frequent(x)) & P(x))
frequent :: \B C e. exists y z .(frequent:1(e, y) & frequent:2(e, z) & C(y) & B(z))
friendly :: \P x.(P(friendly(x)) & P(x))
friendly :: \B e. exists y .(friendly:1(e, y) & B(y))
friends :: \x.(friends(x))
friendship :: \x.(friendship(x))
from :: \B C e. exists w v .(from:1(e, w) & from:2(e, v) & C(w) & B(v))
from :: \B C e. exists y w .(from:1(e, y) & from:2(e, w) & C(y) & B(w))
from :: \B e. exists y .(from:1(e, y) & B(y))
from :: \B C e. exists y z .(from:1(e, y) & from:2(e, z) & C(y) & B(z))
funding :: \x.(funding(x))
funeral :: \x.(funeral(x))
gained :: \B C e. exists y z .(gained:1(e, y) & gained:2(e, z) & C(y) & B(z))
games :: \x.(games(x))
gate :: \x.(gate(x))
gave :: \B C D e. exists y z w .(gave:1(e, y) & gave:2(e, z) & gave:3(e, w) & D(y) & C(z) & B(w))
gave :: \B C e. exists y z .(gave:1(e, y) & gave:2(e, z) & C(y) & B(z))
generation :: \x.(generation(x))
get :: \B C e. exists y z .(get:1(e, y) & get:2(e, z) & C(y) & B(z))
give :: \B C D e. exists y z w .(give:1(e, y) & give:2(e, z) & give:3(e, w) & D(y) & C(z) & B(w))
give :: \B C e. exists y z .(give:1(e, y) & give:2(e, z) & C(y) & B(z))
gives :: \B C D e. exists y z w .(gives:1(e, y) & gives:2(e, z) & gives:3(e, w) & D(y) & C(z) & B(w))
giving :: \B C e. exists y z .(giving:1(e, y) & giving:2(e, z) & C(y) & B(z))
go :: \B C e. exists y z .(go:1(e, y) & go:2(e, z) & C(y) & B(z))
go :: \B e. exists y .(go:1(e, y) & B(y))
golf :: \x.(golf(x))
gonzo :: \x.(gonzo(x))
good :: \P x.(P(good(x)) & P(x))
good :: \B e. exists y .(good:1(e, y) & B(y))
good :: \B C e. exists y z .(good:1(e, y) & good:2(e, z) & C(y) & B(z))
got :: \B C e. exists y z .(got:1(e, y) & got:2(e, z) & C(y) & B(z))
government :: \x.(government(x))
government :: \B e. exists y .(government:1(e, y) & B(y))
governor :: \x.(governor(x))
graduated :: \B C e. exists y z .(graduated:1(e, y) & graduated:2(e, z) & C(y) & B(z))
granted :: \B C e. exists y z .(granted:1(e, y) & granted:2(e, z) & C(y) & B(z))
group :: \x.(group(x))
growth :: \x.(growth(x))
guest :: \x.(guest(x))
had :: \B C e. exists y z .(had:1(e, y) & had:2(e, z) & C(y) & B(z))
happened :: \B e. exists y .(happened:1(e, y) & B(y))
has :: \B C e. exists y z .(has:1(e, y) & has:2(e, z) & C(y) & B(z))
have :: \B C e. exists y z .(have:1(e, y) & have:2(e, z) & C(y) & B(z))
having :: \B C e. exists y z .(having:1(e, y) & having:2(e, z) & C(y) & B(z))
he :: \x.(EQUAL(x, he))
head :: \x.(head(x))
health :: \x.(health(x))
health :: \B e. exists y .(health:1(e, y) & B(y))
hearing :: \x.(hearing(x))
hearing :: \B e. exists y .(hearing:1(e, y) & B(y))
heart :: \x.(heart(x))
held :: \B C e. exists y z .(held:1(e, y) & held:2(e, z) & C(y) & B(z))
held :: \B e. exists y .(held:1(e, y) & B(y))
helicopter :: \x.(helicopter(x))
help :: \B C e. exists y z .(help:1(e, y) & help:2(e, z) & C(y) & B(z))
help :: \B C D e. exists y z w .(help:1(e, y) & help:2(e, z) & help:3(e, w) & D(y) & C(z) & B(w))
helped :: \B C e. exists y z .(helped:1(e, y) & helped:2(e, z) & C(y) & B(z))
here :: \P e.(P(here(e)) & P(e))
here :: \B e. exists y .(here:1(e, y) & B(y))
hero :: \x.(hero(x))
hide :: \B e. exists y .(hide:1(e, y) & B(y))
high :: \P x.(P(high(x)) & P(x))
high :: \B e. exists y .(high:1(e, y) & B(y))
him :: \x.(EQUAL(x, him))
hip :: \x.(hip(x))
hiring :: \B C e. exists y z .(hiring:1(e, y) & hiring:2(e, z) & C(y) & B(z))
history :: \x.(history(x))
home :: \x.(home(x))
home :: \B e. exists y .(home:1(e, y) & B(y))
honor :: \x.(honor(x))
honorable :: \P x.(P(honorable(x)) & P(x))
honorable :: \B e. exists y .(honorable:1(e, y) & B(y))
honored :: \B C e. exists y z .(honored:1(e, y) & honored:2(e, z) & C(y) & B(z))
honored :: \B e. exists y .(honored:1(e, y) & B(y))
hope :: \x.(hope(x))
hospital :: \x.(hospital(x))
hostages :: \x.(hostages(x))
hosted :: \B C e. exists y z .(hosted:1(e, y) & hosted:2(e, z) & C(y) & B(z))
hotel :: \x.(hotel(x))
house :: \x.(house(x))
how :: \P. exists x.(TARGET(x) & P(x))
how :: \P Q x. exists e.(P(x,e) & Q(x))
how :: \B C e. exists y z .(how:1(e, y) & how:2(e, z) & C(y) & B(z))
human :: \P x.(P(human(x)) & P(x))
human :: \B e. exists y .(human:1(e, y) & B(y))
humanity :: \x.(humanity(x))
hurt :: \B e. exists y .(hurt:1(e, y) & B(y))
husband :: \x.(husband(x))
idea :: \x.(idea(x))
if :: \B C e. exists y w .(if:1(e, y) & if:2(e, w) & C(y) & B(w))
illegally :: \P e.(P(illegally(e)) & P(e))
illegally :: \B e. exists y .(illegally:1(e, y) & B(y))
immigrants :: \x.(immigrants(x))
improve :: \B C e. exists y z .(improve:1(e, y) & improve:2(e, z) & C(y) & B(z))
in :: \B C e. exists y z .(in:1(e, y) & in:2(e, z) & C(y) & B(z))
in :: \B C e. exists y w .(in:1(e, y) & in:2(e, w) & C(y) & B(w))
in :: \B e. exists y .(in:1(e, y) & B(y))
inaugurated :: \B e. exists y .(inaugurated:1(e, y) & B(y))
inaugurated :: \B C e. exists y z .(inaugurated:1(e, y) & inaugurated:2(e, z) & C(y) & B(z))
inch :: \x.(inch(x))
including :: \B C e. exists y z .(including:1(e, y) & including:2(e, z) & C(y) & B(z))
income :: \x.(income(x))
income :: \B e. exists y .(income:1(e, y) & B(y))
increase :: \B C e. exists y z .(increase:1(e, y) & increase:2(e, z) & C(y) & B(z))
increases :: \x.(increases(x))
individuals :: \x.(individuals(x))
inflation :: \x.(inflation(x))
innocent :: \P x.(P(innocent(x)) & P(x))
innocent :: \B e. exists y .(innocent:1(e, y) & B(y))
instead :: \B C e. exists y w .(instead:1(e, y) & instead:2(e, w) & C(y) & B(w))
institution :: \x.(institution(x))
intelligence :: \x.(intelligence(x))
intelligence :: \B e. exists y .(intelligence:1(e, y) & B(y))
intend :: \B C e. exists y z .(intend:1(e, y) & intend:2(e, z) & C(y) & B(z))
intentions :: \x.(intentions(x))
interesting :: \P x.(P(interesting(x)) & P(x))
interesting :: \B e. exists y .(interesting:1(e, y) & B(y))
interfere :: \B C e. exists y z .(interfere:1(e, y) & interfere:2(e, z) & C(y) & B(z))
interim :: \P x.(P(interim(x)) & P(x))
interim :: \B e. exists y .(interim:1(e, y) & B(y))
into :: \B C e. exists y z .(into:1(e, y) & into:2(e, z) & C(y) & B(z))
into :: \B C e. exists y w .(into:1(e, y) & into:2(e, w) & C(y) & B(w))
into :: \B e. exists y .(into:1(e, y) & B(y))
introduced :: \B e. exists y .(introduced:1(e, y) & B(y))
invasion :: \x.(invasion(x))
is :: \P R. exists x.(R(x) & P(x))
it :: \x.(EQUAL(x, it))
jobs :: \x.(jobs(x))
journey :: \x.(journey(x))
just :: \P e.(P(just(e)) & P(e))
just :: \B e. exists y .(just:1(e, y) & B(y))
justice :: \x.(justice(x))
justice :: \B e. exists y .(justice:1(e, y) & B(y))
keep :: \B C e. exists y z .(keep:1(e, y) & keep:2(e, z) & C(y) & B(z))
killed :: \B e. exists y .(killed:1(e, y) & B(y))
killed :: \B C e. exists y z .(killed:1(e, y) & killed:2(e, z) & C(y) & B(z))
killing :: \B C e. exists y z .(killing:1(e, y) & killing:2(e, z) & C(y) & B(z))
know :: \B C e. exists y z .(know:1(e, y) & know:2(e, z) & C(y) & B(z))
know :: \B e. exists y .(know:1(e, y) & B(y))
known :: \B C e. exists y z .(known:1(e, y) & known:2(e, z) & C(y) & B(z))
ladies :: \x.(ladies(x))
ladies :: \B e. exists y .(ladies:1(e, y) & B(y))
landslide :: \x.(landslide(x))
landslide :: \B e. exists y .(landslide:1(e, y) & B(y))
last :: \B e. exists y .(last:1(e, y) & B(y))
last :: \P x.(P(last(x)) & P(x))
late :: \P x.(P(late(x)) & P(x))
late :: \B e. exists y .(late:1(e, y) & B(y))
later :: \P e.(P(later(e)) & P(e))
later :: \B e. exists y .(later:1(e, y) & B(y))
later :: \B C e. exists y w .(later:1(e, y) & later:2(e, w) & C(y) & B(w))
later :: \B C e. exists y z .(later:1(e, y) & later:2(e, z) & C(y) & B(z))
later :: \B e. exists w .(later:1(e, w) & B(w))
launched :: \B e. exists y .(launched:1(e, y) & B(y))
law :: \x.(law(x))
lawn :: \x.(lawn(x))
lawn :: \B e. exists y .(lawn:1(e, y) & B(y))
lead :: \x.(lead(x))
lead :: \B C e. exists y z .(lead:1(e, y) & lead:2(e, z) & C(y) & B(z))
lead :: \B e. exists y .(lead:1(e, y) & B(y))
leader :: \x.(leader(x))
leaders :: \x.(leaders(x))
leaving :: \B e. exists y .(leaving:1(e, y) & B(y))
leaving :: \B C e. exists y z .(leaving:1(e, y) & leaving:2(e, z) & C(y) & B(z))
left :: \B C e. exists y z .(left:1(e, y) & left:2(e, z) & C(y) & B(z))
left :: \x.(left(x))
legacy :: \x.(legacy(x))
legal :: \P x.(P(legal(x)) & P(x))
legal :: \B e. exists y .(legal:1(e, y) & B(y))
legalization :: \x.(legalization(x))
legalization :: \B e. exists y .(legalization:1(e, y) & B(y))
legislature :: \x.(legislature(x))
letter :: \x.(letter(x))
letters :: \x.(letters(x))
liberalization :: \x.(liberalization(x))
liberty :: \x.(liberty(x))
life :: \x.(life(x))
lifeguard :: \x.(lifeguard(x))
lifelong :: \P x.(P(lifelong(x)) & P(x))
lifelong :: \B e. exists y .(lifelong:1(e, y) & B(y))
lifting :: \B C e. exists y z .(lifting:1(e, y) & lifting:2(e, z) & C(y) & B(z))
like :: \B C e. exists y z .(like:1(e, y) & like:2(e, z) & C(y) & B(z))
limousine :: \x.(limousine(x))
limousine :: \P x.(P(limousine(x)) & P(x))
limousine :: \B e. exists y .(limousine:1(e, y) & B(y))
listens :: \B C e. exists y z .(listens:1(e, y) & listens:2(e, z) & C(y) & B(z))
live :: \B C e. exists y z .(live:1(e, y) & live:2(e, z) & C(y) & B(z))
live :: \B e. exists y .(live:1(e, y) & B(y))
lived :: \B e. exists y .(lived:1(e, y) & B(y))
lived :: \B C e. exists y z .(lived:1(e, y) & lived:2(e, z) & C(y) & B(z))
lives :: \x.(lives(x))
living :: \x.(living(x))
living :: \B e. exists y .(living:1(e, y) & B(y))
loans :: \x.(loans(x))
located :: \B e. exists y .(located:1(e, y) & B(y))
lost :: \B C e. exists y z .(lost:1(e, y) & lost:2(e, z) & C(y) & B(z))
lot :: \x.(lot(x))
lowered :: \B C e. exists y z .(lowered:1(e, y) & lowered:2(e, z) & C(y) & B(z))
lunch :: \x.(lunch(x))
lung :: \x.(lung(x))
lying :: \B e. exists y .(lying:1(e, y) & B(y))
m :: \B C e. exists y z .(_m:1(e, y) & _m:2(e, z) & C(y) & B(z))
made :: \B C D e. exists y z w .(made:1(e, y) & made:2(e, z) & made:3(e, w) & D(y) & C(z) & B(w))
made :: \B C e. exists y z .(made:1(e, y) & made:2(e, z) & C(y) & B(z))
mail :: \x.(mail(x))
major :: \P x.(P(major(x)) & P(x))
major :: \B e. exists y .(major:1(e, y) & B(y))
majority :: \x.(majority(x))
make :: \B C e. exists y z .(make:1(e, y) & make:2(e, z) & C(y) & B(z))
man :: \x.(man(x))
many :: \P x.(P(many(x)) & P(x))
many :: \B e. exists y .(many:1(e, y) & B(y))
many :: \x.(many(x))
mark :: \B C e. exists y z .(mark:1(e, y) & mark:2(e, z) & C(y) & B(z))
marriage :: \x.(marriage(x))
married :: \B C e. exists y z .(married:1(e, y) & married:2(e, z) & C(y) & B(z))
massacre :: \x.(massacre(x))
massive :: \P x.(P(massive(x)) & P(x))
massive :: \B e. exists y .(massive:1(e, y) & B(y))
me :: \x.(EQUAL(x, me))
means :: \B C e. exists y z .(means:1(e, y) & means:2(e, z) & C(y) & B(z))
medals :: \x.(medals(x))
medicine :: \x.(medicine(x))
medicine :: \B e. exists y .(medicine:1(e, y) & B(y))
meeting :: \x.(meeting(x))
meetings :: \x.(meetings(x))
melanoma :: \x.(melanoma(x))
memoirs :: \x.(memoirs(x))
memorial :: \P x.(P(memorial(x)) & P(x))
memorial :: \B e. exists y .(memorial:1(e, y) & B(y))
men :: \x.(men(x))
mental :: \P x.(P(mental(x)) & P(x))
mental :: \B e. exists y .(mental:1(e, y) & B(y))
mentioning :: \B C e. exists y z .(mentioning:1(e, y) & mentioning:2(e, z) & C(y) & B(z))
military :: \x.(military(x))
military :: \P x.(P(military(x)) & P(x))
military :: \B e. exists y .(military:1(e, y) & B(y))
millions :: \x.(millions(x))
missile :: \x.(missile(x))
missile :: \B e. exists y .(missile:1(e, y) & B(y))
missiles :: \x.(missiles(x))
model :: \x.(model(x))
moment :: \x.(moment(x))
moments :: \x.(moments(x))
money :: \x.(money(x))
months :: \x.(months(x))
months :: \B e. exists y .(months:1(e, y) & B(y))
mother :: \x.(mother(x))
mother :: \B e. exists y .(mother:1(e, y) & B(y))
moved :: \B e. exists y .(moved:1(e, y) & B(y))
movements :: \x.(movements(x))
movie :: \x.(movie(x))
movie :: \B e. exists y .(movie:1(e, y) & B(y))
movies :: \x.(movies(x))
much :: \P e.(P(much(e)) & P(e))
much :: \x.(much(x))
much :: \P x.(P(much(x)) & P(x))
much :: \B e. exists y .(much:1(e, y) & B(y))
much :: \B e. exists w .(much:1(e, w) & B(w))
multiple :: \P x.(P(multiple(x)) & P(x))
multiple :: \B e. exists y .(multiple:1(e, y) & B(y))
named :: \B C e. exists y z .(named:1(e, y) & named:2(e, z) & C(y) & B(z))
names :: \x.(names(x))
nation :: \x.(nation(x))
near :: \B C e. exists y w .(near:1(e, y) & near:2(e, w) & C(y) & B(w))
near :: \B C e. exists y z .(near:1(e, y) & near:2(e, z) & C(y) & B(z))
nearby :: \P x.(P(nearby(x)) & P(x))
nearby :: \B e. exists y .(nearby:1(e, y) & B(y))
nearest :: \B e. exists y .(nearest:1(e, y) & B(y))
nearly :: \P e.(P(nearly(e)) & P(e))
nearly :: \B e. exists y .(nearly:1(e, y) & B(y))
never :: \P e.(P(never(e)) & P(e))
never :: \B e. exists y .(never:1(e, y) & B(y))
new :: \P x.(P(new(x)) & P(x))
new :: \B e. exists y .(new:1(e, y) & B(y))
news :: \x.(news(x))
news :: \B e. exists y .(news:1(e, y) & B(y))
nicked :: \B C e. exists y z .(nicked:1(e, y) & nicked:2(e, z) & C(y) & B(z))
nickname :: \x.(nickname(x))
nominated :: \B e. exists y .(nominated:1(e, y) & B(y))
nominated :: \B C e. exists y z .(nominated:1(e, y) & nominated:2(e, z) & C(y) & B(z))
nomination :: \x.(nomination(x))
nose :: \x.(nose(x))
nose :: \B e. exists y .(nose:1(e, y) & B(y))
not :: \P Q e. exists x.(NEGATION(e) & P(e,x) & Q(x))
now :: \P e.(P(now(e)) & P(e))
now :: \B e. exists y .(now:1(e, y) & B(y))
nt :: \P Q e. exists x.(NEGATION(e) & P(e,x) & Q(x))
nuclear :: \P x.(P(nuclear(x)) & P(x))
nuclear :: \B e. exists y .(nuclear:1(e, y) & B(y))
of :: \B C e. exists y z .(of:1(e, y) & of:2(e, z) & C(y) & B(z))
of :: \B e. exists y .(of:1(e, y) & B(y))
of :: \B C e. exists z w .(of:1(e, z) & of:2(e, w) & C(z) & B(w))
office :: \x.(office(x))
officer :: \x.(officer(x))
officer :: \B e. exists y .(officer:1(e, y) & B(y))
often :: \P e.(P(often(e)) & P(e))
often :: \B e. exists y .(often:1(e, y) & B(y))
old :: \P x.(P(old(x)) & P(x))
old :: \B C e. exists y z .(old:1(e, y) & old:2(e, z) & C(y) & B(z))
on :: \B C e. exists y w .(on:1(e, y) & on:2(e, w) & C(y) & B(w))
on :: \B e. exists y .(on:1(e, y) & B(y))
on :: \B C e. exists y z .(on:1(e, y) & on:2(e, z) & C(y) & B(z))
onboard :: \x.(onboard(x))
onboard :: \B e. exists y .(onboard:1(e, y) & B(y))
once :: \P e.(P(once(e)) & P(e))
once :: \B e. exists y .(once:1(e, y) & B(y))
once :: \B e. exists w .(once:1(e, w) & B(w))
one :: \x.(EQUAL(x, one))
one :: \P x.(COUNT(x, one) & P(x))
one :: \B e. exists y .(one:1(e, y) & B(y))
one :: \x.(one(x))
only :: \P x.(P(only(x)) & P(x))
only :: \B e. exists y .(only:1(e, y) & B(y))
only :: \P e.(P(only(e)) & P(e))
open :: \P x.(P(open(x)) & P(x))
open :: \B e. exists y .(open:1(e, y) & B(y))
open :: \B C e. exists y z .(open:1(e, y) & open:2(e, z) & C(y) & B(z))
opened :: \B C e. exists y z .(opened:1(e, y) & opened:2(e, z) & C(y) & B(z))
opening :: \x.(opening(x))
opening :: \B e. exists y .(opening:1(e, y) & B(y))
openness :: \x.(openness(x))
operations :: \x.(operations(x))
opinion :: \x.(opinion(x))
opinion :: \B e. exists y .(opinion:1(e, y) & B(y))
opposed :: \B C e. exists y z .(opposed:1(e, y) & opposed:2(e, z) & C(y) & B(z))
opposite :: \P x.(P(opposite(x)) & P(x))
opposite :: \B e. exists y .(opposite:1(e, y) & B(y))
optimism :: \x.(optimism(x))
or :: \P Q x.(P(x) & Q(x))
ordered :: \B C D e. exists y z w .(ordered:1(e, y) & ordered:2(e, z) & ordered:3(e, w) & D(y) & C(z) & B(w))
ordered :: \B C e. exists y z .(ordered:1(e, y) & ordered:2(e, z) & C(y) & B(z))
ordered :: \B e. exists y .(ordered:1(e, y) & B(y))
ordering :: \B C e. exists y z .(ordering:1(e, y) & ordering:2(e, z) & C(y) & B(z))
originally :: \P e.(P(originally(e)) & P(e))
originally :: \B e. exists y .(originally:1(e, y) & B(y))
other :: \P x.(P(other(x)) & P(x))
other :: \B e. exists y .(other:1(e, y) & B(y))
outside :: \B C e. exists y w .(outside:1(e, y) & outside:2(e, w) & C(y) & B(w))
over :: \B C e. exists y w .(over:1(e, y) & over:2(e, w) & C(y) & B(w))
overthrow :: \B C e. exists y z .(overthrow:1(e, y) & overthrow:2(e, z) & C(y) & B(z))
paralyzed :: \B e. exists y .(paralyzed:1(e, y) & B(y))
paralyzing :: \B C e. exists y z .(paralyzing:1(e, y) & paralyzing:2(e, z) & C(y) & B(z))
parks :: \x.(parks(x))
part :: \x.(part(x))
parties :: \x.(parties(x))
party :: \x.(party(x))
passage :: \x.(passage(x))
passenger :: \x.(passenger(x))
passenger :: \B e. exists y .(passenger:1(e, y) & B(y))
pay :: \x.(pay(x))
pay :: \B C e. exists y z .(pay:1(e, y) & pay:2(e, z) & C(y) & B(z))
peace :: \x.(peace(x))
peacefully :: \P e.(P(peacefully(e)) & P(e))
peacefully :: \B e. exists y .(peacefully:1(e, y) & B(y))
peacetime :: \x.(peacetime(x))
peacetime :: \B e. exists y .(peacetime:1(e, y) & B(y))
people :: \x.(people(x))
performed :: \B C e. exists y z .(performed:1(e, y) & performed:2(e, z) & C(y) & B(z))
person :: \x.(person(x))
personnel :: \x.(personnel(x))
persuaded :: \B C e. exists y z .(persuaded:1(e, y) & persuaded:2(e, z) & C(y) & B(z))
photo :: \x.(photo(x))
phrase :: \x.(phrase(x))
physical :: \P x.(P(physical(x)) & P(x))
physical :: \B e. exists y .(physical:1(e, y) & B(y))
place :: \B C e. exists y z .(place:1(e, y) & place:2(e, z) & C(y) & B(z))
place :: \x.(place(x))
places :: \x.(places(x))
plan :: \x.(plan(x))
plan :: \B e. exists y .(plan:1(e, y) & B(y))
plane :: \x.(plane(x))
played :: \B C e. exists y z .(played:1(e, y) & played:2(e, z) & C(y) & B(z))
pneumonia :: \x.(pneumonia(x))
policies :: \x.(policies(x))
policy :: \x.(policy(x))
political :: \P x.(P(political(x)) & P(x))
political :: \B e. exists y .(political:1(e, y) & B(y))
politician :: \x.(politician(x))
politics :: \x.(politics(x))
polls :: \x.(polls(x))
poor :: \P x.(P(poor(x)) & P(x))
poor :: \B e. exists y .(poor:1(e, y) & B(y))
poor :: \x.(poor(x))
popular :: \P x.(P(popular(x)) & P(x))
popular :: \B e. exists y .(popular:1(e, y) & B(y))
popularity :: \x.(popularity(x))
postponed :: \B C e. exists y z .(postponed:1(e, y) & postponed:2(e, z) & C(y) & B(z))
power :: \x.(power(x))
praised :: \B C D e. exists y z w .(praised:1(e, y) & praised:2(e, z) & praised:3(e, w) & D(y) & C(z) & B(w))
presented :: \B e. exists y .(presented:1(e, y) & B(y))
preserve :: \B C e. exists y z .(preserve:1(e, y) & preserve:2(e, z) & C(y) & B(z))
presidency :: \x.(presidency(x))
president :: \x.(president(x))
president :: \B e. exists y .(president:1(e, y) & B(y))
presidential :: \P x.(P(presidential(x)) & P(x))
presidential :: \B e. exists y .(presidential:1(e, y) & B(y))
presidents :: \x.(presidents(x))
presidents :: \B e. exists y .(presidents:1(e, y) & B(y))
prevent :: \B C e. exists y z .(prevent:1(e, y) & prevent:2(e, z) & C(y) & B(z))
profit :: \x.(profit(x))
program :: \x.(program(x))
programs :: \x.(programs(x))
programs :: \B e. exists y .(programs:1(e, y) & B(y))
progression :: \x.(progression(x))
proposed :: \B C e. exists y z .(proposed:1(e, y) & proposed:2(e, z) & C(y) & B(z))
prosperity :: \x.(prosperity(x))
prostate :: \x.(prostate(x))
protest :: \x.(protest(x))
provisions :: \x.(provisions(x))
public :: \P x.(P(public(x)) & P(x))
public :: \B e. exists y .(public:1(e, y) & B(y))
public :: \x.(public(x))
published :: \B e. exists y .(published:1(e, y) & B(y))
punctured :: \P x.(P(punctured(x)) & P(x))
punctured :: \B e. exists y .(punctured:1(e, y) & B(y))
quickly :: \P e.(P(quickly(e)) & P(e))
quickly :: \B e. exists y .(quickly:1(e, y) & B(y))
quiet :: \P x.(P(quiet(x)) & P(x))
quiet :: \B e. exists y .(quiet:1(e, y) & B(y))
radio :: \x.(radio(x))
radio :: \B e. exists y .(radio:1(e, y) & B(y))
raised :: \B C e. exists y z .(raised:1(e, y) & raised:2(e, z) & C(y) & B(z))
ran :: \B C e. exists y z .(ran:1(e, y) & ran:2(e, z) & C(y) & B(z))
ran :: \B e. exists y .(ran:1(e, y) & B(y))
ranch :: \x.(ranch(x))
ranked :: \B C e. exists y z .(ranked:1(e, y) & ranked:2(e, z) & C(y) & B(z))
rankings :: \x.(rankings(x))
rates :: \x.(rates(x))
reached :: \B C e. exists y z .(reached:1(e, y) & reached:2(e, z) & C(y) & B(z))
reaching :: \B C e. exists y z .(reaching:1(e, y) & reaching:2(e, z) & C(y) & B(z))
read :: \B C e. exists y z .(read:1(e, y) & read:2(e, z) & C(y) & B(z))
receive :: \B C e. exists y z .(receive:1(e, y) & receive:2(e, z) & C(y) & B(z))
received :: \B C e. exists y z .(received:1(e, y) & received:2(e, z) & C(y) & B(z))
received :: \B C D e. exists y z w .(received:1(e, y) & received:2(e, z) & received:3(e, w) & D(y) & C(z) & B(w))
recently :: \P e.(P(recently(e)) & P(e))
recently :: \B e. exists y .(recently:1(e, y) & B(y))
recognition :: \x.(recognition(x))
recognize :: \B C e. exists y z .(recognize:1(e, y) & recognize:2(e, z) & C(y) & B(z))
recorded :: \P x.(P(recorded(x)) & P(x))
recorded :: \B e. exists y .(recorded:1(e, y) & B(y))
recovered :: \B e. exists y .(recovered:1(e, y) & B(y))
recovering :: \B e. exists y .(recovering:1(e, y) & B(y))
recovery :: \x.(recovery(x))
recreate :: \B C e. exists y z .(recreate:1(e, y) & recreate:2(e, z) & C(y) & B(z))
recreating :: \B C e. exists y z .(recreating:1(e, y) & recreating:2(e, z) & C(y) & B(z))
reelected :: \B e. exists y .(reelected:1(e, y) & B(y))
reelected :: \B C e. exists y z .(reelected:1(e, y) & reelected:2(e, z) & C(y) & B(z))
reenlisted :: \B C e. exists y z .(reenlisted:1(e, y) & reenlisted:2(e, z) & C(y) & B(z))
reform :: \x.(reform(x))
regained :: \B C e. exists y z .(regained:1(e, y) & regained:2(e, z) & C(y) & B(z))
regularly :: \P e.(P(regularly(e)) & P(e))
regularly :: \B e. exists y .(regularly:1(e, y) & B(y))
regulating :: \B C e. exists y z .(regulating:1(e, y) & regulating:2(e, z) & C(y) & B(z))
rehired :: \P x.(P(rehired(x)) & P(x))
rehired :: \B e. exists y .(rehired:1(e, y) & B(y))
release :: \x.(release(x))
remainder :: \x.(remainder(x))
remained :: \B C e. exists y z .(remained:1(e, y) & remained:2(e, z) & C(y) & B(z))
remains :: \B C e. exists y z .(remains:1(e, y) & remains:2(e, z) & C(y) & B(z))
remember :: \B C e. exists y z .(remember:1(e, y) & remember:2(e, z) & C(y) & B(z))
remembers :: \x.(remembers(x))
remove :: \B C e. exists y z .(remove:1(e, y) & remove:2(e, z) & C(y) & B(z))
removed :: \B e. exists y .(removed:1(e, y) & B(y))
rendezvous :: \P x.(P(rendezvous(x)) & P(x))
renovated :: \B e. exists y .(renovated:1(e, y) & B(y))
reopened :: \B e. exists y .(reopened:1(e, y) & B(y))
repaired :: \B e. exists y .(repaired:1(e, y) & B(y))
reporting :: \B C e. exists y z .(reporting:1(e, y) & reporting:2(e, z) & C(y) & B(z))
represents :: \B C e. exists y z .(represents:1(e, y) & represents:2(e, z) & C(y) & B(z))
reputation :: \x.(reputation(x))
research :: \B C e. exists y z .(research:1(e, y) & research:2(e, z) & C(y) & B(z))
research :: \x.(research(x))
research :: \B e. exists y .(research:1(e, y) & B(y))
resigning :: \B e. exists y .(resigning:1(e, y) & B(y))
restrictions :: \x.(restrictions(x))
result :: \x.(result(x))
resulted :: \B C e. exists y z .(resulted:1(e, y) & resulted:2(e, z) & C(y) & B(z))
returned :: \B e. exists y .(returned:1(e, y) & B(y))
returned :: \B C e. exists y z .(returned:1(e, y) & returned:2(e, z) & C(y) & B(z))
returns :: \x.(returns(x))
reviews :: \x.(reviews(x))
rib :: \x.(rib(x))
rib :: \B e. exists y .(rib:1(e, y) & B(y))
rich :: \P x.(P(rich(x)) & P(x))
right :: \P x.(P(right(x)) & P(x))
right :: \B e. exists y .(right:1(e, y) & B(y))
role :: \x.(role(x))
rotunda :: \x.(rotunda(x))
run :: \x.(run(x))
run :: \B C e. exists y z .(run:1(e, y) & run:2(e, z) & C(y) & B(z))
s :: \B C e. exists y z .(_s:1(e, y) & _s:2(e, z) & C(y) & B(z))
said :: \B C e. exists y z .(said:1(e, y) & said:2(e, z) & C(y) & B(z))
same :: \P x.(P(same(x)) & P(x))
same :: \B e. exists y .(same:1(e, y) & B(y))
saved :: \B C e. exists y z .(saved:1(e, y) & saved:2(e, z) & C(y) & B(z))
saw :: \B C e. exists y z .(saw:1(e, y) & saw:2(e, z) & C(y) & B(z))
scandal :: \x.(scandal(x))
scandal :: \B e. exists y .(scandal:1(e, y) & B(y))
scandals :: \x.(scandals(x))
school :: \x.(school(x))
scores :: \x.(scores(x))
screen :: \x.(screen(x))
screen :: \B e. exists y .(screen:1(e, y) & B(y))
sea :: \x.(sea(x))
second :: \P x.(P(second(x)) & P(x))
second :: \B e. exists y .(second:1(e, y) & B(y))
security :: \x.(security(x))
see :: \B C e. exists y z .(see:1(e, y) & see:2(e, z) & C(y) & B(z))
seek :: \B C e. exists y z .(seek:1(e, y) & seek:2(e, z) & C(y) & B(z))
seem :: \B C e. exists y z .(seem:1(e, y) & seem:2(e, z) & C(y) & B(z))
seen :: \B C e. exists y z .(seen:1(e, y) & seen:2(e, z) & C(y) & B(z))
selling :: \B e. exists y .(selling:1(e, y) & B(y))
semiisolation :: \x.(semiisolation(x))
senate :: \x.(senate(x))
senile :: \P x.(P(senile(x)) & P(x))
senile :: \B e. exists y .(senile:1(e, y) & B(y))
sent :: \B C D e. exists y z w .(sent:1(e, y) & sent:2(e, z) & sent:3(e, w) & D(y) & C(z) & B(w))
sentence :: \x.(sentence(x))
sentence :: \B e. exists y .(sentence:1(e, y) & B(y))
separated :: \B e. exists y .(separated:1(e, y) & B(y))
served :: \B e. exists y .(served:1(e, y) & B(y))
served :: \B C e. exists y z .(served:1(e, y) & served:2(e, z) & C(y) & B(z))
service :: \x.(service(x))
settled :: \B e. exists y .(settled:1(e, y) & B(y))
shadows :: \x.(shadows(x))
shape :: \x.(shape(x))
she :: \x.(EQUAL(x, she))
ship :: \x.(ship(x))
shocked :: \B e. exists y .(shocked:1(e, y) & B(y))
show :: \x.(show(x))
showed :: \B e. exists y .(showed:1(e, y) & B(y))
shown :: \B e. exists y .(shown:1(e, y) & B(y))
sick :: \P x.(P(sick(x)) & P(x))
sick :: \B e. exists y .(sick:1(e, y) & B(y))
sign :: \x.(sign(x))
sign :: \B e. exists y .(sign:1(e, y) & B(y))
signed :: \B C e. exists y z .(signed:1(e, y) & signed:2(e, z) & C(y) & B(z))
signed :: \B C D e. exists y z w .(signed:1(e, y) & signed:2(e, z) & signed:3(e, w) & D(y) & C(z) & B(w))
signing :: \x.(signing(x))
since :: \B C e. exists y z .(since:1(e, y) & since:2(e, z) & C(y) & B(z))
since :: \B C e. exists y w .(since:1(e, y) & since:2(e, w) & C(y) & B(w))
singed :: \B C e. exists y z .(singed:1(e, y) & singed:2(e, z) & C(y) & B(z))
six :: \x.(EQUAL(x, six))
six :: \P x.(COUNT(x, six) & P(x))
six :: \B e. exists y .(six:1(e, y) & B(y))
skin :: \x.(skin(x))
skin :: \B e. exists y .(skin:1(e, y) & B(y))
slow :: \B C e. exists y z .(slow:1(e, y) & slow:2(e, z) & C(y) & B(z))
slowly :: \P e.(P(slowly(e)) & P(e))
slowly :: \B e. exists y .(slowly:1(e, y) & B(y))
small :: \P x.(P(small(x)) & P(x))
small :: \B e. exists y .(small:1(e, y) & B(y))
so :: \P e.(P(so(e)) & P(e))
so :: \B e. exists y .(so:1(e, y) & B(y))
socialized :: \P x.(P(socialized(x)) & P(x))
socialized :: \B e. exists y .(socialized:1(e, y) & B(y))
society :: \x.(society(x))
sometimes :: \P e.(P(sometimes(e)) & P(e))
sometimes :: \B e. exists y .(sometimes:1(e, y) & B(y))
son :: \x.(son(x))
soon :: \P e.(P(soon(e)) & P(e))
soon :: \B e. exists y .(soon:1(e, y) & B(y))
space :: \x.(space(x))
space :: \B e. exists y .(space:1(e, y) & B(y))
speaker :: \x.(speaker(x))
speaking :: \x.(speaking(x))
speaking :: \B e. exists y .(speaking:1(e, y) & B(y))
speaks :: \B C e. exists y z .(speaks:1(e, y) & speaks:2(e, z) & C(y) & B(z))
special :: \P x.(P(special(x)) & P(x))
special :: \B e. exists y .(special:1(e, y) & B(y))
speech :: \x.(speech(x))
speeches :: \x.(speeches(x))
spending :: \x.(spending(x))
spoke :: \B e. exists y .(spoke:1(e, y) & B(y))
spoke :: \B C e. exists y z .(spoke:1(e, y) & spoke:2(e, z) & C(y) & B(z))
spokesperson :: \x.(spokesperson(x))
sponsors :: \x.(sponsors(x))
sports :: \x.(sports(x))
sports :: \B e. exists y .(sports:1(e, y) & B(y))
star :: \x.(star(x))
star :: \B e. exists y .(star:1(e, y) & B(y))
starred :: \B e. exists y .(starred:1(e, y) & B(y))
starring :: \B e. exists y .(starring:1(e, y) & B(y))
start :: \x.(start(x))
start :: \B e. exists y .(start:1(e, y) & B(y))
started :: \B C e. exists y z .(started:1(e, y) & started:2(e, z) & C(y) & B(z))
state :: \x.(state(x))
state :: \B e. exists y .(state:1(e, y) & B(y))
statement :: \x.(statement(x))
states :: \x.(states(x))
station :: \x.(station(x))
station :: \B e. exists y .(station:1(e, y) & B(y))
statue :: \x.(statue(x))
stem :: \x.(stem(x))
stem :: \B e. exists y .(stem:1(e, y) & B(y))
stemcell :: \P x.(P(stemcell(x)) & P(x))
stemcell :: \B e. exists y .(stemcell:1(e, y) & B(y))
step :: \x.(step(x))
step :: \B e. exists y .(step:1(e, y) & B(y))
still :: \P e.(P(still(e)) & P(e))
still :: \B e. exists y .(still:1(e, y) & B(y))
stopped :: \B C e. exists y z .(stopped:1(e, y) & stopped:2(e, z) & C(y) & B(z))
strengthen :: \B C e. exists y z .(strengthen:1(e, y) & strengthen:2(e, z) & C(y) & B(z))
strongly :: \P e.(P(strongly(e)) & P(e))
strongly :: \B e. exists y .(strongly:1(e, y) & B(y))
stuck :: \B C e. exists y z .(stuck:1(e, y) & stuck:2(e, z) & C(y) & B(z))
student :: \x.(student(x))
student :: \B e. exists y .(student:1(e, y) & B(y))
students :: \x.(students(x))
succeeded :: \B C D e. exists y z w .(succeeded:1(e, y) & succeeded:2(e, z) & succeeded:3(e, w) & D(y) & C(z) & B(w))
success :: \x.(success(x))
successful :: \P x.(P(successful(x)) & P(x))
successful :: \B e. exists y .(successful:1(e, y) & B(y))
such :: \P x.(P(such(x)) & P(x))
such :: \B e. exists z .(such:1(e, z) & B(z))
such :: \B e. exists y .(such:1(e, y) & B(y))
suffered :: \B C e. exists y z .(suffered:1(e, y) & suffered:2(e, z) & C(y) & B(z))
sunlight :: \x.(sunlight(x))
sunset :: \x.(sunset(x))
supplyside :: \P x.(P(supplyside(x)) & P(x))
supplyside :: \B e. exists y .(supplyside:1(e, y) & B(y))
support :: \B C e. exists y z .(support:1(e, y) & support:2(e, z) & C(y) & B(z))
supported :: \B C e. exists y z .(supported:1(e, y) & supported:2(e, z) & C(y) & B(z))
supported :: \B e. exists y .(supported:1(e, y) & B(y))
supporting :: \B e. exists y .(supporting:1(e, y) & B(y))
supposed :: \B C e. exists y z .(supposed:1(e, y) & supposed:2(e, z) & C(y) & B(z))
surgery :: \x.(surgery(x))
survive :: \B C e. exists y z .(survive:1(e, y) & survive:2(e, z) & C(y) & B(z))
survived :: \B C e. exists y z .(survived:1(e, y) & survived:2(e, z) & C(y) & B(z))
sworn :: \B C e. exists y z .(sworn:1(e, y) & sworn:2(e, z) & C(y) & B(z))
symptoms :: \x.(symptoms(x))
system :: \x.(system(x))
tactical :: \P x.(P(tactical(x)) & P(x))
tactical :: \B e. exists y .(tactical:1(e, y) & B(y))
take :: \B C e. exists y z .(take:1(e, y) & take:2(e, z) & C(y) & B(z))
taken :: \B e. exists y .(taken:1(e, y) & B(y))
talks :: \x.(talks(x))
tax :: \x.(tax(x))
tax :: \B e. exists y .(tax:1(e, y) & B(y))
taxes :: \x.(taxes(x))
tear :: \B C e. exists y z .(tear:1(e, y) & tear:2(e, z) & C(y) & B(z))
televised :: \P x.(P(televised(x)) & P(x))
televised :: \B e. exists y .(televised:1(e, y) & B(y))
television :: \x.(television(x))
tell :: \B C e. exists y z .(tell:1(e, y) & tell:2(e, z) & C(y) & B(z))
ten :: \P x.(P(ten(x)) & P(x))
ten :: \B e. exists y .(ten:1(e, y) & B(y))
term :: \x.(term(x))
terrorist :: \P x.(P(terrorist(x)) & P(x))
terrorist :: \B e. exists y .(terrorist:1(e, y) & B(y))
text :: \x.(text(x))
than :: \B C e. exists y z .(than:1(e, y) & than:2(e, z) & C(y) & B(z))
thank :: \P x.(P(thank(x)) & P(x))
thank :: \B e. exists y .(thank:1(e, y) & B(y))
that :: \B C e. exists y z .(that:1(e, y) & that:2(e, z) & C(y) & B(z))
that :: \B e. exists y .(that:1(e, y) & B(y))
that :: \P. exists x.(TARGET(x) & P(x))
that :: \P Q x. exists e.(P(x,e) & Q(x))
the :: \P x.(UNIQUE(x) & P(x))
them :: \x.(EQUAL(x, them))
then :: \P e.(P(then(e)) & P(e))
then :: \B e. exists y .(then:1(e, y) & B(y))
thenPresident :: \P x.(P(thenpresident(x)) & P(x))
thenPresident :: \B e. exists y .(thenpresident:1(e, y) & B(y))
therapy :: \x.(therapy(x))
they :: \x.(EQUAL(x, they))
things :: \x.(things(x))
third :: \P x.(P(third(x)) & P(x))
third :: \B e. exists y .(third:1(e, y) & B(y))
though :: \B C e. exists y z .(though:1(e, y) & though:2(e, z) & C(y) & B(z))
thought :: \B C e. exists y z .(thought:1(e, y) & thought:2(e, z) & C(y) & B(z))
thought :: \B e. exists y .(thought:1(e, y) & B(y))
thousand :: \x.(EQUAL(x, thousand))
thousand :: \P x.(COUNT(x, thousand) & P(x))
thousand :: \B e. exists y .(thousand:1(e, y) & B(y))
threat :: \x.(threat(x))
three :: \x.(EQUAL(x, three))
three :: \P x.(COUNT(x, three) & P(x))
three :: \B e. exists y .(three:1(e, y) & B(y))
through :: \B e. exists y .(through:1(e, y) & B(y))
throughout :: \B C e. exists y w .(throughout:1(e, y) & throughout:2(e, w) & C(y) & B(w))
time :: \x.(time(x))
times :: \x.(times(x))
times :: \B e. exists y .(times:1(e, y) & B(y))
title :: \x.(title(x))
titled :: \B e. exists y .(titled:1(e, y) & B(y))
to :: \B C e. exists y w .(to:1(e, y) & to:2(e, w) & C(y) & B(w))
to :: \B C e. exists z y .(to:1(e, z) & to:2(e, y) & C(z) & B(y))
to :: \B C e. exists y z .(to:1(e, y) & to:2(e, z) & C(y) & B(z))
to :: \B e. exists y .(to:1(e, y) & B(y))
to :: \P Q x.(P(x) & Q(x))
together :: \P e.(P(together(e)) & P(e))
together :: \B e. exists y .(together:1(e, y) & B(y))
told :: \B C D e. exists y z w .(told:1(e, y) & told:2(e, z) & told:3(e, w) & D(y) & C(z) & B(w))
told :: \B C e. exists y z .(told:1(e, y) & told:2(e, z) & C(y) & B(z))
tomb :: \x.(tomb(x))
tonight :: \P e.(P(tonight(e)) & P(e))
tonight :: \B e. exists y .(tonight:1(e, y) & B(y))
tonight :: \x.(tonight(x))
too :: \P e.(P(too(e)) & P(e))
too :: \B e. exists z .(too:1(e, z) & B(z))
took :: \B C e. exists y z .(took:1(e, y) & took:2(e, z) & C(y) & B(z))
took :: \B C D e. exists y z w .(took:1(e, y) & took:2(e, z) & took:3(e, w) & D(y) & C(z) & B(w))
trade :: \B C e. exists y z .(trade:1(e, y) & trade:2(e, z) & C(y) & B(z))
tragedy :: \x.(tragedy(x))
trailer :: \x.(trailer(x))
travelled :: \B C e. exists y z .(travelled:1(e, y) & travelled:2(e, z) & C(y) & B(z))
tribute :: \x.(tribute(x))
true :: \P x.(P(true(x)) & P(x))
true :: \B e. exists y .(true:1(e, y) & B(y))
truth :: \x.(truth(x))
turned :: \B C e. exists y z .(turned:1(e, y) & turned:2(e, z) & C(y) & B(z))
twice :: \P e.(P(twice(e)) & P(e))
twice :: \B e. exists y .(twice:1(e, y) & B(y))
two :: \x.(EQUAL(x, two))
two :: \P x.(COUNT(x, two) & P(x))
two :: \B e. exists y .(two:1(e, y) & B(y))
two :: \B e. exists w .(two:1(e, w) & B(w))
two :: \B e. exists z .(two:1(e, z) & B(z))
ultimately :: \P e.(P(ultimately(e)) & P(e))
ultimately :: \B e. exists y .(ultimately:1(e, y) & B(y))
unable :: \P x.(P(unable(x)) & P(x))
unable :: \B C e. exists y z .(unable:1(e, y) & unable:2(e, z) & C(y) & B(z))
unarmed :: \P x.(P(unarmed(x)) & P(x))
unarmed :: \B e. exists y .(unarmed:1(e, y) & B(y))
unfinished :: \P x.(P(unfinished(x)) & P(x))
unfinished :: \B e. exists y .(unfinished:1(e, y) & B(y))
unmistakable :: \P x.(P(unmistakable(x)) & P(x))
unmistakable :: \B e. exists y .(unmistakable:1(e, y) & B(y))
until :: \B C e. exists y w .(until:1(e, y) & until:2(e, w) & C(y) & B(w))
until :: \B C e. exists y z .(until:1(e, y) & until:2(e, z) & C(y) & B(z))
unveiled :: \B C e. exists y z .(unveiled:1(e, y) & unveiled:2(e, z) & C(y) & B(z))
unveiled :: \B e. exists y .(unveiled:1(e, y) & B(y))
unveiling :: \x.(unveiling(x))
upcoming :: \P x.(P(upcoming(x)) & P(x))
upcoming :: \B e. exists y .(upcoming:1(e, y) & B(y))
urged :: \B C D e. exists y z w .(urged:1(e, y) & urged:2(e, z) & urged:3(e, w) & D(y) & C(z) & B(w))
use :: \x.(use(x))
use :: \B C D e. exists y z w .(use:1(e, y) & use:2(e, z) & use:3(e, w) & D(y) & C(z) & B(w))
used :: \B C e. exists y z .(used:1(e, y) & used:2(e, z) & C(y) & B(z))
version :: \x.(version(x))
very :: \P e.(P(very(e)) & P(e))
very :: \B e. exists y .(very:1(e, y) & B(y))
very :: \B e. exists w .(very:1(e, w) & B(w))
very :: \B e. exists z .(very:1(e, z) & B(z))
vetoed :: \B C e. exists y z .(vetoed:1(e, y) & vetoed:2(e, z) & C(y) & B(z))
vice :: \x.(vice(x))
vice :: \B e. exists y .(vice:1(e, y) & B(y))
vicepresident :: \x.(vicepresident(x))
victory :: \x.(victory(x))
views :: \x.(views(x))
visit :: \B C e. exists y z .(visit:1(e, y) & visit:2(e, z) & C(y) & B(z))
visited :: \B C e. exists y z .(visited:1(e, y) & visited:2(e, z) & C(y) & B(z))
visitors :: \x.(visitors(x))
vote :: \x.(vote(x))
voted :: \B C D e. exists y z w .(voted:1(e, y) & voted:2(e, z) & voted:3(e, w) & D(y) & C(z) & B(w))
voter :: \x.(voter(x))
votes :: \x.(votes(x))
walking :: \x.(walking(x))
wall :: \x.(wall(x))
want :: \B C D e. exists y z w .(want:1(e, y) & want:2(e, z) & want:3(e, w) & D(y) & C(z) & B(w))
wanted :: \B C e. exists y z .(wanted:1(e, y) & wanted:2(e, z) & C(y) & B(z))
war :: \x.(war(x))
was :: \P R. exists x.(R(x) & P(x))
watched :: \B C e. exists y z .(watched:1(e, y) & watched:2(e, z) & C(y) & B(z))
waving :: \B C e. exists y z .(waving:1(e, y) & waving:2(e, z) & C(y) & B(z))
we :: \x.(EQUAL(x, we))
weapons :: \x.(weapons(x))
wearing :: \B C e. exists y z .(wearing:1(e, y) & wearing:2(e, z) & C(y) & B(z))
week :: \x.(week(x))
welcome :: \B C e. exists y z .(welcome:1(e, y) & welcome:2(e, z) & C(y) & B(z))
welfare :: \x.(welfare(x))
welfare :: \B e. exists y .(welfare:1(e, y) & B(y))
well :: \P e.(P(well(e)) & P(e))
well :: \B e. exists y .(well:1(e, y) & B(y))
went :: \B e. exists y .(went:1(e, y) & B(y))
went :: \B C e. exists y z .(went:1(e, y) & went:2(e, z) & C(y) & B(z))
were :: \P R. exists x.(R(x) & P(x))
what :: \P. exists x.(TARGET(x) & P(x))
what :: \P Q x. exists e.(P(x,e) & Q(x))
what :: \B e. exists y .(what:1(e, y) & B(y))
when :: \P. exists x.(TARGET(x) & P(x))
when :: \P Q x. exists e.(P(x,e) & Q(x))
when :: \B C e. exists y w .(when:1(e, y) & when:2(e, w) & C(y) & B(w))
when :: \B C e. exists y z .(when:1(e, y) & when:2(e, z) & C(y) & B(z))
where :: \P. exists x.(TARGET(x) & P(x))
where :: \P Q x. exists e.(P(x,e) & Q(x))
where :: \B e. exists y .(where:1(e, y) & B(y))
which :: \P. exists x.(TARGET(x) & P(x))
which :: \P Q x. exists e.(P(x,e) & Q(x))
which :: \B C e. exists y z .(which:1(e, y) & which:2(e, z) & C(y) & B(z))
while :: \B C e. exists y z .(while:1(e, y) & while:2(e, z) & C(y) & B(z))
who :: \P. exists x.(TARGET(x) & P(x))
who :: \P Q x. exists e.(P(x,e) & Q(x))
who :: \B C e. exists y z .(who:1(e, y) & who:2(e, z) & C(y) & B(z))
who :: \B C e. exists y w .(who:1(e, y) & who:2(e, w) & C(y) & B(w))
whom :: \P. exists x.(TARGET(x) & P(x))
whom :: \P Q x. exists e.(P(x,e) & Q(x))
whom :: \B C e. exists y z .(whom:1(e, y) & whom:2(e, z) & C(y) & B(z))
wife :: \x.(wife(x))
win :: \B C e. exists y z .(win:1(e, y) & win:2(e, z) & C(y) & B(z))
winning :: \B C e. exists y z .(winning:1(e, y) & winning:2(e, z) & C(y) & B(z))
with :: \B e. exists y .(with:1(e, y) & B(y))
with :: \B C e. exists y z .(with:1(e, y) & with:2(e, z) & C(y) & B(z))
with :: \B C e. exists y w .(with:1(e, y) & with:2(e, w) & C(y) & B(w))
with :: \B C D e. exists y w u .(with:1(e, y) & with:2(e, w) & with:3(e, u) & D(y) & C(w) & B(u))
without :: \B C e. exists y w .(without:1(e, y) & without:2(e, w) & C(y) & B(w))
women :: \x.(women(x))
won :: \B C e. exists y z .(won:1(e, y) & won:2(e, z) & C(y) & B(z))
work :: \x.(work(x))
worked :: \B C e. exists y z .(worked:1(e, y) & worked:2(e, z) & C(y) & B(z))
workers :: \x.(workers(x))
workforce :: \x.(workforce(x))
world :: \x.(world(x))
world :: \B e. exists y .(world:1(e, y) & B(y))
writing :: \x.(writing(x))
wrote :: \B C e. exists y z .(wrote:1(e, y) & wrote:2(e, z) & C(y) & B(z))
year :: \x.(year(x))
year :: \B e. exists y .(year:1(e, y) & B(y))
years :: \x.(years(x))
you :: \x.(EQUAL(x, you))
– :: \x.(_–(x))
# CATEGORIES
N :: \x.(EQUAL(x, {0}))
N :: \x.({0}(x))
N :: \P x.(P({0}(x)) & P(x))
N :: \P. exists x.(TARGET(x) & P(x))
N :: \P Q x. exists e.(P(x,e) & Q(x))
N :: \P x.(COUNT(x, {0}) & P(x))
N :: \B e. exists y .({0}:1(e, y) & B(y))
N :: \P e.(P({0}(e)) & P(e))
NP :: \x.(EQUAL(x, {0}))
S/S :: \P e.(P({0}(e)) & P(e))
S/S :: \B e. exists y .({0}:1(e, y) & B(y))
S/S :: \P. exists x.(TARGET(x) & P(x))
S/S :: \P Q x. exists e.(P(x,e) & Q(x))
S/S :: \P Q x.(P(x) & Q(x))
N/N :: \x.(EQUAL(x, {0}))
N/N :: \P x.(COUNT(x, {0}) & P(x))
N/N :: \B e. exists y .({0}:1(e, y) & B(y))
N/N :: \P x.(P({0}(x)) & P(x))
N/N :: \x.({0}(x))
N/N :: \P e.(P({0}(e)) & P(e))
N/S :: \x.({0}(x))
N/S :: \B e. exists y .({0}:1(e, y) & B(y))
N\N :: \x.(EQUAL(x, {0}))
N\N :: \P x.(COUNT(x, {0}) & P(x))
N\N :: \B e. exists y .({0}:1(e, y) & B(y))
NP/N :: \P x.(UNIQUE(x) & P(x))
NP/N :: None
conj :: \P Q x.(P(x) & Q(x))
S\NP :: \P x.(P({0}(x)) & P(x))
S\NP :: \B e. exists y .({0}:1(e, y) & B(y))
S\NP :: \P R. exists x.(R(x) & P(x))
S\NP :: \P e.(P({0}(e)) & P(e))
NP\NP :: \x.({0}(x))
NP\NP :: \B e. exists y .({0}:1(e, y) & B(y))
NP\NP :: \P e.(P({0}(e)) & P(e))
NP\NP :: \x.(EQUAL(x, {0}))
NP\NP :: \P x.(COUNT(x, {0}) & P(x))
NP/NP :: \P x.(P({0}(x)) & P(x))
NP/NP :: \B e. exists y .({0}:1(e, y) & B(y))
NP/NP :: \P e.(P({0}(e)) & P(e))
PP/NP :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
PP/NP :: \B e. exists y .({0}:1(e, y) & B(y))
PP/NP :: \B C e. exists z y .({0}:1(e, z) & {0}:2(e, y) & C(z) & B(y))
(S/S)/S :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S/S)/S :: \P. exists x.(TARGET(x) & P(x))
(S/S)/S :: \P Q x. exists e.(P(x,e) & Q(x))
(N\N)/N :: \P Q x.(P(x) & Q(x))
(N\N)/N :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S\NP)/S :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S\NP)/S :: \P R. exists x.(R(x) & P(x))
(S/S)/NP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S/S)\NP :: \P e.(P({0}(e)) & P(e))
(S/S)\NP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S/S)/PP :: \P e.(P({0}(e)) & P(e))
(S/S)/PP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S\NP)/PP :: \P x.(P({0}(x)) & P(x))
(S\NP)/PP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S\NP)/PP :: \P R. exists x.(R(x) & P(x))
(S\NP)/PP :: \B e. exists y .({0}:1(e, y) & B(y))
(S\NP)\NP :: \P x.(P({0}(x)) & P(x))
(S\NP)\NP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
NP/(S/NP) :: \P. exists x.(TARGET(x) & P(x))
NP/(S/NP) :: \P Q x. exists e.(P(x,e) & Q(x))
NP/(S/NP) :: \B e. exists y .({0}:1(e, y) & B(y))
(NP\NP)/S :: \P. exists x.(TARGET(x) & P(x))
(NP\NP)/S :: \P Q x. exists e.(P(x,e) & Q(x))
(NP\NP)/S :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S\NP)/NP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S\NP)/NP :: \P R. exists x.(R(x) & P(x))
(S\NP)/NP :: \B e. exists y .({0}:1(e, y) & B(y))
(S\NP)/NP :: \P x.(P({0}(x)) & P(x))
PP/(S\NP) :: \B e. exists y .({0}:1(e, y) & B(y))
(NP\NP)/N :: \x.(EQUAL(x, {0}))
(NP\NP)/N :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(NP/N)\NP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(NP\NP)/NP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(NP\NP)/NP :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
(NP\NP)/NP :: \B e. exists y .({0}:1(e, y) & B(y))
(NP\NP)/NP :: \B C e. exists z w .({0}:1(e, z) & {0}:2(e, w) & C(z) & B(w))
(NP\NP)/NP :: \B C e. exists z y .({0}:1(e, z) & {0}:2(e, y) & C(z) & B(y))
(S/S)/(S/S) :: \P e.(P({0}(e)) & P(e))
(S/S)/(S/S) :: \B e. exists z .({0}:1(e, z) & B(z))
(N/N)/(N/N) :: \P e.(P({0}(e)) & P(e))
(N/N)/(N/N) :: \B e. exists z .({0}:1(e, z) & B(z))
(S/S)/(S\NP) :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
((S/S)/PP)/NP :: \B C D e. exists y z w .({0}:1(e, y) & {0}:2(e, z) & {0}:3(e, w) & D(y) & C(z) & B(w))
(S\NP)\(S\NP) :: \P e.(P({0}(e)) & P(e))
(S\NP)\(S\NP) :: \B e. exists y .({0}:1(e, y) & B(y))
(S\NP)\(S\NP) :: \x.({0}(x))
(S\NP)\(S\NP) :: \P Q e. exists x.(NEGATION(e) & P(e,x) & Q(x))
(S\NP)\(S\NP) :: \P x.(P({0}(x)) & P(x))
(S\NP)\(S\NP) :: \x.(EQUAL(x, {0}))
(S\NP)/(S\NP) :: \P e.(P({0}(e)) & P(e))
(S\NP)/(S\NP) :: \B e. exists y .({0}:1(e, y) & B(y))
(S\NP)/(S\NP) :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(S\NP)/(S\NP) :: \P x.(P({0}(x)) & P(x))
(S\NP)/(S\NP) :: \P R. exists x.(R(x) & P(x))
(S\NP)/(S\NP) :: \P Q e. exists x.(NEGATION(e) & P(e,x) & Q(x))
(S\NP)/(S\NP) :: \B C e. exists z y .({0}:1(e, z) & {0}:2(e, y) & C(z) & B(y))
(S\NP)/(S\NP) :: \x.(EQUAL(x, {0}))
((S\NP)/S)/NP :: \B C D e. exists y z w .({0}:1(e, y) & {0}:2(e, z) & {0}:3(e, w) & D(y) & C(z) & B(w))
((S\NP)/S)/NP :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
((S\NP)/NP)/NP :: \B C D e. exists y z w .({0}:1(e, y) & {0}:2(e, z) & {0}:3(e, w) & D(y) & C(z) & B(w))
(NP\NP)/(S/NP) :: \P. exists x.(TARGET(x) & P(x))
(NP\NP)/(S/NP) :: \P Q x. exists e.(P(x,e) & Q(x))
(NP\NP)/(S/NP) :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
((S\NP)/PP)/NP :: \B C D e. exists y z w .({0}:1(e, y) & {0}:2(e, z) & {0}:3(e, w) & D(y) & C(z) & B(w))
((S\NP)/PP)/NP :: \B e. exists y .({0}:1(e, y) & B(y))
(NP\NP)/(S\NP) :: \B C e. exists y z .({0}:1(e, y) & {0}:2(e, z) & C(y) & B(z))
(NP\NP)/(S\NP) :: \P. exists x.(TARGET(x) & P(x))
(NP\NP)/(S\NP) :: \P Q x. exists e.(P(x,e) & Q(x))
(NP\NP)/(NP\NP) :: \P x.(P({0}(x)) & P(x))
(NP\NP)/(NP\NP) :: \B e. exists z .({0}:1(e, z) & B(z))
(NP\NP)/(NP\NP) :: \x.(EQUAL(x, {0}))
(NP\NP)/(NP\NP) :: \P x.(COUNT(x, {0}) & P(x))
(NP\NP)\(NP\NP) :: \x.(EQUAL(x, {0}))
(NP\NP)\(NP\NP) :: \P x.(COUNT(x, {0}) & P(x))
(NP\NP)\(NP\NP) :: \B e. exists z .({0}:1(e, z) & B(z))
((N/N)\(N/N))/NP :: \B C e. exists z w .({0}:1(e, z) & {0}:2(e, w) & C(z) & B(w))
((S\NP)\(S\NP))/S :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
((S\NP)\(S\NP))/S :: \P. exists x.(TARGET(x) & P(x))
((S\NP)\(S\NP))/S :: \P Q x. exists e.(P(x,e) & Q(x))
((S\NP)\(S\NP))/N :: \P x.(UNIQUE(x) & P(x))
((S\NP)\(S\NP))/N :: \x.(EQUAL(x, {0}))
((S\NP)\(S\NP))/N :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
((S\NP)/(S\NP))/S :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
((S\NP)/(S\NP))/NP :: \B C D e. exists y z w .({0}:1(e, y) & {0}:2(e, z) & {0}:3(e, w) & D(y) & C(z) & B(w))
((S\NP)/(S\NP))/NP :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
((S\NP)\(S\NP))/PP :: \P e.(P({0}(e)) & P(e))
((S\NP)\(S\NP))/PP :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
((S\NP)\(S\NP))/NP :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
((S\NP)\(S\NP))/NP :: \B C e. exists z y .({0}:1(e, z) & {0}:2(e, y) & C(z) & B(y))
((S\NP)\(S\NP))/NP :: \P x.(P({0}(x)) & P(x))
((S\NP)\(S\NP))/(S/NP) :: \P. exists x.(TARGET(x) & P(x))
((S\NP)\(S\NP))/(S/NP) :: \P Q x. exists e.(P(x,e) & Q(x))
((S\NP)\(S\NP))/(S/NP) :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
((S\NP)\(S\NP))/(S\NP) :: \B C e. exists y w .({0}:1(e, y) & {0}:2(e, w) & C(y) & B(w))
(((S\NP)\(S\NP))/(S\NP))/NP :: \B C D e. exists y w u .({0}:1(e, y) & {0}:2(e, w) & {0}:3(e, u) & D(y) & C(w) & B(u))
((S\NP)/(S\NP))/((S\NP)/(S\NP)) :: \P e.(P({0}(e)) & P(e))
((S\NP)/(S\NP))/((S\NP)/(S\NP)) :: \B e. exists w .({0}:1(e, w) & B(w))
((S\NP)\(S\NP))/((S\NP)\(S\NP)) :: \P e.(P({0}(e)) & P(e))
((S\NP)\(S\NP))/((S\NP)\(S\NP)) :: \B e. exists w .({0}:1(e, w) & B(w))
((S\NP)\(S\NP))/((S\NP)\(S\NP)) :: \x.(EQUAL(x, {0}))
((S\NP)\(S\NP))/((S\NP)\(S\NP)) :: \P x.(COUNT(x, {0}) & P(x))
(((S\NP)\(S\NP))/((S\NP)\(S\NP)))/NP :: \B C e. exists w v .({0}:1(e, w) & {0}:2(e, v) & C(w) & B(v))
