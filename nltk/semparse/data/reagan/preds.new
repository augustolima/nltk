# WORDS
007 :: \P \y. (P(y) & COUNT(y, 007))
100 :: \P \y. (P(y) & COUNT(y, 100))
13 :: \P \y. (P(y) & COUNT(y, 13))
14 :: \P \y. (P(y) & COUNT(y, 14))
1911 :: \P \y. (P(y) & COUNT(y, 1911))
1937 :: \P \y. (P(y) & COUNT(y, 1937))
1940s :: \x.(1940s(x))
1964 :: \P \y. (P(y) & COUNT(y, 1964))
1965 :: \P \y. (P(y) & COUNT(y, 1965))
1982 :: \P \y. (P(y) & COUNT(y, 1982))
1985 :: \P \y. (P(y) & COUNT(y, 1985))
1986 :: \P \y. (P(y) & COUNT(y, 1986))
1991 :: \P \y. (P(y) & COUNT(y, 1991))
1st :: \P \y. (P(y) & COUNT(y, 1st))
2 :: \P \y. (P(y) & COUNT(y, _2))
20 :: \P \y. (P(y) & COUNT(y, 20))
2001 :: \P \y. (P(y) & COUNT(y, 2001))
2004 :: \Q \P \y. (Q(y) & P & COUNT(y, 2004))
2011 :: \P \y. (P(y) & COUNT(y, 2011))
21 :: \P \y. (P(y) & COUNT(y, 21))
25 :: \P \y. (P(y) & COUNT(y, 25))
269 :: \P \y. (P(y) & COUNT(y, 269))
3rd :: \P \y. (P(y) & 3rd(y))
4 :: \P \y. (P(y) & COUNT(y, _4))
50 :: \P \y. (P(y) & COUNT(y, 50))
53 :: \P \y. (P(y) & COUNT(y, 53))
6 :: \P \y. (P(y) & COUNT(y, _6))
77 :: \P \y. (P(y) & COUNT(y, 77))
78 :: \P \y. (P(y) & COUNT(y, 78))
89 :: \P \y. (P(y) & COUNT(y, 89))
93 :: \P \y. (P(y) & COUNT(y, 93))
Act :: \x.(EQUAL(x, act))
Actors :: \x.(EQUAL(x, actors))
Adams :: \x.(EQUAL(x, adams))
Address :: \x.(EQUAL(x, address))
Affair :: \x.(EQUAL(x, affair))
Afghanistan :: \x.(EQUAL(x, afghanistan))
After :: \Q \P \y. exists z .(Q(y) & P(z) & after:1(y, z))
After :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & after:1(y, w) & after:2(y, z))
Afterwards :: \P \y. (P(y) & afterwards(y))
Agent :: \x.(EQUAL(x, agent))
Air :: \x.(EQUAL(x, air))
Also :: \P \y. (P(y) & also(y))
Although :: \Q \P \y. exists z .(Q(y) & P(z) & although:1(y, z))
Alzheimer :: \x.(EQUAL(x, alzheimer))
America :: \x.(EQUAL(x, america))
American :: \P \y. (P(y) & american(y))
American :: \x.(EQUAL(x, american))
Americans :: \x.(EQUAL(x, americans))
Angeles :: \x.(EQUAL(x, angeles))
Army :: \x.(EQUAL(x, army))
As :: \Q \P \y. exists z .(Q(y) & P(z) & as:1(y, z))
Association :: \x.(EQUAL(x, association))
At :: \Q \P \y. exists z .(Q(y) & P(z) & at:1(y, z))
Audio :: \x.(EQUAL(x, audio))
August :: \x.(EQUAL(x, august))
Award :: \x.(EQUAL(x, award))
B :: \x.(EQUAL(x, _b))
Barack :: \x.(EQUAL(x, barack))
Barbara :: \x.(EQUAL(x, barbara))
Baroness :: \x.(EQUAL(x, baroness))
Barry :: \x.(EQUAL(x, barry))
Bath :: \x.(bath(x))
Before :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & before:1(y, w) & before:2(y, z))
Before :: \Q \P \R \y. exists z w .(Q(z) & P(w) & R(y) & before:1(y, w) & before:2(y, z))
Bel :: \x.(EQUAL(x, bel))
Berlin :: \x.(EQUAL(x, berlin))
Berlusconi :: \x.(EQUAL(x, berlusconi))
Best :: \x.(EQUAL(x, best))
Bette :: \x.(EQUAL(x, bette))
Betty :: \x.(EQUAL(x, betty))
Bible :: \x.(EQUAL(x, bible))
Bill :: \x.(EQUAL(x, bill))
Billy :: \x.(EQUAL(x, billy))
Bird :: \x.(EQUAL(x, bird))
Blair :: \x.(EQUAL(x, blair))
Board :: \x.(EQUAL(x, board))
Bogart :: \x.(EQUAL(x, bogart))
Bosley :: \x.(EQUAL(x, bosley))
Brady :: \x.(EQUAL(x, brady))
Brandenburg :: \x.(EQUAL(x, brandenburg))
Brian :: \x.(EQUAL(x, brian))
British :: \x.(EQUAL(x, british))
British :: \P \y. (P(y) & british(y))
Brooklyn :: \x.(EQUAL(x, brooklyn))
Brooks :: \x.(EQUAL(x, brooks))
Brown :: \x.(EQUAL(x, brown))
Bush :: \x.(EQUAL(x, bush))
But :: \P Q x.(P(x) & Q(x))
CBS :: \x.(EQUAL(x, cbs))
CEO :: \x.(EQUAL(x, ceo))
CNN :: \x.(EQUAL(x, cnn))
CV64 :: \x.(EQUAL(x, cv64))
CVN76 :: \x.(EQUAL(x, cvn76))
California :: \x.(EQUAL(x, california))
Canadian :: \x.(EQUAL(x, canadian))
Capitol :: \x.(EQUAL(x, capitol))
Captain :: \x.(EQUAL(x, captain))
Carter :: \x.(EQUAL(x, carter))
Cathedral :: \x.(EQUAL(x, cathedral))
Catholic :: \x.(EQUAL(x, catholic))
Centennial :: \x.(EQUAL(x, centennial))
Century :: \x.(EQUAL(x, century))
Challenger :: \x.(EQUAL(x, challenger))
Chancellor :: \x.(EQUAL(x, chancellor))
Chicago :: \x.(EQUAL(x, chicago))
Cielo :: \x.(EQUAL(x, cielo))
City :: \x.(EQUAL(x, city))
Civilian :: \x.(EQUAL(x, civilian))
Clinton :: \x.(EQUAL(x, clinton))
Coin :: \x.(EQUAL(x, coin))
Cold :: \x.(EQUAL(x, cold))
Collection :: \x.(EQUAL(x, collection))
College :: \x.(EQUAL(x, college))
Commission :: \x.(EQUAL(x, commission))
Communicator :: \x.(EQUAL(x, communicator))
Communist :: \P \y. (P(y) & communist(y))
Condoleezza :: \x.(EQUAL(x, condoleezza))
Congress :: \x.(EQUAL(x, congress))
Congressional :: \x.(EQUAL(x, congressional))
Constellation :: \x.(EQUAL(x, constellation))
Contras :: \x.(EQUAL(x, contras))
Control :: \x.(EQUAL(x, control))
Convention :: \x.(EQUAL(x, convention))
Court :: \x.(EQUAL(x, court))
Cowboy :: \x.(cowboy(x))
Craig :: \x.(EQUAL(x, craig))
Crowther :: \x.(EQUAL(x, crowther))
Cubs :: \x.(EQUAL(x, cubs))
D :: \x.(EQUAL(x, _d))
DC :: \x.(EQUAL(x, dc))
Dark :: \x.(EQUAL(x, dark))
Davis :: \x.(EQUAL(x, davis))
Day :: \x.(EQUAL(x, day))
Deal :: \x.(EQUAL(x, deal))
Defense :: \x.(EQUAL(x, defense))
Delahanty :: \x.(EQUAL(x, delahanty))
Democrat :: \x.(EQUAL(x, democrat))
Democratic :: \P \y. (P(y) & democratic(y))
Democratic :: \x.(EQUAL(x, democratic))
Democrats :: \x.(EQUAL(x, democrats))
Dennis :: \x.(EQUAL(x, dennis))
Despite :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & despite:1(y, w) & despite:2(y, z))
Diaries :: \x.(EQUAL(x, diaries))
Directors :: \x.(directors(x))
Disease :: \x.(disease(x))
Dixon :: \x.(EQUAL(x, dixon))
Douglas :: \x.(EQUAL(x, douglas))
Drugs :: \x.(EQUAL(x, drugs))
During :: \Q \P \y. exists z .(Q(y) & P(z) & during:1(y, z))
Dwight :: \x.(EQUAL(x, dwight))
Eagle :: \x.(EQUAL(x, eagle))
Early :: \Q \P \y. exists z .(Q(y) & P(z) & early(y))
Eisenhower :: \x.(EQUAL(x, eisenhower))
Electric :: \x.(EQUAL(x, electric))
Elizabeth :: \x.(EQUAL(x, elizabeth))
Embassy :: \x.(EQUAL(x, embassy))
English :: \x.(EQUAL(x, english))
Era :: \x.(era(x))
Errol :: \x.(EQUAL(x, errol))
Eureka :: \x.(EQUAL(x, eureka))
Europe :: \x.(EQUAL(x, europe))
Evangelicals :: \x.(EQUAL(x, evangelicals))
Even :: \Q \P \y. (Q(y) & P & even(y))
Evil :: \x.(EQUAL(x, evil))
FBI :: \x.(EQUAL(x, fbi))
Fame :: \x.(EQUAL(x, fame))
Fe :: \x.(EQUAL(x, fe))
February :: \x.(EQUAL(x, february))
First :: \x.(EQUAL(x, first))
Flight :: \x.(EQUAL(x, flight))
Florida :: \x.(EQUAL(x, florida))
Flynn :: \x.(EQUAL(x, flynn))
Following :: \Q \P \y. exists z .(Q(y) & P(z) & following:1(y, z))
For :: \Q \P \y. exists z .(Q(y) & P(z) & for:1(y, z))
Forces :: \x.(EQUAL(x, forces))
Ford :: \x.(EQUAL(x, ford))
Foreign :: \P \y. (P(y) & foreign(y))
Former :: \x.(EQUAL(x, former))
Foundation :: \x.(EQUAL(x, foundation))
Francisco :: \x.(EQUAL(x, francisco))
Franklin :: \x.(EQUAL(x, franklin))
Freedom :: \x.(EQUAL(x, freedom))
Frick :: \x.(EQUAL(x, frick))
From :: \Q \P \y. exists z .(Q(y) & P(z) & from:1(y, z))
GPS :: \x.(EQUAL(x, gps))
Gahagan :: \x.(EQUAL(x, gahagan))
Galesburg :: \x.(EQUAL(x, galesburg))
Gate :: \x.(EQUAL(x, gate))
General :: \x.(EQUAL(x, general))
George :: \x.(EQUAL(x, george))
Gerald :: \x.(EQUAL(x, gerald))
Gerhard :: \x.(EQUAL(x, gerhard))
German :: \x.(EQUAL(x, german))
Ghazi :: \x.(EQUAL(x, ghazi))
Gipp :: \x.(EQUAL(x, gipp))
Gipper :: \x.(EQUAL(x, gipper))
God :: \x.(EQUAL(x, god))
Gold :: \x.(EQUAL(x, gold))
Goldwater :: \x.(EQUAL(x, goldwater))
Goodwin :: \x.(EQUAL(x, goodwin))
Gorbachev :: \x.(EQUAL(x, gorbachev))
Governor :: \x.(EQUAL(x, governor))
Governors :: \x.(EQUAL(x, governors))
Graham :: \x.(EQUAL(x, graham))
Great :: \x.(EQUAL(x, great))
Grenada :: \x.(EQUAL(x, grenada))
Grosvenor :: \x.(EQUAL(x, grosvenor))
Guild :: \x.(EQUAL(x, guild))
H :: \x.(EQUAL(x, _h))
Hall :: \x.(EQUAL(x, hall))
Hamid :: \Q \P \e. exists y z .(Q(y) & P(z) & hamid(e))
He :: \x.(EQUAL(x, he))
Helen :: \x.(EQUAL(x, helen))
Herbert :: \x.(EQUAL(x, herbert))
Hilton :: \x.(EQUAL(x, hilton))
Hinckley :: \x.(EQUAL(x, hinckley))
His :: \x.(EQUAL(x, his))
Hollywood :: \x.(EQUAL(x, hollywood))
Honorary :: \x.(EQUAL(x, honorary))
Hoover :: \x.(EQUAL(x, hoover))
Hospital :: \x.(EQUAL(x, hospital))
Hotel :: \x.(EQUAL(x, hotel))
House :: \x.(EQUAL(x, house))
Humphrey :: \x.(EQUAL(x, humphrey))
I :: \x.(EQUAL(x, _i))
II :: \x.(EQUAL(x, ii))
INF :: \x.(EQUAL(x, inf))
Iceland :: \x.(EQUAL(x, iceland))
Illinois :: \x.(EQUAL(x, illinois))
Immigration :: \x.(EQUAL(x, immigration))
In :: \Q \P \y. exists z .(Q(y) & P(z) & in:1(y, z))
Inaugural :: \x.(EQUAL(x, inaugural))
Independence :: \x.(EQUAL(x, independence))
Initiative :: \x.(EQUAL(x, initiative))
Institute :: \x.(EQUAL(x, institute))
IntermediateRange :: \x.(EQUAL(x, intermediaterange))
Investigative :: \x.(EQUAL(x, investigative))
Iran :: \x.(EQUAL(x, iran))
IranContra :: \x.(EQUAL(x, irancontra))
Iran–Contra :: \x.(EQUAL(x, iran–contra))
Iraq :: \x.(EQUAL(x, iraq))
Irish :: \P \y. (P(y) & irish(y))
Is :: \Q \P \e. exists y z .(Q(y) & P(z) & is:1(e, z) & is:2(e, y))
It :: \x.(EQUAL(x, it))
Italian :: \x.(EQUAL(x, italian))
Jack :: \x.(EQUAL(x, jack))
James :: \x.(EQUAL(x, james))
Jane :: \x.(EQUAL(x, jane))
January :: \x.(EQUAL(x, january))
Jerry :: \x.(EQUAL(x, jerry))
Jimmy :: \x.(EQUAL(x, jimmy))
John :: \x.(EQUAL(x, john))
Johnson :: \x.(EQUAL(x, johnson))
July :: \x.(EQUAL(x, july))
June :: \x.(EQUAL(x, june))
Kaczyński :: \x.(EQUAL(x, kaczyński))
Karzai :: \x.(EQUAL(x, karzai))
Killers :: \x.(EQUAL(x, killers))
King :: \x.(EQUAL(x, king))
Kingdom :: \x.(EQUAL(x, kingdom))
Kings :: \x.(EQUAL(x, kings))
Kings :: \x.(kings(x))
Knighthood :: \x.(EQUAL(x, knighthood))
Knute :: \x.(EQUAL(x, knute))
Korean :: \x.(EQUAL(x, korean))
Korean :: \P \y. (P(y) & korean(y))
Lady :: \x.(EQUAL(x, lady))
Larry :: \x.(EQUAL(x, larry))
Laura :: \x.(EQUAL(x, laura))
Lech :: \x.(EQUAL(x, lech))
Lesley :: \x.(EQUAL(x, lesley))
Liberty :: \x.(EQUAL(x, liberty))
Library :: \x.(EQUAL(x, library))
Libya :: \x.(EQUAL(x, libya))
Life :: \x.(EQUAL(x, life))
Lines :: \x.(EQUAL(x, lines))
London :: \x.(EQUAL(x, london))
Los :: \x.(EQUAL(x, los))
Love :: \x.(love(x))
Lyndon :: \x.(EQUAL(x, lyndon))
Many :: \P \y. (P(y) & many(y))
March :: \x.(EQUAL(x, march))
Margaret :: \x.(EQUAL(x, margaret))
Maureen :: \x.(EQUAL(x, maureen))
May :: \x.(EQUAL(x, may))
McCarthy :: \x.(EQUAL(x, mccarthy))
Medal :: \x.(EQUAL(x, medal))
Meritorious :: \x.(EQUAL(x, meritorious))
Michael :: \x.(EQUAL(x, michael))
Mikhail :: \x.(EQUAL(x, mikhail))
Minister :: \x.(EQUAL(x, minister))
Minneapolis :: \x.(EQUAL(x, minneapolis))
Minnesota :: \x.(EQUAL(x, minnesota))
Mondale :: \x.(EQUAL(x, mondale))
Monday :: \x.(EQUAL(x, monday))
Monmouth :: \x.(EQUAL(x, monmouth))
Months :: \x.(months(x))
Motion :: \x.(EQUAL(x, motion))
Mr :: \x.(EQUAL(x, mr))
Mrs :: \x.(EQUAL(x, mrs))
Mulroney :: \x.(EQUAL(x, mulroney))
My :: \x.(EQUAL(x, my))
NIS :: \x.(EQUAL(x, nis))
Nancy :: \x.(EQUAL(x, nancy))
National :: \x.(EQUAL(x, national))
Naval :: \x.(EQUAL(x, naval))
Navy :: \x.(EQUAL(x, navy))
Neil :: \x.(EQUAL(x, neil))
Nelle :: \x.(EQUAL(x, nelle))
New :: \x.(EQUAL(x, new))
Nicaraguan :: \P \y. (P(y) & nicaraguan(y))
Nixon :: \x.(EQUAL(x, nixon))
November :: \x.(EQUAL(x, november))
Nuclear :: \x.(EQUAL(x, nuclear))
OConnor :: \x.(EQUAL(x, oconnor))
Obama :: \x.(EQUAL(x, obama))
October :: \x.(EQUAL(x, october))
Office :: \x.(EQUAL(x, office))
On :: \Q \P \y. exists z .(Q(y) & P(z) & on:1(y, z))
Order :: \x.(order(x))
Orlando :: \x.(EQUAL(x, orlando))
Oval :: \x.(EQUAL(x, oval))
Over :: \Q \P \y. exists z .(Q(y) & P(z) & over:1(y, z))
Parade :: \x.(EQUAL(x, parade))
Parkinson :: \x.(EQUAL(x, parkinson))
Parliament :: \x.(EQUAL(x, parliament))
Party :: \x.(EQUAL(x, party))
Pat :: \x.(EQUAL(x, pat))
Picture :: \x.(EQUAL(x, picture))
Poland :: \x.(EQUAL(x, poland))
President :: \x.(EQUAL(x, president))
Presidential :: \x.(EQUAL(x, presidential))
Presidential :: \P \y. (P(y) & presidential(y))
Press :: \x.(EQUAL(x, press))
Prime :: \x.(EQUAL(x, prime))
Program :: \x.(EQUAL(x, program))
Protestant :: \x.(protestant(x))
Queen :: \x.(EQUAL(x, queen))
Radio :: \x.(EQUAL(x, radio))
Rancho :: \x.(EQUAL(x, rancho))
Reagan :: \x.(EQUAL(x, reagan))
Reaganomics :: \x.(reaganomics(x))
Reaganomics :: \x.(EQUAL(x, reaganomics))
Reagans :: \x.(EQUAL(x, reagans))
Reagans :: \x.(reagans(x))
Reform :: \x.(EQUAL(x, reform))
Report :: \x.(EQUAL(x, report))
Republican :: \P \y. (P(y) & republican(y))
Republican :: \x.(EQUAL(x, republican))
Republicans :: \x.(republicans(x))
Research :: \x.(EQUAL(x, research))
Reverend :: \x.(EQUAL(x, reverend))
Reykjavík :: \x.(EQUAL(x, reykjavík))
Rice :: \x.(EQUAL(x, rice))
Richard :: \x.(EQUAL(x, richard))
Rockne :: \x.(EQUAL(x, rockne))
Roman :: \x.(EQUAL(x, roman))
Ronald :: \x.(EQUAL(x, ronald))
Ronnie :: \x.(EQUAL(x, ronnie))
Roosevelt :: \x.(EQUAL(x, roosevelt))
Rosalynn :: \x.(EQUAL(x, rosalynn))
Rotunda :: \x.(EQUAL(x, rotunda))
Row :: \x.(EQUAL(x, row))
Row :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & row:1(e, z) & row:2(e, y))
San :: \x.(EQUAL(x, san))
Sandra :: \x.(EQUAL(x, sandra))
Santa :: \x.(EQUAL(x, santa))
Schröder :: \x.(EQUAL(x, schröder))
Scottish :: \x.(EQUAL(x, scottish))
Screen :: \x.(EQUAL(x, screen))
Secret :: \x.(EQUAL(x, secret))
Secretary :: \x.(EQUAL(x, secretary))
Seller :: \x.(EQUAL(x, seller))
September :: \x.(EQUAL(x, september))
Service :: \x.(EQUAL(x, service))
She :: \x.(EQUAL(x, she))
Shuttle :: \x.(EQUAL(x, shuttle))
Silvio :: \x.(EQUAL(x, silvio))
Since :: \Q \P \y. exists z .(Q(y) & P(z) & since:1(y, z))
Soon :: \P \y. (P(y) & soon(y))
Soon :: \Q \P \y. exists z .(Q(z) & P(y)(z) & soon(y))
Soviet :: \x.(EQUAL(x, soviet))
Soviets :: \x.(EQUAL(x, soviets))
Space :: \x.(EQUAL(x, space))
Special :: \Q \P \e. exists y z .(Q(y) & P(z) & special:1(e, z) & special:2(e, y))
Special :: \P \y. (P(y) & special(y))
Square :: \x.(EQUAL(x, square))
Stahl :: \x.(EQUAL(x, stahl))
Star :: \x.(EQUAL(x, star))
Starr :: \x.(EQUAL(x, starr))
State :: \x.(state(x))
State :: \x.(EQUAL(x, state))
States :: \x.(EQUAL(x, states))
Station :: \x.(EQUAL(x, station))
Statuary :: \x.(EQUAL(x, statuary))
Statue :: \x.(EQUAL(x, statue))
Strategic :: \x.(EQUAL(x, strategic))
Summit :: \x.(EQUAL(x, summit))
Supreme :: \x.(EQUAL(x, supreme))
Tampico :: \x.(EQUAL(x, tampico))
Teflon :: \x.(EQUAL(x, teflon))
Thank :: \Q \P \e. exists y z .(Q(y) & P(z) & thank:1(e, z) & thank:2(e, y))
Thatcher :: \x.(EQUAL(x, thatcher))
Theater :: \x.(EQUAL(x, theater))
Their :: \x.(EQUAL(x, their))
They :: \x.(EQUAL(x, they))
Thomas :: \x.(EQUAL(x, thomas))
Throughout :: \Q \P \y. exists z .(Q(y) & P(z) & throughout:1(y, z))
Time :: \x.(time(x))
Times :: \x.(EQUAL(x, times))
Timothy :: \x.(EQUAL(x, timothy))
Tony :: \x.(EQUAL(x, tony))
Tower :: \x.(EQUAL(x, tower))
Trail :: \x.(EQUAL(x, trail))
Treaty :: \x.(EQUAL(x, treaty))
Two :: \P \y. (P(y) & COUNT(y, two))
US :: \x.(EQUAL(x, us))
USS :: \x.(EQUAL(x, uss))
Union :: \x.(EQUAL(x, union))
Unit :: \x.(EQUAL(x, unit))
United :: \x.(EQUAL(x, united))
University :: \x.(EQUAL(x, university))
Very :: \x.(EQUAL(x, very))
Vice :: \x.(EQUAL(x, vice))
Victory :: \x.(EQUAL(x, victory))
Voodoo :: \x.(EQUAL(x, voodoo))
W :: \x.(EQUAL(x, _w))
Wall :: \x.(EQUAL(x, wall))
Walter :: \x.(EQUAL(x, walter))
War :: \x.(EQUAL(x, war))
Wars :: \x.(EQUAL(x, wars))
Warsaw :: \x.(EQUAL(x, warsaw))
Washington :: \x.(EQUAL(x, washington))
Wałęsa :: \x.(EQUAL(x, wałęsa))
We :: \x.(EQUAL(x, we))
When :: \Q \P \y. exists z .(Q(y) & P(z) & TARGET(z))
While :: \Q \P \y. exists z .(Q(y) & P(z) & while:1(y, z))
White :: \x.(EQUAL(x, white))
William :: \x.(EQUAL(x, william))
Wilson :: \x.(EQUAL(x, wilson))
World :: \x.(EQUAL(x, world))
Wyman :: \x.(EQUAL(x, wyman))
York :: \x.(EQUAL(x, york))
You :: \x.(EQUAL(x, you))
a :: None
able :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & able(e))
aboard :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & aboard:1(y, w) & aboard:2(y, z))
aboard :: \Q \P \y. exists z .(Q(y) & P(z) & aboard:1(y, z))
accept :: \Q \P \e. exists y z .(Q(y) & P(z) & accept:1(e, z) & accept:2(e, y))
access :: \x.(access(x))
across :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & across:1(y, w) & across:2(y, z))
act :: \x.(act(x))
acting :: \P \e. exists y .(P(y) & acting:1(e, y))
acting :: \P \y. (P(y) & acting(y))
active :: \P \y. (P(y) & active(y))
active :: \Q \P \e. exists y z .(Q(y) & P(z) & active(e))
active :: \P \e. exists y .(P(y) & active(e))
activities :: \x.(activities(x))
actor :: \x.(actor(x))
actors :: \x.(actors(x))
actress :: \x.(actress(x))
added :: \Q \P \e. exists y z .(Q(y) & P(z) & added:1(e, z) & added:2(e, y))
address :: \x.(address(x))
address :: \Q \P \e. exists y z .(Q(y) & P(z) & address:1(e, z) & address:2(e, y))
addressed :: \Q \P \e. exists y z .(Q(y) & P(z) & addressed:1(e, z) & addressed:2(e, y))
addressing :: \Q \P \e. exists y z .(Q(y) & P(z) & addressing:1(e, z) & addressing:2(e, y))
administration :: \x.(administration(x))
admire :: \Q \P \e. exists y z .(Q(y) & P(z) & admire:1(e, z) & admire:2(e, y))
admired :: \Q \P \e. exists y z .(Q(y) & P(z) & admired:1(e, z) & admired:2(e, y))
admired :: \P \e. exists y .(P(y) & admired:1(e, y))
advance :: \x.(advance(x))
advance :: \Q \P \e. exists y z .(Q(y) & P(z) & advance:1(e, z) & advance:2(e, y))
advocate :: \x.(advocate(x))
affair :: \x.(affair(x))
affected :: \Q \P \e. exists y z .(Q(y) & P(z) & affected:1(e, z) & affected:2(e, y))
afflicted :: \Q \P \e. exists y z .(Q(y) & P(z) & afflicted:1(e, z) & afflicted:2(e, y))
after :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & after:1(y, w) & after:2(y, z))
after :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w)(z) & R(z) & after:1(y, w) & after:2(y, z))
after :: \Q \P \y. exists z .(Q(y) & P(z) & after:1(y, z))
afterwards :: \x.(afterwards(x))
afterwards :: \Q \P \e. exists y z .(Q(y) & P(z) & afterwards:1(e, z) & afterwards:2(e, y))
again :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & again(y))
again :: \Q \P \y. exists z .(Q(z) & P(y)(z) & again(y))
against :: \Q \P \y. exists z .(Q(y) & P(z) & against:1(y, z))
against :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & against:1(y, w) & against:2(y, z))
against :: \P \e. exists y .(P(y) & against:1(e, y))
age :: \x.(age(x))
agent :: \x.(agent(x))
ago :: \Q \P \y. exists z .(Q(y) & P(z) & ago:1(y, z))
agreed :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & agreed:1(e, z) & agreed:2(e, y))
ahead :: \Q \P \y. exists z .(Q(z) & P(y)(z) & ahead(y))
aid :: \x.(aid(x))
airline :: \x.(airline(x))
alYawer :: \x.(EQUAL(x, alyawer))
alertness :: \x.(alertness(x))
allowed :: \P \e. exists y .(P(y) & allowed:1(e, y))
allowed :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & allowed:1(e, z) & allowed:2(e, y))
also :: \Q \P \y. exists z .(Q(z) & P(y)(z) & also(y))
although :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & although:1(y, w) & although:2(y, z))
always :: \Q \P \y. exists z .(Q(z) & P(y)(z) & always(y))
am :: \Q \P \y. exists x.(P(x) & Q(x))
among :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & among:1(y, w) & among:2(y, z))
amount :: \x.(amount(x))
amputee :: \x.(amputee(x))
an :: None
and :: \P Q x.(P(x) & Q(x))
angry :: \P \e. exists y .(P(y) & angry(e))
announcer :: \x.(announcer(x))
announcing :: \Q \P \e. exists y z .(Q(y) & P(z) & announcing:1(e, z) & announcing:2(e, y))
answered :: \Q \P \e. exists y z .(Q(y) & P(z) & answered:1(e, z) & answered:2(e, y))
anticommunist :: \P \y. (P(y) & anticommunist(y))
apartment :: \x.(apartment(x))
apology :: \x.(apology(x))
appearances :: \x.(appearances(x))
appeared :: \P \e. exists y .(P(y) & appeared:1(e, y))
approved :: \Q \P \e. exists y z .(Q(y) & P(z) & approved:1(e, z) & approved:2(e, y))
are :: \Q \P \y. exists x.(P(x) & Q(x))
arms :: \x.(arms(x))
around :: \P \e. exists y .(P(y) & around(e))
arrived :: \P \e. exists y .(P(y) & arrived:1(e, y))
as :: \P \e. exists y .(P(y) & as:1(e, y))
as :: \Q \P \y. exists z .(Q(y) & P(z) & as:1(y, z))
as :: \Q \P \y. exists z .(Q(z) & P(y)(z) & as(y))
as :: \Q \P \y. exists z .(Q(z) & P(y)(z) & as:1(y, z))
as :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & as(y))
as :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & as:1(y, w) & as:2(y, z))
assassination :: \x.(assassination(x))
assigned :: \P \e. exists y .(P(y) & assigned:1(e, y))
at :: \Q \P \y. exists z .(Q(y) & P(z) & at:1(y, z))
at :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & at:1(y, w) & at:2(y, z))
at :: \Q \P \e. exists y z .(Q & P(y)(z) & at:1(e, z) & at:2(e, y))
at :: \P \e. exists y .(P(y) & at:1(e, y))
ate :: \P \y. (P(y) & ate(y))
athletic :: \P \e. exists y .(P(y) & athletic(e))
attack :: \x.(attack(x))
attempt :: \x.(attempt(x))
attempts :: \x.(attempts(x))
attend :: \P \e. exists y .(P(y) & attend:1(e, y))
attend :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & attend:1(e, z) & attend:2(e, y))
attendance :: \x.(attendance(x))
attended :: \P \e. exists y .(P(y) & attended:1(e, y))
authority :: \x.(authority(x))
autobiography :: \x.(autobiography(x))
available :: \P \e. exists y .(P(y) & available(e))
award :: \x.(award(x))
awarded :: \Q \P \e. exists y z .(Q(y) & P(z) & awarded:1(e, z) & awarded:2(e, y))
away :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & away(y))
back :: \x.(back(x))
back :: \Q \P \y. exists z .(Q(z) & P(y)(z) & back(y))
bad :: \P \y. (P(y) & bad(y))
badly :: \Q \P \y. exists z .(Q(z) & P(y)(z) & badly(y))
balance :: \Q \P \e. exists y z .(Q(y) & P(z) & balance:1(e, z) & balance:2(e, y))
ballot :: \x.(ballot(x))
banned :: \Q \P \e. exists y z .(Q(y) & P(z) & banned:1(e, z) & banned:2(e, y))
baseball :: \x.(baseball(x))
based :: \Q \P \e. exists y z .(Q(y) & P(z) & based:1(e, z) & based:2(e, y))
battle :: \x.(battle(x))
be :: \Q \P \y. exists x.(P(x) & Q(x))
beaches :: \x.(beaches(x))
became :: \Q \P \e. exists y z .(Q(y) & P(z) & became:1(e, z) & became:2(e, y))
became :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & became:1(e, z) & became:2(e, y))
because :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & because:1(y, w) & because:2(y, z))
become :: \Q \P \e. exists y z .(Q(y) & P(z) & become:1(e, z) & become:2(e, y))
becoming :: \Q \P \e. exists y z .(Q(y) & P(z) & becoming:1(e, z) & becoming:2(e, y))
becoming :: \Q \P \y. exists z .(Q(z) & P(y)(z) & becoming:1(y, z))
been :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & been:1(e, z) & been:2(e, y))
before :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & before:1(y, w) & before:2(y, z))
before :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w)(z) & R(z) & before:1(y, w) & before:2(y, z))
began :: \Q \P \e. exists y z .(Q(y) & P(z) & began:1(e, z) & began:2(e, y))
began :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & began:1(e, z) & began:2(e, y))
begin :: \Q \P \e. exists y z .(Q(y) & P(z) & begin:1(e, z) & begin:2(e, y))
behalf :: \x.(behalf(x))
being :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & being:1(e, z) & being:2(e, y))
being :: \Q \P \e. exists y z .(Q(y) & P(z) & being:1(e, z) & being:2(e, y))
believe :: \Q \P \e. exists y z .(Q(y) & P(z) & believe:1(e, z) & believe:2(e, y))
believed :: \Q \P \e. exists y z .(Q(y) & P(z) & believed:1(e, z) & believed:2(e, y))
believes :: \Q \P \e. exists y z .(Q(y) & P(z) & believes:1(e, z) & believes:2(e, y))
benefits :: \x.(benefits(x))
best :: \P \y. (P(y) & best(y))
between :: \Q \P \y. exists z .(Q(y) & P(z) & between:1(y, z))
between :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & between:1(y, w) & between:2(y, z))
between :: \P \e. exists y .(P(y) & between:1(e, y))
big :: \P \e. exists y .(P(y) & big(e))
big :: \P \y. (P(y) & big(y))
bills :: \x.(bills(x))
birthday :: \x.(birthday(x))
bless :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & bless(y))
blood :: \x.(blood(x))
bombing :: \x.(bombing(x))
bone :: \x.(bone(x))
born :: \P \e. exists y .(P(y) & born:1(e, y))
born :: \Q \P \e. exists y z .(Q(y) & P(z) & born:1(e, z) & born:2(e, y))
borrow :: \Q \P \e. exists y z .(Q(y) & P(z) & borrow:1(e, z) & borrow:2(e, y))
bright :: \P \y. (P(y) & bright(y))
broadcaster :: \x.(broadcaster(x))
broken :: \P \y. (P(y) & broken(y))
brother :: \x.(brother(x))
brought :: \Q \P \e. exists y z .(Q(y) & P(z) & brought:1(e, z) & brought:2(e, y))
budget :: \x.(budget(x))
building :: \x.(building(x))
buildup :: \x.(buildup(x))
built :: \P \e. exists y .(P(y) & built:1(e, y))
bullet :: \x.(bullet(x))
bullets :: \x.(bullets(x))
buried :: \P \e. exists y .(P(y) & buried:1(e, y))
businesses :: \x.(businesses(x))
businesspeople :: \x.(businesspeople(x))
but :: \P Q x.(P(x) & Q(x))
by :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & by:1(y, w) & by:2(y, z))
by :: \Q \P \y. exists z .(Q(y) & P(z) & by:1(y, z))
by :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w)(z) & R(z) & by:1(y, w) & by:2(y, z))
cadet :: \x.(cadet(x))
called :: \Q \P \e. exists y z .(Q(y) & P(z) & called:1(e, z) & called:2(e, y))
called :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & called:1(e, y) & called:2(e, w) & called:3(e, z))
campaign :: \x.(campaign(x))
cancer :: \x.(cancer(x))
candidate :: \x.(candidate(x))
capable :: \Q \P \e. exists y z .(Q(y) & P(z) & capable(e))
capacity :: \x.(capacity(x))
capital :: \x.(capital(x))
care :: \x.(care(x))
career :: \x.(career(x))
carried :: \Q \P \e. exists y z .(Q(y) & P(z) & carried:1(e, z) & carried:2(e, y))
casket :: \x.(casket(x))
cause :: \x.(cause(x))
cause :: \Q \P \e. exists y z .(Q(y) & P(z) & cause:1(e, z) & cause:2(e, y))
caused :: \Q \P \e. exists y z .(Q(y) & P(z) & caused:1(e, z) & caused:2(e, y))
cell :: \x.(cell(x))
centenary :: \x.(centenary(x))
center :: \x.(center(x))
ceremony :: \x.(ceremony(x))
challenging :: \Q \P \y. exists z .(Q(z) & P(y)(z) & challenging:1(y, z))
change :: \x.(change(x))
changed :: \Q \P \e. exists y z .(Q(y) & P(z) & changed:1(e, z) & changed:2(e, y))
changes :: \x.(changes(x))
chest :: \x.(chest(x))
child :: \x.(child(x))
children :: \x.(children(x))
choice :: \x.(choice(x))
choose :: \Q \P \e. exists y z .(Q(y) & P(z) & choose:1(e, z) & choose:2(e, y))
christened :: \Q \P \e. exists y z .(Q(y) & P(z) & christened:1(e, z) & christened:2(e, y))
citizens :: \x.(citizens(x))
civilian :: \P \y. (P(y) & civilian(y))
class :: \x.(class(x))
close :: \P \y. (P(y) & close(y))
close :: \Q \P \e. exists y z .(Q(y) & P(z) & close(e))
coalitionists :: \x.(coalitionists(x))
collapse :: \x.(collapse(x))
college :: \x.(college(x))
colon :: \x.(colon(x))
come :: \P \e. exists y .(P(y) & come:1(e, y))
come :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & come:1(e, z) & come:2(e, y))
coming :: \P \e. exists y .(P(y) & coming:1(e, y))
commanding :: \P \y. (P(y) & commanding(y))
commission :: \x.(commission(x))
communism :: \x.(communism(x))
communist :: \P \y. (P(y) & communist(y))
communists :: \x.(communists(x))
complication :: \x.(complication(x))
conservative :: \P \y. (P(y) & conservative(y))
conservatives :: \x.(conservatives(x))
correspondent :: \x.(correspondent(x))
country :: \x.(country(x))
countrymen :: \x.(countrymen(x))
coup :: \x.(coup(x))
couple :: \x.(couple(x))
create :: \Q \P \e. exists y z .(Q(y) & P(z) & create:1(e, z) & create:2(e, y))
created :: \Q \P \e. exists y z .(Q(y) & P(z) & created:1(e, z) & created:2(e, y))
credit :: \x.(credit(x))
crew :: \x.(crew(x))
crime :: \x.(crime(x))
critic :: \x.(critic(x))
criticism :: \x.(criticism(x))
criticized :: \Q \P \e. exists y z .(Q(y) & P(z) & criticized:1(e, z) & criticized:2(e, y))
critics :: \x.(critics(x))
cure :: \x.(cure(x))
cut :: \x.(cut(x))
darkness :: \x.(darkness(x))
daughter :: \x.(daughter(x))
dawn :: \x.(dawn(x))
day :: \x.(day(x))
days :: \x.(days(x))
death :: \x.(death(x))
decided :: \Q \P \e. exists y z .(Q(y) & P(z) & decided:1(e, z) & decided:2(e, y))
declared :: \Q \P \e. exists y z .(Q(y) & P(z) & declared:1(e, z) & declared:2(e, y))
decline :: \x.(decline(x))
decreased :: \Q \P \e. exists y z .(Q(y) & P(z) & decreased:1(e, z) & decreased:2(e, y))
dedicated :: \P \e. exists y .(P(y) & dedicated:1(e, y))
defeated :: \Q \P \e. exists y z .(Q(y) & P(z) & defeated:1(e, z) & defeated:2(e, y))
defense :: \x.(defense(x))
del :: \x.(EQUAL(x, del))
delivered :: \P \e. exists y .(P(y) & delivered:1(e, y))
delivered :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & delivered:1(e, y) & delivered:2(e, w) & delivered:3(e, z))
departments :: \x.(departments(x))
descent :: \x.(descent(x))
described :: \Q \P \e. exists y z .(Q(y) & P(z) & described:1(e, z) & described:2(e, y))
destiny :: \x.(destiny(x))
destroy :: \Q \P \e. exists y z .(Q(y) & P(z) & destroy:1(e, z) & destroy:2(e, y))
destroyed :: \Q \P \e. exists y z .(Q(y) & P(z) & destroyed:1(e, z) & destroyed:2(e, y))
detente :: \x.(detente(x))
diagnosed :: \Q \P \e. exists y z .(Q(y) & P(z) & diagnosed:1(e, z) & diagnosed:2(e, y))
diagnosis :: \x.(diagnosis(x))
diary :: \x.(diary(x))
did :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & did:1(e, z) & did:2(e, y))
did :: \Q \P \R \e. exists z w y .(Q(z)(w) & P(w) & R(y) & did:1(e, y) & did:2(e, w) & did:3(e, z))
died :: \P \e. exists y .(P(y) & died:1(e, y))
different :: \P \y. (P(y) & different(y))
difficult :: \P \y. (P(y) & difficult(y))
directed :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & directed:1(e, y) & directed:2(e, w) & directed:3(e, z))
disease :: \x.(disease(x))
display :: \x.(display(x))
divided :: \Q \P \e. exists y z .(Q(y) & P(z) & divided:1(e, z) & divided:2(e, y))
divorced :: \P \e. exists y .(P(y) & divorced:1(e, y))
do :: \Q \P \e. exists y z .(Q(y) & P(z) & do:1(e, z) & do:2(e, y))
do :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & do:1(e, z) & do:2(e, y))
doctors :: \x.(doctors(x))
doing :: \Q \P \e. exists y z .(Q(y) & P(z) & doing:1(e, z) & doing:2(e, y))
done :: \Q \P \e. exists y z .(Q(y) & P(z) & done:1(e, z) & done:2(e, y))
double :: \P \y. (P(y) & double(y))
down :: \Q \P \y. exists z .(Q(z) & P(y)(z) & down(y))
dramatically :: \Q \P \y. exists z .(Q(z) & P(y)(z) & dramatically(y))
due :: \Q \P \e. exists y z .(Q(y) & P(z) & due(e))
during :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & during:1(y, w) & during:2(y, z))
during :: \Q \P \y. exists z .(Q(y) & P(z) & during:1(y, z))
duty :: \x.(duty(x))
ear :: \x.(ear(x))
earth :: \x.(earth(x))
eastern :: \P \y. (P(y) & eastern(y))
economic :: \P \y. (P(y) & economic(y))
economics :: \x.(economics(x))
economy :: \x.(economy(x))
educational :: \P \y. (P(y) & educational(y))
elected :: \Q \P \e. exists y z .(Q(y) & P(z) & elected:1(e, z) & elected:2(e, y))
elected :: \P \e. exists y .(P(y) & elected:1(e, y))
election :: \x.(election(x))
elections :: \x.(elections(x))
electoral :: \P \y. (P(y) & electoral(y))
embryonic :: \P \y. (P(y) & embryonic(y))
empire :: \x.(empire(x))
end :: \Q \P \e. exists y z .(Q(y) & P(z) & end:1(e, z) & end:2(e, y))
end :: \x.(end(x))
ended :: \Q \P \e. exists y z .(Q(y) & P(z) & ended:1(e, z) & ended:2(e, y))
ending :: \Q \P \e. exists y z .(Q(y) & P(z) & ending:1(e, z) & ending:2(e, y))
endorsed :: \Q \P \e. exists y z .(Q(y) & P(z) & endorsed:1(e, z) & endorsed:2(e, y))
engagement :: \x.(engagement(x))
enjoyed :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & enjoyed:1(e, z) & enjoyed:2(e, y))
enlarged :: \P \y. (P(y) & enlarged(y))
entire :: \P \y. (P(y) & entire(y))
entitled :: \Q \P \y. exists z .(Q(z) & P(y)(z) & entitled:1(y, z))
eulogies :: \x.(eulogies(x))
even :: \Q \P \y. exists z .(Q(z) & P(y)(z) & even(y))
event :: \x.(event(x))
ever :: \Q \P \y. exists z .(Q(z) & P(y)(z) & ever(y))
evidence :: \x.(evidence(x))
executives :: \x.(executives(x))
experts :: \x.(experts(x))
exploded :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & exploded:1(e, z) & exploded:2(e, y))
faced :: \Q \P \e. exists y z .(Q(y) & P(z) & faced:1(e, z) & faced:2(e, y))
facts :: \x.(facts(x))
failed :: \Q \P \e. exists y z .(Q(y) & P(z) & failed:1(e, z) & failed:2(e, y))
faithless :: \P \y. (P(y) & faithless(y))
fall :: \x.(fall(x))
family :: \x.(family(x))
famous :: \P \y. (P(y) & famous(y))
famously :: \Q \P \y. exists z .(Q(z) & P(y)(z) & famously(y))
fan :: \x.(fan(x))
far :: \Q \P \y. exists z .(Q(z) & P(y)(z) & far(y))
fast :: \P \y. (P(y) & fast(y))
father :: \x.(father(x))
fault :: \x.(fault(x))
favorite :: \P \y. (P(y) & favorite(y))
federal :: \P \y. (P(y) & federal(y))
felt :: \Q \P \e. exists y z .(Q(y) & P(z) & felt:1(e, z) & felt:2(e, y))
few :: \P \y. (P(y) & few(y))
fifth :: \x.(fifth(x))
final :: \P \y. (P(y) & final(y))
finally :: \Q \P \y. exists z .(Q(z) & P(y)(z) & finally(y))
find :: \Q \P \e. exists y z .(Q(y) & P(z) & find:1(e, z) & find:2(e, y))
fine :: \P \e. exists y .(P(y) & fine(e))
finished :: \P \e. exists y .(P(y) & finished:1(e, y))
fired :: \Q \P \e. exists y z .(Q(y) & P(z) & fired:1(e, z) & fired:2(e, y))
fired :: \P \e. exists y .(P(y) & fired:1(e, y))
first :: \P \y. (P(y) & first(y))
first :: \Q \P \y. exists z .(Q(z) & P(y)(z) & first(y))
following :: \P \y. (P(y) & following(y))
for :: \P \e. exists y .(P(y) & for:1(e, y))
for :: \Q \P \y. exists z .(Q(y) & P(z) & for:1(y, z))
for :: \Q \P \e. exists y z .(Q & P(y)(z) & for:1(e, z) & for:2(e, y))
for :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & for:1(y, w) & for:2(y, z))
for :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w)(z) & R(z) & for:1(y, w) & for:2(y, z))
foreign :: \P \y. (P(y) & foreign(y))
forgotten :: \P \e. exists y .(P(y) & forgotten:1(e, y))
former :: \P \y. (P(y) & former(y))
four :: \P \y. (P(y) & COUNT(y, four))
fracture :: \x.(fracture(x))
frail :: \P \y. (P(y) & frail(y))
free :: \P \y. (P(y) & free(y))
freedom :: \x.(freedom(x))
frequent :: \Q \P \e. exists y z .(Q(y) & P(z) & frequent(e))
friendly :: \P \e. exists y .(P(y) & friendly(e))
friends :: \x.(friends(x))
friendship :: \x.(friendship(x))
from :: \Q \P \S \R \y. exists v z .(Q & P(v) & S(z) & R(y)(z) & from:1(y, z) & from:2(y, v))
from :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & from:1(y, w) & from:2(y, z))
from :: \P \e. exists y .(P(y) & from:1(e, y))
from :: \Q \P \y. exists z .(Q(y) & P(z) & from:1(y, z))
funding :: \x.(funding(x))
funeral :: \x.(funeral(x))
gained :: \Q \P \e. exists y z .(Q(y) & P(z) & gained:1(e, z) & gained:2(e, y))
games :: \x.(games(x))
gate :: \x.(gate(x))
gave :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & gave:1(e, y) & gave:2(e, w) & gave:3(e, z))
gave :: \Q \P \e. exists y z .(Q(y) & P(z) & gave:1(e, z) & gave:2(e, y))
generation :: \x.(generation(x))
get :: \Q \P \e. exists y z .(Q(y) & P(z) & get:1(e, z) & get:2(e, y))
give :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & give:1(e, y) & give:2(e, w) & give:3(e, z))
give :: \Q \P \e. exists y z .(Q(y) & P(z) & give:1(e, z) & give:2(e, y))
gives :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & gives:1(e, y) & gives:2(e, w) & gives:3(e, z))
giving :: \Q \P \e. exists y z .(Q(y) & P(z) & giving:1(e, z) & giving:2(e, y))
go :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & go:1(e, z) & go:2(e, y))
go :: \P \e. exists y .(P(y) & go:1(e, y))
golf :: \x.(golf(x))
gonzo :: \x.(gonzo(x))
good :: \P \y. (P(y) & good(y))
good :: \Q \P \e. exists y z .(Q(y) & P(z) & good(e))
got :: \Q \P \e. exists y z .(Q(y) & P(z) & got:1(e, z) & got:2(e, y))
government :: \x.(government(x))
governor :: \x.(governor(x))
graduated :: \Q \P \e. exists y z .(Q(y) & P(z) & graduated:1(e, z) & graduated:2(e, y))
granted :: \Q \P \e. exists y z .(Q(y) & P(z) & granted:1(e, z) & granted:2(e, y))
greatest :: \P \y. (P(y) & greatest(y))
group :: \x.(group(x))
growth :: \x.(growth(x))
guest :: \x.(guest(x))
had :: \Q \P \e. exists y z .(Q(y) & P(z) & had:1(e, z) & had:2(e, y))
had :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & had:1(e, z) & had:2(e, y))
happened :: \P \e. exists y .(P(y) & happened:1(e, y))
has :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & has:1(e, z) & has:2(e, y))
have :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & have:1(e, z) & have:2(e, y))
have :: \Q \P \e. exists y z .(Q(y) & P(z) & have:1(e, z) & have:2(e, y))
having :: \Q \P \e. exists y z .(Q(y) & P(z) & having:1(e, z) & having:2(e, y))
he :: \x.(EQUAL(x, he))
head :: \x.(head(x))
health :: \x.(health(x))
hearing :: \x.(hearing(x))
heart :: \x.(heart(x))
held :: \Q \P \e. exists y z .(Q(y) & P(z) & held:1(e, z) & held:2(e, y))
held :: \P \e. exists y .(P(y) & held:1(e, y))
helicopter :: \x.(helicopter(x))
help :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & help:1(e, z) & help:2(e, y))
help :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & help:1(e, y) & help:2(e, w) & help:3(e, z))
helped :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & helped:1(e, z) & helped:2(e, y))
helped :: \Q \P \e. exists y z .(Q(y) & P(z) & helped:1(e, z) & helped:2(e, y))
her :: \x.(EQUAL(x, her))
here :: \Q \P \y. exists z .(Q(z) & P(y)(z) & here(y))
hero :: \x.(hero(x))
hide :: \P \e. exists y .(P(y) & hide:1(e, y))
high :: \P \e. exists y .(P(y) & high(e))
high :: \P \y. (P(y) & high(y))
highest :: \P \y. (P(y) & highest(y))
him :: \x.(EQUAL(x, him))
hip :: \x.(hip(x))
hiring :: \Q \P \e. exists y z .(Q(y) & P(z) & hiring:1(e, z) & hiring:2(e, y))
his :: \x.(EQUAL(x, his))
history :: \x.(history(x))
home :: \x.(home(x))
honor :: \x.(honor(x))
honorable :: \P \y. (P(y) & honorable(y))
honored :: \Q \P \e. exists y z .(Q(y) & P(z) & honored:1(e, z) & honored:2(e, y))
honored :: \P \e. exists y .(P(y) & honored:1(e, y))
hope :: \x.(hope(x))
hospital :: \x.(hospital(x))
hostages :: \x.(hostages(x))
hosted :: \Q \P \e. exists y z .(Q(y) & P(z) & hosted:1(e, z) & hosted:2(e, y))
hotel :: \x.(hotel(x))
house :: \x.(house(x))
how :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & TARGET(z) & TARGET(w))
human :: \P \y. (P(y) & human(y))
humanity :: \x.(humanity(x))
hurt :: \P \e. exists y .(P(y) & hurt:1(e, y))
husband :: \x.(husband(x))
idea :: \x.(idea(x))
if :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & if:1(y, w) & if:2(y, z))
illegally :: \Q \P \y. exists z .(Q(z) & P(y)(z) & illegally(y))
immigrants :: \x.(immigrants(x))
improve :: \Q \P \e. exists y z .(Q(y) & P(z) & improve:1(e, z) & improve:2(e, y))
in :: \Q \P \y. exists z .(Q(y) & P(z) & in:1(y, z))
in :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & in:1(y, w) & in:2(y, z))
in :: \P \e. exists y .(P(y) & in:1(e, y))
in :: \Q \P \y. exists z .(Q(z) & P(y)(z) & in:1(y, z))
in :: \Q \P \y. exists z .(Q(y) & P(z)(y) & in:1(y, z))
inaugurated :: \P \e. exists y .(P(y) & inaugurated:1(e, y))
inaugurated :: \Q \P \e. exists y z .(Q(y) & P(z) & inaugurated:1(e, z) & inaugurated:2(e, y))
inch :: \x.(inch(x))
including :: \Q \P \y. exists z .(Q(y) & P(z) & including:1(y, z))
income :: \x.(income(x))
increase :: \Q \P \e. exists y z .(Q(y) & P(z) & increase:1(e, z) & increase:2(e, y))
increases :: \x.(increases(x))
individuals :: \x.(individuals(x))
inflation :: \x.(inflation(x))
innocent :: \P \y. (P(y) & innocent(y))
instead :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & instead:1(y, w) & instead:2(y, z))
institution :: \x.(institution(x))
intelligence :: \x.(intelligence(x))
intend :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & intend:1(e, z) & intend:2(e, y))
intentions :: \x.(intentions(x))
interesting :: \P \e. exists y .(P(y) & interesting(e))
interfere :: \Q \P \e. exists y z .(Q(y) & P(z) & interfere:1(e, z) & interfere:2(e, y))
interim :: \P \y. (P(y) & interim(y))
into :: \Q \P \y. exists z .(Q(y) & P(z) & into:1(y, z))
into :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & into:1(y, w) & into:2(y, z))
into :: \P \e. exists y .(P(y) & into:1(e, y))
introduced :: \P \e. exists y .(P(y) & introduced:1(e, y))
invasion :: \x.(invasion(x))
is :: \Q \P \y. exists x.(P(x) & Q(x))
it :: \x.(EQUAL(x, it))
jobs :: \x.(jobs(x))
journey :: \x.(journey(x))
just :: \Q \P \y. exists z .(Q(z) & P(y)(z) & just(y))
justice :: \x.(justice(x))
keep :: \Q \P \e. exists y z .(Q(y) & P(z) & keep:1(e, z) & keep:2(e, y))
killed :: \P \e. exists y .(P(y) & killed:1(e, y))
killed :: \Q \P \e. exists y z .(Q(y) & P(z) & killed:1(e, z) & killed:2(e, y))
killing :: \Q \P \e. exists y z .(Q(y) & P(z) & killing:1(e, z) & killing:2(e, y))
know :: \Q \P \e. exists y z .(Q(y) & P(z) & know:1(e, z) & know:2(e, y))
know :: \P \e. exists y .(P(y) & know:1(e, y))
known :: \Q \P \e. exists y z .(Q(y) & P(z) & known:1(e, z) & known:2(e, y))
ladies :: \x.(ladies(x))
landslide :: \x.(landslide(x))
largest :: \P \y. (P(y) & largest(y))
last :: \P \e. exists y .(P(y) & last:1(e, y))
last :: \P \y. (P(y) & last(y))
late :: \P \y. (P(y) & late(y))
later :: \Q \P \y. exists z .(Q(z) & P(y)(z) & later(y))
later :: \P \e. exists y .(P(y) & later(e))
later :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & later(y))
later :: \Q \P \y. exists z .(Q(y) & P(z) & later(y))
later :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & later(y))
launched :: \P \e. exists y .(P(y) & launched:1(e, y))
law :: \x.(law(x))
lawn :: \x.(lawn(x))
lead :: \x.(lead(x))
lead :: \Q \P \e. exists y z .(Q(y) & P(z) & lead:1(e, z) & lead:2(e, y))
lead :: \P \e. exists y .(P(y) & lead:1(e, y))
leader :: \x.(leader(x))
leaders :: \x.(leaders(x))
leaving :: \P \e. exists y .(P(y) & leaving:1(e, y))
leaving :: \Q \P \e. exists y z .(Q(y) & P(z) & leaving:1(e, z) & leaving:2(e, y))
left :: \Q \P \e. exists y z .(Q(y) & P(z) & left:1(e, z) & left:2(e, y))
left :: \x.(left(x))
legacy :: \x.(legacy(x))
legal :: \P \y. (P(y) & legal(y))
legalization :: \x.(legalization(x))
legislature :: \x.(legislature(x))
less :: \Q \P \y. exists z .(Q(z) & P(y)(z) & less(y))
letter :: \x.(letter(x))
letters :: \x.(letters(x))
liberalization :: \x.(liberalization(x))
liberty :: \x.(liberty(x))
life :: \x.(life(x))
lifeguard :: \x.(lifeguard(x))
lifelong :: \P \y. (P(y) & lifelong(y))
lifting :: \Q \P \e. exists y z .(Q(y) & P(z) & lifting:1(e, z) & lifting:2(e, y))
like :: \Q \P \e. exists y z .(Q(y) & P(z) & like:1(e, z) & like:2(e, y))
limousine :: \x.(limousine(x))
limousine :: \P \y. (P(y) & limousine(y))
listens :: \Q \P \e. exists y z .(Q(y) & P(z) & listens:1(e, z) & listens:2(e, y))
live :: \Q \P \e. exists y z .(Q(y) & P(z) & live:1(e, z) & live:2(e, y))
live :: \P \e. exists y .(P(y) & live:1(e, y))
lived :: \P \e. exists y .(P(y) & lived:1(e, y))
lived :: \Q \P \e. exists y z .(Q(y) & P(z) & lived:1(e, z) & lived:2(e, y))
lives :: \x.(lives(x))
living :: \x.(living(x))
loans :: \x.(loans(x))
located :: \P \e. exists y .(P(y) & located:1(e, y))
lost :: \Q \P \e. exists y z .(Q(y) & P(z) & lost:1(e, z) & lost:2(e, y))
lot :: \x.(lot(x))
lowered :: \Q \P \e. exists y z .(Q(y) & P(z) & lowered:1(e, z) & lowered:2(e, y))
lunch :: \x.(lunch(x))
lung :: \x.(lung(x))
lying :: \P \e. exists y .(P(y) & lying:1(e, y))
m :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & _m:1(e, z) & _m:2(e, y))
made :: \Q \P \R \e. exists z w y .(Q(z)(w) & P(w) & R(y) & made:1(e, y) & made:2(e, w) & made:3(e, z))
made :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & made:1(e, y) & made:2(e, w) & made:3(e, z))
made :: \Q \P \e. exists y z .(Q(y) & P(z) & made:1(e, z) & made:2(e, y))
mail :: \x.(mail(x))
major :: \P \y. (P(y) & major(y))
majority :: \x.(majority(x))
make :: \Q \P \e. exists y z .(Q(y) & P(z) & make:1(e, z) & make:2(e, y))
man :: \x.(man(x))
many :: \P \y. (P(y) & many(y))
many :: \x.(many(x))
mark :: \Q \P \e. exists y z .(Q(y) & P(z) & mark:1(e, z) & mark:2(e, y))
marriage :: \x.(marriage(x))
married :: \Q \P \e. exists y z .(Q(y) & P(z) & married:1(e, z) & married:2(e, y))
massacre :: \x.(massacre(x))
massive :: \P \y. (P(y) & massive(y))
me :: \x.(EQUAL(x, me))
means :: \Q \P \e. exists y z .(Q(y) & P(z) & means:1(e, z) & means:2(e, y))
medals :: \x.(medals(x))
medicine :: \x.(medicine(x))
meeting :: \x.(meeting(x))
meetings :: \x.(meetings(x))
melanoma :: \x.(melanoma(x))
memoirs :: \x.(memoirs(x))
memorial :: \P \y. (P(y) & memorial(y))
men :: \x.(men(x))
mental :: \P \y. (P(y) & mental(y))
mentioning :: \Q \P \e. exists y z .(Q(y) & P(z) & mentioning:1(e, z) & mentioning:2(e, y))
military :: \x.(military(x))
military :: \P \y. (P(y) & military(y))
millions :: \x.(millions(x))
missile :: \x.(missile(x))
missiles :: \x.(missiles(x))
model :: \x.(model(x))
moment :: \x.(moment(x))
moments :: \x.(moments(x))
money :: \x.(money(x))
months :: \x.(months(x))
more :: \Q \P \y. (Q(y) & P & more(y))
more :: \Q \P \y. exists z .(Q(z) & P(y)(z) & more(y))
most :: \Q \P \y. (Q(y) & P & most(y))
most :: \Q \P \y. exists z .(Q(z) & P(y)(z) & most(y))
most :: \P \y. (P(y) & most(y))
mother :: \x.(mother(x))
moved :: \P \e. exists y .(P(y) & moved:1(e, y))
movements :: \x.(movements(x))
movie :: \x.(movie(x))
movies :: \x.(movies(x))
multiple :: \P \y. (P(y) & multiple(y))
my :: \x.(EQUAL(x, my))
named :: \Q \P \e. exists y z .(Q(y) & P(z) & named:1(e, z) & named:2(e, y))
names :: \x.(names(x))
nation :: \x.(nation(x))
near :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & near:1(y, w) & near:2(y, z))
near :: \Q \P \y. exists z .(Q(y) & P(z) & near:1(y, z))
nearby :: \P \y. (P(y) & nearby(y))
nearest :: \P \e. exists y .(P(y) & nearest:1(e, y))
nearly :: \Q \P \y. exists z .(Q(z) & P(y)(z) & nearly(y))
never :: \Q \P \y. exists z .(Q(z) & P(y)(z) & never(y))
new :: \P \y. (P(y) & new(y))
news :: \x.(news(x))
nicked :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & nicked:1(e, z) & nicked:2(e, y))
nickname :: \x.(nickname(x))
nominated :: \P \e. exists y .(P(y) & nominated:1(e, y))
nominated :: \Q \P \e. exists y z .(Q(y) & P(z) & nominated:1(e, z) & nominated:2(e, y))
nomination :: \x.(nomination(x))
nose :: \x.(nose(x))
not :: \Q \P \y. exists z .(Q(z) & P(y)(z) & not(y))
not :: \Q \P \y. exists z .(Q(z) & P(y)(z) & NEGATION(y))
now :: \Q \P \y. exists z .(Q(z) & P(y)(z) & now(y))
nt :: \Q \P \y. exists z .(Q(z) & P(y)(z) & nt(y))
nuclear :: \P \y. (P(y) & nuclear(y))
of :: \Q \P \y. exists z .(Q(y) & P(z) & of:1(y, z))
of :: \P \e. exists y .(P(y) & of:1(e, y))
of :: \Q \P \y. exists z .(Q(y) & P(z)(y) & of:1(y, z))
of :: \Q \P \R \y. exists w .(Q & P(w) & R(y) & of:1(y, w))
office :: \x.(office(x))
officer :: \x.(officer(x))
often :: \Q \P \y. exists z .(Q(z) & P(y)(z) & often(y))
old :: \Q \P \e. exists y z .(Q(y) & P(z) & old(e))
older :: \P \y. (P(y) & older(y))
oldest :: \P \y. (P(y) & oldest(y))
on :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & on:1(y, w) & on:2(y, z))
on :: \Q \P \e. exists y z .(Q & P(y)(z) & on:1(e, z) & on:2(e, y))
on :: \P \e. exists y .(P(y) & on:1(e, y))
on :: \Q \P \y. exists z .(Q(y) & P(z) & on:1(y, z))
on :: \Q \P \y. exists z .(Q(z) & P(y)(z) & on:1(y, z))
onboard :: \x.(onboard(x))
once :: \P \e. exists y .(P(y) & once(e))
once :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & once(y))
only :: \P \y. (P(y) & only(y))
only :: \Q \P \y. exists z .(Q(z) & P(y)(z) & only(y))
open :: \P \y. (P(y) & open(y))
open :: \Q \P \e. exists y z .(Q(y) & P(z) & open(e))
opened :: \Q \P \e. exists y z .(Q(y) & P(z) & opened:1(e, z) & opened:2(e, y))
opening :: \x.(opening(x))
openness :: \x.(openness(x))
operations :: \x.(operations(x))
opinion :: \x.(opinion(x))
opposed :: \Q \P \e. exists y z .(Q(y) & P(z) & opposed:1(e, z) & opposed:2(e, y))
opposite :: \P \y. (P(y) & opposite(y))
optimism :: \x.(optimism(x))
or :: \P Q x.(P(x) & Q(x))
ordered :: \Q \P \R \e. exists z w y .(Q(z)(w) & P(w) & R(y) & ordered:1(e, y) & ordered:2(e, w) & ordered:3(e, z))
ordered :: \Q \P \e. exists y z .(Q(y) & P(z) & ordered:1(e, z) & ordered:2(e, y))
ordered :: \P \e. exists y .(P(y) & ordered:1(e, y))
ordering :: \Q \P \e. exists y z .(Q(y) & P(z) & ordering:1(e, z) & ordering:2(e, y))
originally :: \Q \P \y. exists z .(Q(z) & P(y)(z) & originally(y))
other :: \P \y. (P(y) & other(y))
our :: \x.(EQUAL(x, our))
outside :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & outside:1(y, w) & outside:2(y, z))
over :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & over:1(y, w) & over:2(y, z))
overthrow :: \Q \P \e. exists y z .(Q(y) & P(z) & overthrow:1(e, z) & overthrow:2(e, y))
paralyzed :: \P \e. exists y .(P(y) & paralyzed:1(e, y))
paralyzing :: \Q \P \e. exists y z .(Q(y) & P(z) & paralyzing:1(e, z) & paralyzing:2(e, y))
parks :: \x.(parks(x))
part :: \x.(part(x))
parties :: \x.(parties(x))
party :: \x.(party(x))
passage :: \x.(passage(x))
passenger :: \x.(passenger(x))
pay :: \x.(pay(x))
pay :: \Q \P \e. exists y z .(Q(y) & P(z) & pay:1(e, z) & pay:2(e, y))
peace :: \x.(peace(x))
peacefully :: \Q \P \y. exists z .(Q(z) & P(y)(z) & peacefully(y))
peacetime :: \x.(peacetime(x))
people :: \x.(people(x))
performed :: \Q \P \e. exists y z .(Q(y) & P(z) & performed:1(e, z) & performed:2(e, y))
person :: \x.(person(x))
personnel :: \x.(personnel(x))
persuaded :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & persuaded:1(e, z) & persuaded:2(e, y))
photo :: \x.(photo(x))
phrase :: \x.(phrase(x))
physical :: \P \y. (P(y) & physical(y))
place :: \Q \P \e. exists y z .(Q(y) & P(z) & place:1(e, z) & place:2(e, y))
place :: \x.(place(x))
places :: \x.(places(x))
plan :: \x.(plan(x))
plane :: \x.(plane(x))
played :: \Q \P \e. exists y z .(Q(y) & P(z) & played:1(e, z) & played:2(e, y))
pneumonia :: \x.(pneumonia(x))
policies :: \x.(policies(x))
policy :: \x.(policy(x))
political :: \P \y. (P(y) & political(y))
politician :: \x.(politician(x))
politics :: \x.(politics(x))
polls :: \x.(polls(x))
poor :: \P \e. exists y .(P(y) & poor(e))
poor :: \x.(poor(x))
poor :: \P \y. (P(y) & poor(y))
popular :: \P \y. (P(y) & popular(y))
popular :: \P \e. exists y .(P(y) & popular(e))
popularity :: \x.(popularity(x))
postponed :: \Q \P \e. exists y z .(Q(y) & P(z) & postponed:1(e, z) & postponed:2(e, y))
power :: \x.(power(x))
praised :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & praised:1(e, y) & praised:2(e, w) & praised:3(e, z))
presented :: \P \e. exists y .(P(y) & presented:1(e, y))
preserve :: \Q \P \e. exists y z .(Q(y) & P(z) & preserve:1(e, z) & preserve:2(e, y))
presidency :: \x.(presidency(x))
president :: \x.(president(x))
presidential :: \P \y. (P(y) & presidential(y))
presidents :: \x.(presidents(x))
prevent :: \Q \P \e. exists y z .(Q(y) & P(z) & prevent:1(e, z) & prevent:2(e, y))
profit :: \x.(profit(x))
program :: \x.(program(x))
programs :: \x.(programs(x))
progression :: \x.(progression(x))
proposed :: \Q \P \e. exists y z .(Q(y) & P(z) & proposed:1(e, z) & proposed:2(e, y))
prosperity :: \x.(prosperity(x))
prostate :: \x.(prostate(x))
protest :: \x.(protest(x))
provisions :: \x.(provisions(x))
public :: \P \y. (P(y) & public(y))
public :: \x.(public(x))
published :: \P \e. exists y .(P(y) & published:1(e, y))
punctured :: \P \y. (P(y) & punctured(y))
quickly :: \Q \P \y. exists z .(Q(z) & P(y)(z) & quickly(y))
quiet :: \P \y. (P(y) & quiet(y))
radio :: \x.(radio(x))
raised :: \Q \P \e. exists y z .(Q(y) & P(z) & raised:1(e, z) & raised:2(e, y))
ran :: \Q \P \e. exists y z .(Q(y) & P(z) & ran:1(e, z) & ran:2(e, y))
ran :: \P \e. exists y .(P(y) & ran:1(e, y))
ranch :: \x.(ranch(x))
ranked :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & ranked:1(e, z) & ranked:2(e, y))
rankings :: \x.(rankings(x))
rates :: \x.(rates(x))
reached :: \Q \P \e. exists y z .(Q(y) & P(z) & reached:1(e, z) & reached:2(e, y))
reaching :: \Q \P \e. exists y z .(Q(y) & P(z) & reaching:1(e, z) & reaching:2(e, y))
read :: \Q \P \e. exists y z .(Q(y) & P(z) & read:1(e, z) & read:2(e, y))
receive :: \Q \P \e. exists y z .(Q(y) & P(z) & receive:1(e, z) & receive:2(e, y))
received :: \Q \P \e. exists y z .(Q(y) & P(z) & received:1(e, z) & received:2(e, y))
received :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & received:1(e, y) & received:2(e, w) & received:3(e, z))
recently :: \Q \P \y. exists z .(Q(z) & P(y)(z) & recently(y))
recognition :: \x.(recognition(x))
recognize :: \Q \P \e. exists y z .(Q(y) & P(z) & recognize:1(e, z) & recognize:2(e, y))
recorded :: \P \y. (P(y) & recorded(y))
recovered :: \P \e. exists y .(P(y) & recovered:1(e, y))
recovering :: \P \e. exists y .(P(y) & recovering:1(e, y))
recovery :: \x.(recovery(x))
recreate :: \Q \P \e. exists y z .(Q(y) & P(z) & recreate:1(e, z) & recreate:2(e, y))
recreating :: \Q \P \e. exists y z .(Q(y) & P(z) & recreating:1(e, z) & recreating:2(e, y))
reelected :: \P \e. exists y .(P(y) & reelected:1(e, y))
reelected :: \Q \P \e. exists y z .(Q(y) & P(z) & reelected:1(e, z) & reelected:2(e, y))
reenlisted :: \Q \P \e. exists y z .(Q(y) & P(z) & reenlisted:1(e, z) & reenlisted:2(e, y))
reform :: \x.(reform(x))
regained :: \Q \P \e. exists y z .(Q(y) & P(z) & regained:1(e, z) & regained:2(e, y))
regularly :: \Q \P \y. exists z .(Q(z) & P(y)(z) & regularly(y))
regulating :: \Q \P \e. exists y z .(Q(y) & P(z) & regulating:1(e, z) & regulating:2(e, y))
rehired :: \P \e. exists y .(P(y) & rehired(e))
release :: \x.(release(x))
remainder :: \x.(remainder(x))
remained :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & remained:1(e, z) & remained:2(e, y))
remains :: \Q \P \e. exists y z .(Q(y) & P(z) & remains:1(e, z) & remains:2(e, y))
remember :: \Q \P \e. exists y z .(Q(y) & P(z) & remember:1(e, z) & remember:2(e, y))
remembers :: \x.(remembers(x))
remove :: \Q \P \e. exists y z .(Q(y) & P(z) & remove:1(e, z) & remove:2(e, y))
removed :: \P \e. exists y .(P(y) & removed:1(e, y))
renovated :: \P \e. exists y .(P(y) & renovated:1(e, y))
reopened :: \P \e. exists y .(P(y) & reopened:1(e, y))
repaired :: \P \e. exists y .(P(y) & repaired:1(e, y))
reporting :: \Q \P \e. exists y z .(Q(y) & P(z) & reporting:1(e, z) & reporting:2(e, y))
represents :: \Q \P \e. exists y z .(Q(y) & P(z) & represents:1(e, z) & represents:2(e, y))
reputation :: \x.(reputation(x))
research :: \Q \P \e. exists y z .(Q(y) & P(z) & research:1(e, z) & research:2(e, y))
research :: \x.(research(x))
resigning :: \P \e. exists y .(P(y) & resigning:1(e, y))
restrictions :: \x.(restrictions(x))
result :: \x.(result(x))
resulted :: \Q \P \e. exists y z .(Q(y) & P(z) & resulted:1(e, z) & resulted:2(e, y))
returned :: \P \e. exists y .(P(y) & returned:1(e, y))
returned :: \Q \P \e. exists y z .(Q(y) & P(z) & returned:1(e, z) & returned:2(e, y))
returns :: \x.(returns(x))
reviews :: \x.(reviews(x))
rib :: \x.(rib(x))
right :: \P \y. (P(y) & right(y))
role :: \x.(role(x))
rotunda :: \x.(rotunda(x))
run :: \x.(run(x))
run :: \Q \P \e. exists y z .(Q(y) & P(z) & run:1(e, z) & run:2(e, y))
s :: \Q \P \y. exists z .(Q(y) & P(z) & _s:1(y, z))
s :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & _s:1(e, z) & _s:2(e, y))
s :: \Q \P \e. exists y z .(Q(y) & P(z) & _s:1(e, z) & _s:2(e, y))
said :: \Q \P \e. exists y z .(Q(y) & P(z) & said:1(e, z) & said:2(e, y))
same :: \P \y. (P(y) & same(y))
saved :: \Q \P \e. exists y z .(Q(y) & P(z) & saved:1(e, z) & saved:2(e, y))
saw :: \Q \P \e. exists y z .(Q(y) & P(z) & saw:1(e, z) & saw:2(e, y))
scandal :: \x.(scandal(x))
scandals :: \x.(scandals(x))
school :: \x.(school(x))
scores :: \x.(scores(x))
screen :: \x.(screen(x))
sea :: \x.(sea(x))
second :: \P \y. (P(y) & second(y))
security :: \x.(security(x))
see :: \Q \P \e. exists y z .(Q(y) & P(z) & see:1(e, z) & see:2(e, y))
seek :: \Q \P \e. exists y z .(Q(y) & P(z) & seek:1(e, z) & seek:2(e, y))
seem :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & seem:1(e, z) & seem:2(e, y))
seen :: \Q \P \e. exists y z .(Q(y) & P(z) & seen:1(e, z) & seen:2(e, y))
selling :: \Q \P \y. exists z .(Q(z) & P(y)(z) & selling:1(y, z))
semiisolation :: \x.(semiisolation(x))
senate :: \x.(senate(x))
senile :: \P \e. exists y .(P(y) & senile(e))
sent :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & sent:1(e, y) & sent:2(e, w) & sent:3(e, z))
sentence :: \x.(sentence(x))
separated :: \P \e. exists y .(P(y) & separated:1(e, y))
served :: \P \e. exists y .(P(y) & served:1(e, y))
served :: \Q \P \e. exists y z .(Q(y) & P(z) & served:1(e, z) & served:2(e, y))
service :: \x.(service(x))
settled :: \P \e. exists y .(P(y) & settled:1(e, y))
shadows :: \x.(shadows(x))
shape :: \x.(shape(x))
she :: \x.(EQUAL(x, she))
ship :: \x.(ship(x))
shocked :: \P \e. exists y .(P(y) & shocked:1(e, y))
show :: \x.(show(x))
showed :: \Q \P \y. exists z .(Q(z) & P(y)(z) & showed:1(y, z))
shown :: \P \e. exists y .(P(y) & shown:1(e, y))
sick :: \P \e. exists y .(P(y) & sick(e))
sign :: \x.(sign(x))
signed :: \Q \P \e. exists y z .(Q(y) & P(z) & signed:1(e, z) & signed:2(e, y))
signed :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & signed:1(e, y) & signed:2(e, w) & signed:3(e, z))
signing :: \x.(signing(x))
since :: \Q \P \y. exists z .(Q(y) & P(z) & since:1(y, z))
since :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & since:1(y, w) & since:2(y, z))
singed :: \Q \P \e. exists y z .(Q(y) & P(z) & singed:1(e, z) & singed:2(e, y))
six :: \P \y. (P(y) & COUNT(y, six))
skin :: \x.(skin(x))
slow :: \Q \P \e. exists y z .(Q(y) & P(z) & slow:1(e, z) & slow:2(e, y))
slowly :: \Q \P \y. exists z .(Q(z) & P(y)(z) & slowly(y))
small :: \P \y. (P(y) & small(y))
small :: \P \e. exists y .(P(y) & small(e))
smaller :: \P \e. exists y .(P(y) & smaller(e))
so :: \P \e. exists y .(P(y) & so(e))
socialized :: \P \y. (P(y) & socialized(y))
society :: \x.(society(x))
sometimes :: \Q \P \y. exists z .(Q(z) & P(y)(z) & sometimes(y))
son :: \x.(son(x))
soon :: \Q \P \y. exists z .(Q(z) & P(y)(z) & soon(y))
soon :: \P \y. (P(y) & soon(y))
space :: \x.(space(x))
speaker :: \x.(speaker(x))
speaking :: \x.(speaking(x))
speaking :: \P \e. exists y .(P(y) & speaking:1(e, y))
speaks :: \Q \P \e. exists y z .(Q(y) & P(z) & speaks:1(e, z) & speaks:2(e, y))
special :: \P \y. (P(y) & special(y))
speech :: \x.(speech(x))
speeches :: \x.(speeches(x))
spending :: \x.(spending(x))
spoke :: \P \e. exists y .(P(y) & spoke:1(e, y))
spoke :: \Q \P \e. exists y z .(Q(y) & P(z) & spoke:1(e, z) & spoke:2(e, y))
spokesperson :: \x.(spokesperson(x))
sponsors :: \x.(sponsors(x))
sports :: \x.(sports(x))
star :: \x.(star(x))
starred :: \P \e. exists y .(P(y) & starred:1(e, y))
start :: \x.(start(x))
started :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & started:1(e, z) & started:2(e, y))
state :: \x.(state(x))
statement :: \x.(statement(x))
states :: \x.(states(x))
station :: \x.(station(x))
statue :: \x.(statue(x))
stem :: \x.(stem(x))
stemcell :: \P \y. (P(y) & stemcell(y))
step :: \x.(step(x))
step :: \P \e. exists y .(P(y) & step:1(e, y))
still :: \Q \P \y. exists z .(Q(z) & P(y)(z) & still(y))
stopped :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & stopped:1(e, z) & stopped:2(e, y))
strengthen :: \Q \P \e. exists y z .(Q(y) & P(z) & strengthen:1(e, z) & strengthen:2(e, y))
strongly :: \Q \P \y. exists z .(Q(z) & P(y)(z) & strongly(y))
stuck :: \Q \P \e. exists y z .(Q(y) & P(z) & stuck:1(e, z) & stuck:2(e, y))
student :: \x.(student(x))
students :: \x.(students(x))
succeeded :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & succeeded:1(e, y) & succeeded:2(e, w) & succeeded:3(e, z))
success :: \x.(success(x))
successful :: \P \y. (P(y) & successful(y))
successful :: \P \e. exists y .(P(y) & successful(e))
such :: \Q \P \y. (Q(y) & P & such(y))
such :: \P \y. (P(y) & such(y))
suffered :: \Q \P \e. exists y z .(Q(y) & P(z) & suffered:1(e, z) & suffered:2(e, y))
sunlight :: \x.(sunlight(x))
sunset :: \x.(sunset(x))
supplyside :: \P \y. (P(y) & supplyside(y))
support :: \Q \P \e. exists y z .(Q(y) & P(z) & support:1(e, z) & support:2(e, y))
supported :: \Q \P \e. exists y z .(Q(y) & P(z) & supported:1(e, z) & supported:2(e, y))
supposed :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & supposed:1(e, z) & supposed:2(e, y))
surgery :: \x.(surgery(x))
survive :: \Q \P \e. exists y z .(Q(y) & P(z) & survive:1(e, z) & survive:2(e, y))
survived :: \Q \P \e. exists y z .(Q(y) & P(z) & survived:1(e, z) & survived:2(e, y))
sworn :: \Q \P \e. exists y z .(Q(y) & P(z) & sworn:1(e, z) & sworn:2(e, y))
symptoms :: \x.(symptoms(x))
system :: \x.(system(x))
tactical :: \P \y. (P(y) & tactical(y))
take :: \Q \P \e. exists y z .(Q(y) & P(z) & take:1(e, z) & take:2(e, y))
taken :: \P \e. exists y .(P(y) & taken:1(e, y))
talks :: \x.(talks(x))
tax :: \x.(tax(x))
taxes :: \x.(taxes(x))
tear :: \Q \P \e. exists y z .(Q(y) & P(z) & tear:1(e, z) & tear:2(e, y))
televised :: \P \y. (P(y) & televised(y))
television :: \x.(television(x))
tell :: \Q \P \e. exists y z .(Q(y) & P(z) & tell:1(e, z) & tell:2(e, y))
ten :: \P \y. (P(y) & ten(y))
term :: \x.(term(x))
terrorist :: \P \y. (P(y) & terrorist(y))
text :: \x.(text(x))
than :: \Q \P \y. exists z .(Q(y) & P(z) & than:1(y, z))
thank :: \P \y. (P(y) & thank(y))
that :: \Q \P \y. exists z .(Q(y) & P(z)(y) & that:1(y, z))
that :: \P \e. exists y .(P(y) & that:1(e, y))
that :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
the :: \P \y. (P(y) & UNIQUE(y))
the :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & UNIQUE(y))
their :: \x.(EQUAL(x, their))
them :: \x.(EQUAL(x, them))
then :: \Q \P \y. exists z .(Q(z) & P(y)(z) & then(y))
then :: \P \y. (P(y) & then(y))
thenPresident :: \P \y. (P(y) & thenpresident(y))
therapy :: \x.(therapy(x))
they :: \x.(EQUAL(x, they))
things :: \x.(things(x))
third :: \P \y. (P(y) & third(y))
though :: \Q \P \y. exists z .(Q(y) & P(z) & though:1(y, z))
thought :: \Q \P \e. exists y z .(Q(y) & P(z) & thought:1(e, z) & thought:2(e, y))
thousand :: \P \y. (P(y) & COUNT(y, thousand))
threat :: \x.(threat(x))
three :: \P \y. (P(y) & COUNT(y, three))
through :: \P \e. exists y .(P(y) & through:1(e, y))
throughout :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & throughout:1(y, w) & throughout:2(y, z))
time :: \x.(time(x))
times :: \x.(times(x))
title :: \x.(title(x))
titled :: \P \e. exists y .(P(y) & titled:1(e, y))
to :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & to:1(y, w) & to:2(y, z))
to :: \Q \P \e. exists z y .(Q(z) & P(y)(z) & to:1(e, y) & to:2(e, z))
to :: \Q \P \y. exists z .(Q(y) & P(z) & to:1(y, z))
to :: \P \e. exists y .(P(y) & to:1(e, y))
to :: \Q \P \y. exists z .(Q(z) & P(y)(z) & to:1(y, z))
to :: \P Q x.(P(x) & Q(x))
to :: \Q \P \e. exists y z .(Q & P(y)(z) & to:1(e, z) & to:2(e, y))
together :: \P \y. (P(y) & together(y))
together :: \P \e. exists y .(P(y) & together(e))
told :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & told:1(e, y) & told:2(e, w) & told:3(e, z))
told :: \Q \P \e. exists y z .(Q(y) & P(z) & told:1(e, z) & told:2(e, y))
tomb :: \x.(tomb(x))
tonight :: \Q \P \y. exists z .(Q(z) & P(y)(z) & tonight(y))
tonight :: \x.(tonight(x))
too :: \Q \P \y. (Q(y) & P & too(y))
took :: \Q \P \e. exists y z .(Q(y) & P(z) & took:1(e, z) & took:2(e, y))
took :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & took:1(e, y) & took:2(e, w) & took:3(e, z))
trade :: \Q \P \e. exists y z .(Q(y) & P(z) & trade:1(e, z) & trade:2(e, y))
tragedy :: \x.(tragedy(x))
trailer :: \x.(trailer(x))
travelled :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & travelled:1(e, z) & travelled:2(e, y))
tribute :: \x.(tribute(x))
true :: \P \e. exists y .(P(y) & true(e))
truth :: \x.(truth(x))
turned :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & turned:1(e, z) & turned:2(e, y))
twice :: \Q \P \y. exists z .(Q(z) & P(y)(z) & twice(y))
two :: \P \y. (P(y) & COUNT(y, two))
two :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & COUNT(y, two))
two :: \Q \P \y. (Q(y) & P & COUNT(y, two))
ultimately :: \Q \P \y. exists z .(Q(z) & P(y)(z) & ultimately(y))
unable :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & unable(e))
unarmed :: \P \y. (P(y) & unarmed(y))
unfinished :: \P \y. (P(y) & unfinished(y))
unmistakable :: \P \e. exists y .(P(y) & unmistakable(e))
until :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & until:1(y, w) & until:2(y, z))
until :: \Q \P \y. exists z .(Q(y) & P(z) & until:1(y, z))
unveiled :: \Q \P \e. exists y z .(Q(y) & P(z) & unveiled:1(e, z) & unveiled:2(e, y))
unveiled :: \P \e. exists y .(P(y) & unveiled:1(e, y))
unveiling :: \x.(unveiling(x))
upcoming :: \P \y. (P(y) & upcoming(y))
urged :: \Q \P \R \e. exists z w y .(Q(z)(w) & P(w) & R(y) & urged:1(e, y) & urged:2(e, w) & urged:3(e, z))
use :: \x.(use(x))
use :: \Q \P \R \e. exists z w y .(Q(z)(w) & P(w) & R(y) & use:1(e, y) & use:2(e, w) & use:3(e, z))
used :: \Q \P \e. exists y z .(Q(y) & P(z) & used:1(e, z) & used:2(e, y))
used :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & used:1(e, z) & used:2(e, y))
version :: \x.(version(x))
very :: \Q \P \y. exists z .(Q(z) & P(y)(z) & very(y))
very :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & very(y))
very :: \Q \P \y. (Q(y) & P & very(y))
vetoed :: \Q \P \e. exists y z .(Q(y) & P(z) & vetoed:1(e, z) & vetoed:2(e, y))
vice :: \x.(vice(x))
vicepresident :: \x.(vicepresident(x))
victory :: \x.(victory(x))
views :: \x.(views(x))
visit :: \Q \P \e. exists y z .(Q(y) & P(z) & visit:1(e, z) & visit:2(e, y))
visited :: \Q \P \e. exists y z .(Q(y) & P(z) & visited:1(e, z) & visited:2(e, y))
visitors :: \x.(visitors(x))
vote :: \x.(vote(x))
voted :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & voted:1(e, y) & voted:2(e, w) & voted:3(e, z))
voter :: \x.(voter(x))
votes :: \x.(votes(x))
walking :: \x.(walking(x))
wall :: \x.(wall(x))
want :: \Q \P \R \e. exists z w y .(Q(z)(w) & P(w) & R(y) & want:1(e, y) & want:2(e, w) & want:3(e, z))
wanted :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & wanted:1(e, z) & wanted:2(e, y))
war :: \x.(war(x))
was :: \Q \P \y. exists x.(P(x) & Q(x))
watched :: \Q \P \e. exists y z .(Q(y) & P(z) & watched:1(e, z) & watched:2(e, y))
waving :: \Q \P \e. exists y z .(Q(y) & P(z) & waving:1(e, z) & waving:2(e, y))
we :: \x.(EQUAL(x, we))
weapons :: \x.(weapons(x))
wearing :: \Q \P \e. exists y z .(Q(y) & P(z) & wearing:1(e, z) & wearing:2(e, y))
week :: \x.(week(x))
welcome :: \Q \P \e. exists y z .(Q(y) & P(z) & welcome:1(e, z) & welcome:2(e, y))
welfare :: \x.(welfare(x))
well :: \Q \P \y. exists z .(Q(z) & P(y)(z) & well(y))
went :: \P \e. exists y .(P(y) & went:1(e, y))
went :: \Q \P \e. exists y z .(Q(y) & P(z) & went:1(e, z) & went:2(e, y))
were :: \Q \P \e. exists y z .(Q(y) & P(z) & were:1(e, z) & were:2(e, y))
were :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & were:1(e, z) & were:2(e, y))
what :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
when :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & TARGET(z) & TARGET(w))
when :: \Q \P \y. exists z .(Q(y) & P(z) & TARGET(z))
where :: \P \e. exists y .(P(y) & TARGET(y))
which :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
while :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & while:1(y, w) & while:2(y, z))
who :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
who :: \Q \P \R \y. exists z w v .(Q(y)(z) & P(w)(v) & R(z) & TARGET(z) & TARGET(w) & TARGET(v))
whom :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
wife :: \x.(wife(x))
win :: \Q \P \e. exists y z .(Q(y) & P(z) & win:1(e, z) & win:2(e, y))
winning :: \Q \P \e. exists y z .(Q(y) & P(z) & winning:1(e, z) & winning:2(e, y))
with :: \P \e. exists y .(P(y) & with:1(e, y))
with :: \Q \P \y. exists z .(Q(y) & P(z) & with:1(y, z))
with :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & with:1(y, w) & with:2(y, z))
with :: \Q \P \S \R \y. exists w v u z .(Q(w)(v) & P(u) & S(z) & R(y)(z) & with:1(y, z) & with:2(y, u) & with:3(y, v) & with:4(y, w))
without :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & without:1(y, w) & without:2(y, z))
women :: \x.(women(x))
won :: \Q \P \e. exists y z .(Q(y) & P(z) & won:1(e, z) & won:2(e, y))
work :: \x.(work(x))
worked :: \Q \P \e. exists y z .(Q(y) & P(z) & worked:1(e, z) & worked:2(e, y))
workers :: \x.(workers(x))
workforce :: \x.(workforce(x))
world :: \x.(world(x))
writing :: \x.(writing(x))
wrote :: \Q \P \e. exists y z .(Q(y) & P(z) & wrote:1(e, z) & wrote:2(e, y))
year :: \x.(year(x))
years :: \x.(years(x))
you :: \x.(EQUAL(x, you))
younger :: \P \y. (P(y) & younger(y))
– :: \x.(_–(x))
# CATEGORIES
N :: \x.(EQUAL(x, {0}))
N :: \x.({0}(x))
NP :: \x.(EQUAL(x, {0}))
S/S :: \P \y. (P(y) & {0}(y))
S/S :: \P \e. exists y .(P(y) & {0}:1(e, y))
S/S :: \P \e. exists y .(P(y) & TARGET(y))
S/S :: \P Q x.(P(x) & Q(x))
N/N :: \P \y. (P(y) & COUNT(y, {0}))
N/N :: \P \y. (P(y) & {0}(y))
N/N :: \x.(EQUAL(x, {0}))
N/N :: \x.({0}(x))
N/S :: \x.({0}(x))
N\N :: \P \y. (P(y) & COUNT(y, {0}))
NP/N :: \x.(EQUAL(x, {0}))
NP/N :: \P \y. (P(y) & UNIQUE(y))
NP/N :: None
conj :: \P Q x.(P(x) & Q(x))
S\NP :: \P \e. exists y .(P(y) & {0}:1(e, y))
S\NP :: \P \e. exists y .(P(y) & {0}(e))
S\NP :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}:1(y, z))
S\NP :: \Q \P \y. exists x.(P(x) & Q(x))
NP\NP :: \x.({0}(x))
NP\NP :: \P \y. (P(y) & {0}(y))
NP\NP :: \x.(EQUAL(x, {0}))
NP\NP :: \P \y. (P(y) & COUNT(y, {0}))
NP/NP :: \P \y. (P(y) & {0}(y))
PP/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
PP/NP :: \P \e. exists y .(P(y) & {0}:1(e, y))
PP/NP :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}:1(y, z))
PP/NP :: \Q \P \e. exists z y .(Q(z) & P(y)(z) & {0}:1(e, y) & {0}:2(e, z))
(S/S)/S :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
(S/S)/S :: \Q \P \y. exists z .(Q(y) & P(z) & TARGET(z))
(N\N)/N :: \P Q x.(P(x) & Q(x))
(S\NP)/S :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/S :: \Q \P \y. exists x.(P(x) & Q(x))
(S/S)/NP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
(S/S)\NP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}(y))
(S/S)\NP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
(S/S)/PP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}(y))
(S\NP)/PP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}(e))
(S\NP)/PP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/PP :: \Q \P \y. exists x.(P(x) & Q(x))
(S\NP)\NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}(e))
NP/(S/NP) :: \Q \P \e. exists y z .(Q & P(y)(z) & TARGET(y) & TARGET(z))
(NP\NP)/S :: \Q \P \y. exists z .(Q(y) & P(z) & TARGET(z))
(NP\NP)/S :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
(S\NP)/NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/NP :: \Q \P \y. exists x.(P(x) & Q(x))
(S\NP)/NP :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}:1(y, z))
(S\NP)/NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}(e))
PP/(S\NP) :: \Q \P \e. exists y z .(Q & P(y)(z) & {0}:1(e, z) & {0}:2(e, y))
(NP\NP)/N :: \x.(EQUAL(x, {0}))
(NP/N)\NP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
(NP\NP)/NP :: \Q \P \y. exists z .(Q(y) & P(z) & {0}:1(y, z))
(NP\NP)/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
(NP\NP)/NP :: \P \e. exists y .(P(y) & {0}:1(e, y))
(NP\NP)/NP :: \Q \P \R \y. exists w .(Q & P(w) & R(y) & {0}:1(y, w))
(NP\NP)/NP :: \Q \P \e. exists z y .(Q(z) & P(y)(z) & {0}:1(e, y) & {0}:2(e, z))
(NP\NP)/NP :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}:1(y, z))
(S/S)/(S/S) :: \Q \P \y. (Q(y) & P & {0}(y))
(N/N)/(N/N) :: \Q \P \y. (Q(y) & P & {0}(y))
(S/S)\(S/S) :: \x.(EQUAL(x, {0}))
(N/N)\(N/N) :: \Q \P \y. (Q(y) & P & {0}(y))
(S/S)/(S\NP) :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & {0}:1(y, w) & {0}:2(y, z))
((S/S)/PP)/NP :: \Q \P \R \y. exists z w .(Q(z) & P(w) & R(y) & {0}:1(y, w) & {0}:2(y, z))
(S\NP)\(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}(y))
(S\NP)\(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}:1(y, z))
(S\NP)\(S\NP) :: \x.({0}(x))
(S\NP)\(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & NEGATION(y))
(S\NP)\(S\NP) :: \x.(EQUAL(x, {0}))
(S\NP)/(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}(y))
(S\NP)/(S\NP) :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & {0}:1(e, z) & {0}:2(e, y))
(S\NP)/(S\NP) :: \Q \P \e. exists y z .(Q(y) & P(z)(y) & {0}(e))
(S\NP)/(S\NP) :: \Q \P \y. exists x.(P(x) & Q(x))
(S\NP)/(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & NEGATION(y))
(S\NP)/(S\NP) :: \Q \P \e. exists z y .(Q(z) & P(y)(z) & {0}:1(e, y) & {0}:2(e, z))
(S\NP)/(S\NP) :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}:1(y, z))
(S\NP)/(S\NP) :: \x.(EQUAL(x, {0}))
((S\NP)/S)/NP :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & {0}:1(e, y) & {0}:2(e, w) & {0}:3(e, z))
((S\NP)/S)/NP :: \Q \P \e. exists y z .(Q(y) & P(z) & {0}:1(e, z) & {0}:2(e, y))
((S\NP)/NP)/NP :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & {0}:1(e, y) & {0}:2(e, w) & {0}:3(e, z))
(NP\NP)/(S/NP) :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
((S\NP)/PP)/NP :: \Q \P \R \e. exists z w y .(Q(z) & P(w) & R(y) & {0}:1(e, y) & {0}:2(e, w) & {0}:3(e, z))
((S\NP)/PP)/NP :: \Q \P \y. exists z .(Q(z) & P(y)(z) & {0}:1(y, z))
(NP\NP)/(S\NP) :: \Q \P \y. exists z .(Q(y) & P(z)(y) & {0}:1(y, z))
(NP\NP)/(S\NP) :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & TARGET(z) & TARGET(w))
(NP\NP)/(S\NP) :: \Q \P \y. exists z .(Q(y) & P(z)(y) & TARGET(z))
(NP\NP)/(S\NP) :: \Q \P \y. exists z w .(Q(y) & P(z)(w) & {0}:1(y, w) & {0}:2(y, z))
(NP\NP)/(NP\NP) :: \Q \P \y. (Q(y) & P & {0}(y))
(NP\NP)/(NP\NP) :: \Q \P \y. (Q(y) & P & COUNT(y, {0}))
(NP\NP)\(NP\NP) :: \Q \P \y. (Q(y) & P & COUNT(y, {0}))
((N/N)\(N/N))/NP :: \Q \P \R \y. exists w .(Q & P(w) & R(y) & {0}:1(y, w))
((S\NP)\(S\NP))/S :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
((S\NP)\(S\NP))/S :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & TARGET(z) & TARGET(w))
((S\NP)\(S\NP))/N :: \P \y. (P(y) & UNIQUE(y))
((S\NP)\(S\NP))/N :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & UNIQUE(y))
((S\NP)\(S\NP))/N :: \x.(EQUAL(x, {0}))
((S\NP)/(S\NP))/S :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
((S\NP)/(S\NP))/NP :: \Q \P \R \e. exists z w y .(Q(z)(w) & P(w) & R(y) & {0}:1(e, y) & {0}:2(e, w) & {0}:3(e, z))
((S\NP)/(S\NP))/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
((S\NP)\(S\NP))/PP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}(y))
((S\NP)\(S\NP))/PP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
((S\NP)\(S\NP))/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}:1(y, w) & {0}:2(y, z))
((S\NP)\(S\NP))/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w)(z) & R(z) & {0}:1(y, w) & {0}:2(y, z))
((S\NP)\(S\NP))/NP :: \Q \P \e. exists z y .(Q(z) & P(y)(z) & {0}:1(e, y) & {0}:2(e, z))
((S\NP)\(S\NP))/NP :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w) & R(z) & {0}(y))
((S\NP)\(S\NP))/(S/NP) :: \Q \P \R \y. exists z w v .(Q(y)(z) & P(w)(v) & R(z) & TARGET(z) & TARGET(w) & TARGET(v))
((S\NP)\(S\NP))/(S\NP) :: \Q \P \R \y. exists z w .(Q(y)(z) & P(w)(z) & R(z) & {0}:1(y, w) & {0}:2(y, z))
(((S\NP)\(S\NP))/(S\NP))/NP :: \Q \P \S \R \y. exists w v u z .(Q(w)(v) & P(u) & S(z) & R(y)(z) & {0}:1(y, z) & {0}:2(y, u) & {0}:3(y, v) & {0}:4(y, w))
((S\NP)\(S\NP))/((S\NP)\(S\NP)) :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & {0}(y))
((S\NP)\(S\NP))/((S\NP)\(S\NP)) :: \Q \P \R \y. exists z .(Q(y)(z) & P & R(z) & COUNT(y, {0}))
(((S\NP)\(S\NP))/((S\NP)\(S\NP)))/NP :: \Q \P \S \R \y. exists v z .(Q & P(v) & S(z) & R(y)(z) & {0}:1(y, z) & {0}:2(y, v))
